Imports System.Collections.Generic

Public Class QUM00001
    Inherits System.Windows.Forms.Form

#Region " QUM00001 Variable "

    Public updItm As frmQutUpdItm
    Public RnwItm As frmRenewQuot

    Public toBeMod As QUM00001_2
    Public renewQuot As frmRenewQuot
    Public copyQut As frmCopyQut
    Public qut As frmQut
    Dim itmno_bef As String

    Public flag_cmdInsRow_Click As Boolean

    Public item_update_list As String
    Public gb_frmQutUpdItm_hide As Boolean


    Public copyQutCoCde As String
    Public copyQutCus1no As String
    Public copyQutCus2no As String
    Public copyQutCus1noFull As String
    Public copyQutCus2noFull As String

    Public rs As New DataSet
    Public rs_QUOTNDTL_Copy As New DataSet
    Public rs_QUCPTBKD_Copy As New DataSet
    Public rs_QUASSINF_Copy As New DataSet
    Public rs_QUCSTEMT_Copy As New DataSet
    Public rs_QUADDINF_Copy As New DataSet
    Public rs_QUELC_Copy As New DataSet
    Public rs_QUELCDTL_Copy As New DataSet

    Public rs_SYUSRRIGHT_Check As New DataSet

    Public rs_CUBASINF_P_SALES As New DataSet
    Public rs_CUBASINF_S As New DataSet
    Public rs_VNBASINF As New DataSet

    Public rs_DOC_GEN As New DataSet

    Public rs_IMTMPREL_ConToReal As New DataSet

    Public rs_UM As New DataSet
    Public rs_FtyPrcTrm As New DataSet
    Public rs_DtlPrcTrm As New DataSet

    Public rs_CUCNTINF_C As New DataSet

    Public rs_SYSETINF As New DataSet

    Dim rs_quotation_list_tbc As DataSet
    Dim rs_select_quotation_tbc As DataSet
    Dim rs_update_quotation_tbc As DataSet
    Dim rs_IMVENINF_tbc As DataSet


    Private Const sMODULE As String = "QU"
    Dim drNewRow As DataRow
    Dim sFilter As String
    Dim dr() As DataRow
    Public sReadingIndexQ As String = 0
    Dim sReadingIndexP As Integer = 0
    Dim PreviousTab As Integer = 0
    Dim isSorting As Boolean = False
    Dim pth As String

    Dim Discount_Flag As Boolean
    Dim PCPrc_Flag As Boolean
    Dim PCPrcP_Flag As Boolean
    Dim Current_TimeStamp As Long
    Dim EditModeHdr As String
    Dim Recordstatus As Boolean

    Dim copy_flag As Boolean
    Dim Add_flag As Boolean
    Dim Insert_flag As Boolean
    Dim save_ok As Boolean
    Dim qutNo As String
    Dim IsUpdated As Boolean
    Public no_Display_Detail As Boolean
    Dim save_fail As Boolean
    Dim last_cust As String
    Dim last_cust_sec As String
    Dim auth As Boolean
    Dim check_discnt As Boolean
    Dim check_cus1dp As Boolean
    Dim check_grsmgn As Boolean
    Public fml As String
    Dim ftyprc As Double
    Dim cus1dp As Double
    Public discnt As Boolean
    Public cusdp As Boolean
    Dim qutsts As String

    Dim cus1no_bef As String
    Dim cus2no_bef As String

    Dim sort_seq As Boolean
    Dim sort_itm As Boolean
    Dim sort_ftytmpitm As Boolean
    Dim sort_cusstyno As Boolean
    Dim sort_ftytmpitmno As Boolean

    Dim Enq_right_local As Boolean
    Dim Del_right_local As Boolean

    Dim sPckCus1No As String
    Dim sPckCus2No As String
    Dim no_need_check_btcindex As Boolean
    Dim cbopcking_got_focus As Boolean
    Dim cboColCde_got_focus As Boolean
    Public Is_Updating_item As Boolean
    Public cus1_rounding As Integer



    Dim rs_CUGRPINF As New DataSet ' for Customer Group Information
    Dim rs_CUBASINF_P As New DataSet ' for Secondary Customer of Primary Customer
    Dim rs_CUBASINF_CP As New DataSet ' for Contact person of the Customer
    Dim rs_CUBASINF_A As New DataSet ' for Agent of Primary Customer
    '*** Phase 2
    Dim rs_SYSALREL As New DataSet ' for Sales Divisions and Teams of Primary Customer

    Dim rs_CUBASINF_SR As New DataSet ' for Sales Rep of Primary Customer
    Dim rs_CUBASINF_ST As New DataSet ' for Sample Term of Primary Customer
    Dim rs_CUBASINF_C As New DataSet ' for Currency of Primary Customer
    Public rs_CUBASINF_CR As New DataSet ' for Currency Rate
    Dim rs_CUBASINF_PT As ADOR.Recordset ' for Payment Term of Primary Customer
    Public rs_QUOTNHDR As New DataSet ' for retrieve Quotation Header information
    '*** Phase 2 comment it
    'Public rs_CUMCAMRK As New DataSet ' for Category markup of Primary Customer
    Public rs_QUOTNDTL As New DataSet ' for retrieve Quotation Details information
    Public rs_QUOTNDTL_functional As New DataSet ' for retrieve Quotation Details information
    Public rs_QUOTNDTL_summary As New DataSet ' for retrieve Quotation Details information
    Public rs_QUOTNDTL_Price As New DataSet ' for retrieve Quotation Details information
    Public rs_QUOTNDTL_TO As New DataSet ' for retrieve Quotation Details information

    Public rs_QUCPTBKD As New DataSet ' for Component Breakdown information
    Public rs_QUASSINF As New DataSet ' for Assortment Item information
    Public rs_QUDTLSHP As New DataSet ' for TO multiple shipment information

    Dim rs_IMBASINF As New DataSet ' for Item Basic
    Dim rs_IMCOLINF As New DataSet  ' for Item Color
    Dim rs_IMPRCINF As New DataSet  ' for Item Pricing
    Dim rs_IMPRCINF_NewAddItem As New DataSet
    Dim rs_IMPCKINF As New DataSet ' for Item Packing
    Dim rs_IMMATBKD As New DataSet  ' for Component Breakdown
    Dim rs_IMBOMASS As New DataSet  ' for Assorted Item
    Dim rs_IMVENINF As New DataSet  ' for Vendor Item (IMVENINF, IMPRCINF, VNBASINF)
    Public rs_SYHRMCDE As New DataSet ' for HSTU/Tariff #
    Dim rs_SYTIESTR As New DataSet  ' for MOQ & MOA of Standard Tier
    Dim rs_SYCONFTR As New DataSet  ' for Conversion Factor
    Dim rs_CUBASINF_CM As New DataSet ' for Construction Method
    Dim rs_CUITMSUM As New DataSet  ' for Customer Item History Summary
    Public rs_CUBASINF_SalRep As New DataSet

    '*** Phase 2
    Public rs_QUPRCEMT As New DataSet ' for Price Elements
    Dim rs_IMTMPREL As New DataSet

    Dim rs_q As New DataSet
    Dim rs_A As New DataSet
    Dim rs_IMXCHK As New DataSet ' for multi Company item Check
    Dim Alias_itm As Boolean
    Dim Alias_itmno As String
    Dim QuotCopyFlag As Boolean

    Public ORI_MOFLAG As String ' Define Variable to Store Original/Modified MOQ/MOA Flag
    Public ORI_MOA As String ' Define Variable to Store Original MOQ/MOA
    Public ORI_MOQ As String ' Define Variable to Store Original MOQ/MOA

    Public pub_copy_cus2 As String

    Dim org_MOFLAG_tmp As String
    Dim org_MOQ_tmp As String
    Dim org_MOA_tmp As String
    Dim org_Curr_tmp As String
    Dim org_QUTNO_tmp As String
    Dim org_IM_MOQ_tmp As String
    Dim org_IM_MOA_tmp As String
    Dim org_DATASRC_tmp As String
    Dim org_asscnt As Integer

    Dim bolUPdate_MOQ_MOA As Boolean
    Dim bolLatestQut As Boolean

    Dim bolUpdating As Boolean ' set status whether is updating, mainly for the new search function

    Dim OldItemRecord As Boolean
    Dim flgRenewing As Boolean

    Dim flgApplyAllPC As Boolean
    Dim flgLoadApplyAllPC As Boolean
    Dim flghdrPC As Boolean
    Dim gi_saved_items_count As Integer

    Dim no_formula_to_insert As Boolean


    Public rs_QUADDINF As New DataSet
    Public rs_SYQUADDINF As New DataSet
    Public rs_QUCSTEMT As New DataSet
    Public rs_QUCSTAMT As New DataSet
    Public rs_Season As New DataSet
    Public rs_CustItmCat As New DataSet
    Public ori_qce_amt As String
    Public ori_qce_percent As String
    Public rs_QUELC As New DataSet
    Public rs_QUELCDTL As New DataSet
    Public rs_CUBASINF_rounding As New DataSet
    Public ori_qed_percent As String
    '*** Phase 2 comment it
    'Public IsEmptySpecPck As Boolean
    'Public IsEmptyDuty As Boolean
    Public strApprMax As String
    Public strApprMin As String
    Dim flgUpdItm As Boolean
    '*** Phase 2 comment it
    'Dim flggrdMatbkd As Boolean
    Public rs_MtrConvert As New DataSet

    Public strCurExRat As String
    Public strCurExEffDat As String

    Dim bIsShowPanels As Boolean '*** Phase 2 if a Panel is shown, set to true, cover the whole form to prevent detail index be changed

    '*** Phase 2 save the original values of the textboxes in PrcEmt Panel
    Dim sceMUP As String
    Dim scePckCstAmtChgP As String
    Dim sceItmCommAmtChgP As String
    Dim sceDiscntP, sceCus1DpP As String

    Dim sFocusedOn As String = ""

    '*** Phase 2
    Dim sMode As String
    Public samGen As SAM00004

    Private Const cModeInit As String = "Init"
    Private Const cModeAdd As String = "Add"
    Private Const cModeCopy As String = "Copy"
    Private Const cModeUpd As String = "Updating"
    Private Const cModeSave As String = "Save"
    Private Const cModeDel As String = "Delete"
    Private Const cModeRead As String = "ReadOnly"
    Private Const cModeClear As String = "Clear"

    Private Const cPanelSizeWidth As Integer = 954
    Private Const cPanelSizeHeight As Integer = 612
    Private Const cPanelLocationX As Integer = 0
    Private Const cPanelLocationY As Integer = 0
    Dim cmd_enable(100)
    Dim txtPCPrc_Text_round_5 As Decimal
    Dim txtPCPrcP_Text_round_5 As Decimal


    '''20140129
    ''' 
    Dim flag_cbopacking_keypress As Boolean
    Dim flag_cboColCde_keypress As Boolean


    Dim flag_txtMU_keypress As Boolean
    Dim flag_txtPckCstAmt_keypress As Boolean
    Dim flag_txtItmCommAmt_keypress As Boolean
    Dim flag_txtCus1Dp_keypress As Boolean

    Dim flag_txtMUP_keypress As Boolean
    Dim flag_txtPckCst1P_keypress As Boolean
    Dim flag_txtItmComm1P_keypress As Boolean
    Dim flag_txtCus1DpP_keypress As Boolean

    Dim flag_txtPCPrc_keypress As Boolean

    Dim flag_dgOthDtl_keypress As Boolean
    Dim count_sts_E As Integer
    Dim count_sts_W As Integer

    ''20130729

    Public pub_copy_qutno As String
    Public pub_copy_cbocono As String
    Public pub_copy_to_new_cocde As String
    Public pub_copy_to_new_cus1no As String
    Public pub_copy_to_new_cus2no As String

    Dim txtCusItm_Text As String
    Dim txtCusSty_Text As String
    Dim txtcih_curcde_Text As String
    Dim txtcih_prc_Text As String

    Dim pub_copy_cbocono2 As String
    Public gf_packing_miss As Integer

    Public gf_need_msg_seqno As Boolean
    Dim flag_txtPCPrcP_keypress As Boolean

    Dim temp_cboItmNoVen_text As String  'venno+venname

    Dim rs_CUCALFML As New DataSet

    Dim either_cus1dp_or_cus2dp As Decimal  'for cal pcprc


    Dim rs_TOORDHDR As New DataSet '  
    Dim rs_TOORDDTL As New DataSet '  
    Dim rs_TOORDDTL2 As New DataSet '  
    Dim rs_insert_SAREQHDR As New DataSet '  
    Dim rs_insert_SAREQDTL2 As New DataSet '  
    Dim rs_QUASSINF_TO_tmp As New DataSet '  
    Dim rs_QUOTNDTL_TO_tmp As New DataSet '  
    Dim currentDtlVerno As Integer


    Dim current_row As Integer

    Dim gs_messaeg As String
    Dim flag_to_released As Boolean
    Dim flag_ftyprc_diff(1) As Boolean
    Dim flag_no_update_mu(1) As Boolean

    Dim flag_no_TO_item_to_gen As Boolean

    Dim txtMUP_Text As String
    Dim txtPckCst1P_Text As String
    Dim txtItmComm1P_Text As String
    Dim txtCus1DpP_Text As String
    Dim txtPCPrcP_Text As String

    Dim txtQutItmSts_Text As String
    Dim txtQutSts_Text As String
    Dim dtl_txtQutItmSts As String
    Dim dtl_qud_apprve As String
    Dim hdr_txtQutSts As String

    Dim flag_chkApprove_keypress As Boolean

    Dim flag_txtHDRFtyShpDateStr_GotFocus As Boolean
    Dim flag_txtHDRFtyShpDateEnd_GotFocus As Boolean
    Dim flag_txtHDRCustShpDateStr_GotFocus As Boolean
    Dim flag_txtHDRCustShpDateEnd_GotFocus As Boolean

    Dim flag_txtDTLFtyShpDateStr_GotFocus As Boolean
    Dim flag_txtDTlFtyShpDateEnd_GotFocus As Boolean
    Dim flag_txtDTLCustShpDateStr_GotFocus As Boolean
    Dim flag_txtDTLCustShpDateEnd_GotFocus As Boolean

    Dim flag_txtColCde_GotFocus As Boolean
    Dim flag_delete_to_seq(1) As Integer

#End Region

#Region " Datagrid Variable "
    Dim dgOthDtl_Del As Integer
    Dim dgOthDtl_mode As Integer
    Dim dgOthDtl_upditmdtl As Integer
    Dim dgOthDtl_updmoqmoa As Integer
    Dim dgOthDtl_updassbom As Integer
    Dim dgOthDtl_converttopc As Integer
    Dim dgOthDtl_qud_cocde As Integer
    Dim dgOthDtl_qud_qutno As Integer
    Dim dgOthDtl_qud_qutseq As Integer
    Dim dgOthDtl_qud_itmsts As Integer
    Dim dgOthDtl_qud_qutitmsts As Integer
    Dim dgOthDtl_qud_itmno As Integer
    Dim dgOthDtl_qud_itmtyp As Integer
    Dim dgOthDtl_qud_itmnotyp As Integer
    Dim dgOthDtl_qud_itmnoreal As Integer
    Dim dgOthDtl_qud_itmnotmp As Integer
    Dim dgOthDtl_qud_itmnoven As Integer
    Dim dgOthDtl_qud_itmnovenno As Integer
    Dim dgOthDtl_qud_itmdsc As Integer
    Dim dgOthDtl_qud_cusstyno As Integer
    Dim dgOthDtl_qud_cusitm As Integer
    Dim dgOthDtl_qud_alsitmno As Integer
    Dim dgOthDtl_qud_upc As Integer
    Dim dgOthDtl_qud_colcde As Integer
    Dim dgOthDtl_qud_coldsc As Integer
    Dim dgOthDtl_qud_alscolcde As Integer
    Dim dgOthDtl_qud_cuscol As Integer
    Dim dgOthDtl_qud_pckseq As Integer
    Dim dgOthDtl_qud_packterm As Integer
    Dim dgOthDtl_qud_untcde As Integer
    Dim dgOthDtl_qud_inrqty As Integer
    Dim dgOthDtl_qud_mtrqty As Integer
    Dim dgOthDtl_qud_prctrm As Integer
    Dim dgOthDtl_qud_ftyprctrm As Integer
    Dim dgOthDtl_qud_trantrm As Integer
    Dim dgOthDtl_qud_conftr As Integer
    Dim dgOthDtl_qud_effdat As Integer
    Dim dgOthDtl_qud_expdat As Integer
    Dim dgOthDtl_qud_cus1no As Integer
    Dim dgOthDtl_qud_cus2no As Integer
    Dim dgOthDtl_qud_cft As Integer
    Dim dgOthDtl_qud_cbm As Integer
    Dim dgOthDtl_inner_in As Integer
    Dim dgOthDtl_master_in As Integer
    Dim dgOthDtl_inner_cm As Integer
    Dim dgOthDtl_master_cm As Integer
    Dim dgOthDtl_qud_inrdin As Integer
    Dim dgOthDtl_qud_inrwin As Integer
    Dim dgOthDtl_qud_inrhin As Integer
    Dim dgOthDtl_qud_mtrdin As Integer
    Dim dgOthDtl_qud_mtrwin As Integer
    Dim dgOthDtl_qud_mtrhin As Integer
    Dim dgOthDtl_qud_inrdcm As Integer
    Dim dgOthDtl_qud_inrwcm As Integer
    Dim dgOthDtl_qud_inrhcm As Integer
    Dim dgOthDtl_qud_mtrdcm As Integer
    Dim dgOthDtl_qud_mtrwcm As Integer
    Dim dgOthDtl_qud_mtrhcm As Integer
    Dim dgOthDtl_qud_qutdat As Integer
    Dim dgOthDtl_qud_grswgt As Integer
    Dim dgOthDtl_qud_netwgt As Integer
    Dim dgOthDtl_qud_pckitr As Integer
    Dim dgOthDtl_qud_dept As Integer
    Dim dgOthDtl_qud_hstref As Integer
    Dim dgOthDtl_qud_moq As Integer
    Dim dgOthDtl_qud_moqunttyp As Integer
    Dim dgOthDtl_qud_moa As Integer
    Dim dgOthDtl_qud_prcsec As Integer
    Dim dgOthDtl_qud_grsmgn As Integer
    Dim dgOthDtl_qud_curcde As Integer
    Dim dgOthDtl_qud_cus1sp As Integer
    Dim dgOthDtl_qud_cus2sp As Integer
    Dim dgOthDtl_qud_cus1dp As Integer
    Dim dgOthDtl_qud_cus2dp As Integer
    Dim dgOthDtl_qud_discnt As Integer
    Dim dgOthDtl_qud_contopc As Integer
    Dim dgOthDtl_qud_pcprc As Integer
    Dim dgOthDtl_qud_fcurcde As Integer
    Dim dgOthDtl_qud_ftyprc As Integer
    Dim dgOthDtl_qud_ftycst As Integer
    Dim dgOthDtl_qud_basprc As Integer
    Dim dgOthDtl_qpe_cocde As Integer
    Dim dgOthDtl_qpe_qutno As Integer
    Dim dgOthDtl_qpe_qutseq As Integer
    Dim dgOthDtl_qpe_itmno As Integer
    Dim dgOthDtl_qpe_untcde As Integer
    Dim dgOthDtl_qpe_inrqty As Integer
    Dim dgOthDtl_qpe_mtrqty As Integer
    Dim dgOthDtl_qpe_cft As Integer
    Dim dgOthDtl_qpe_cbm As Integer
    Dim dgOthDtl_qpe_ftyprctrm As Integer
    Dim dgOthDtl_qpe_prctrm As Integer
    Dim dgOthDtl_qpe_trantrm As Integer

    Dim dgOthDtl_qpe_cus1no As Integer
    Dim dgOthDtl_qpe_cus2no As Integer
    Dim dgOthDtl_qpe_cat As Integer
    Dim dgOthDtl_qpe_ventyp As Integer
    Dim dgOthDtl_qpe_ventran As Integer

    Dim dgOthDtl_qpe_fml_cus1no As Integer
    Dim dgOthDtl_qpe_fml_cus2no As Integer
    Dim dgOthDtl_qpe_fml_cat As Integer
    Dim dgOthDtl_qpe_fml_venno As Integer
    Dim dgOthDtl_qpe_fml_ventyp As Integer
    Dim dgOthDtl_qpe_fml_ventranflg As Integer
    Dim dgOthDtl_qpe_fml_prctrm As Integer
    Dim dgOthDtl_qpe_fml_trantrm As Integer

    Dim dgOthDtl_qpe_fcurcde As Integer
    Dim dgOthDtl_qpe_ftycst As Integer
    Dim dgOthDtl_qpe_ftyprc As Integer
    Dim dgOthDtl_qpe_curcde As Integer
    Dim dgOthDtl_qpe_basprc As Integer
    Dim dgOthDtl_qpe_mu As Integer
    Dim dgOthDtl_qpe_mumin As Integer
    Dim dgOthDtl_qpe_muprc As Integer
    Dim dgOthDtl_qpe_cus1sp As Integer
    Dim dgOthDtl_qpe_cus1dp As Integer
    Dim dgOthDtl_qpe_cushcstbufper As Integer
    Dim dgOthDtl_qpe_cushcstbufamt As Integer
    Dim dgOthDtl_qpe_othdisper As Integer
    Dim dgOthDtl_qpe_maxapvper As Integer
    Dim dgOthDtl_qpe_maxapvamt As Integer
    Dim dgOthDtl_qpe_spmuper As Integer
    Dim dgOthDtl_qpe_dpmuper As Integer
    Dim dgOthDtl_qpe_cumu As Integer
    Dim dgOthDtl_qpe_pm As Integer
    Dim dgOthDtl_qpe_cush As Integer
    Dim dgOthDtl_qpe_thccusper As Integer
    Dim dgOthDtl_qpe_upsper As Integer
    Dim dgOthDtl_qpe_labper As Integer
    Dim dgOthDtl_qpe_faper As Integer
    Dim dgOthDtl_qpe_cstbufper As Integer
    Dim dgOthDtl_qpe_othper As Integer
    Dim dgOthDtl_qpe_pliper As Integer
    Dim dgOthDtl_qpe_dmdper As Integer
    Dim dgOthDtl_qpe_rbtper As Integer
    Dim dgOthDtl_qpe_subttlper As Integer
    Dim dgOthDtl_qpe_pkgper As Integer
    Dim dgOthDtl_qpe_comper As Integer
    Dim dgOthDtl_qpe_icmper As Integer
    Dim dgOthDtl_qpe_stdprc As Integer
    Dim dgOthDtl_qpe_creusr As Integer
    Dim dgOthDtl_qpe_updusr As Integer
    Dim dgOthDtl_qpe_credat As Integer
    Dim dgOthDtl_qpe_upddat As Integer
    Dim dgOthDtl_qpe_timstp As Integer
    Dim dgOthDtl_qud_stkqty As Integer
    Dim dgOthDtl_qud_cusqty As Integer
    Dim dgOthDtl_qud_smpqty As Integer
    Dim dgOthDtl_qud_smpunt As Integer
    Dim dgOthDtl_qud_smpprc As Integer
    Dim dgOthDtl_qud_rndsts As Integer
    Dim dgOthDtl_qud_buyer As Integer
    Dim dgOthDtl_qud_toqty As Integer
    Dim dgOthDtl_qud_tormk As Integer
    Dim dgOthDtl_qud_ftyshpstr As Integer
    Dim dgOthDtl_qud_ftyshpend As Integer
    Dim dgOthDtl_qud_cushpstr As Integer
    Dim dgOthDtl_qud_cushpend As Integer
    Dim dgOthDtl_qud_venno As Integer
    Dim dgOthDtl_vbi_vensts As Integer
    Dim dgOthDtl_qud_venitm As Integer
    Dim dgOthDtl_qud_cusven As Integer
    Dim dgOthDtl_qud_DV As Integer
    Dim dgOthDtl_qud_TV As Integer
    Dim dgOthDtl_qud_ftyaud As Integer
    Dim dgOthDtl_qud_cususdcur As Integer
    Dim dgOthDtl_qud_cususd As Integer
    Dim dgOthDtl_qud_cuscadcur As Integer
    Dim dgOthDtl_qud_cuscad As Integer
    Dim dgOthDtl_qud_note As Integer
    Dim dgOthDtl_qud_image As Integer
    Dim dgOthDtl_qud_imgpth As Integer
    Dim dgOthDtl_qud_hrmcde As Integer
    Dim dgOthDtl_qud_dtyrat As Integer
    Dim dgOthDtl_qud_cosmth As Integer
    Dim dgOthDtl_ysi_dsc As Integer
    Dim dgOthDtl_qud_apprve As Integer
    Dim dgOthDtl_ibi_catlvl3 As Integer
    Dim dgOthDtl_vbi_ventyp As Integer
    Dim dgOthDtl_CIHCURR As Integer
    Dim dgOthDtl_CIHAMT As Integer
    Dim dgOthDtl_qud_onetim As Integer
    Dim dgOthDtl_qud_pdabpdiff As Integer
    Dim dgOthDtl_qud_ftytmpitm As Integer
    Dim dgOthDtl_qud_ftytmpitmno As Integer
    Dim dgOthDtl_qce_amt As Integer
    Dim dgOthDtl_qud_subcde As Integer
    Dim dgOthDtl_qud_tbm As Integer
    Dim dgOthDtl_qud_tbmsts As Integer
    Dim dgOthDtl_qud_moflag As Integer
    Dim dgOthDtl_qud_orgmoq As Integer
    Dim dgOthDtl_qud_orgmoa As Integer
    Dim dgOthDtl_qud_cussub As Integer
    Dim dgOthDtl_qud_specpck As Integer
    Dim dgOthDtl_qud_custitmcat As Integer
    Dim dgOthDtl_qud_custitmcatfml As Integer
    Dim dgOthDtl_qud_custitmcatamt As Integer
    Dim dgOthDtl_qud_pmu As Integer
    Dim dgOthDtl_qud_imrmk As Integer
    Dim dgOthDtl_qud_calpmu As Integer
    Dim dgOthDtl_qud_creusr As Integer
    Dim dgOthDtl_qud_updusr As Integer
    Dim dgOthDtl_qud_credat As Integer
    Dim dgOthDtl_qud_upddat As Integer
    Dim dgOthDtl_qud_timstp As Integer

    Dim dgOthDtl_qpe_ftycstA As Integer
    Dim dgOthDtl_qpe_ftycstB As Integer
    Dim dgOthDtl_qpe_ftycstC As Integer
    Dim dgOthDtl_qpe_ftycstD As Integer
    Dim dgOthDtl_qpe_ftycstTran As Integer
    Dim dgOthDtl_qpe_ftycstPack As Integer
    Dim dgOthDtl_qpe_lightspec As Integer


#End Region

    'NEW ADD FUNCTION

    Private Sub formInit(ByVal m As String)
        If m = cModeInit Then
            Call clearAllDisplay(Me)
        End If

        Call resetcmdButton(m)

        Call resetDisplay(m)

        'Me.StatusBar.Text = m
        'Me.StatusBarPanel1.Text = m
        SetStatusBar(m)
    End Sub

    Private Sub resetDisplay(ByVal m As String)
        If m = cModeInit Then
            Recordstatus = False
            cboCoCde.Enabled = True
            txtQutNo.Enabled = True

            Call GetDefaultCompany(cboCoCde, txtCoNam)

            flag_cbopacking_keypress = False
            flag_cboColCde_keypress = False

            flag_txtMU_keypress = False
            flag_txtPckCstAmt_keypress = False
            flag_txtItmCommAmt_keypress = False

            flag_txtMUP_keypress = False
            flag_txtPckCst1P_keypress = False
            flag_txtItmComm1P_keypress = False
            flag_txtCus1DpP_keypress = False
            flag_txtPCPrcP_keypress = False

            freeze_TabControl(0)
            'release_TabControl()

            Me.btcQUM00001.SelectedIndex = 0
        ElseIf m = cModeAdd Then

            freeze_TabControl(0)

            'release_TabControl()
            Me.btcQUM00001.SelectedIndex = 0

        ElseIf m = cModeUpd Then
            release_TabControl()
            Me.btcQUM00001.SelectedIndex = 0

            'Header
            If cboCus1Cp.Items.Count > 1 Then
                gbPri.Enabled = True
                cboCus1Cp.Enabled = True
            Else
                cboCus1Cp.Enabled = False
            End If

            If cboCus2Cp.Items.Count > 1 Then
                gbSec.Enabled = True
                cboCus2Cp.Enabled = True
            Else
                cboCus2Cp.Enabled = False
            End If

            gbSales.Enabled = True
            cboSalRep.Enabled = True
            cboYear.Enabled = True
            cboSeason.Enabled = True
            txtDesc.Enabled = True
            txtRmk.Enabled = True
        ElseIf m = cModeRead Then
            release_TabControl()
            Me.btcQUM00001.SelectedIndex = 0
        End If

        gbView.Enabled = True
        rbView_A.Enabled = True
        rbView_A.Checked = True
        Call display_dgOthDtl("A")

        rbView_F.Enabled = True
        rbView_P.Enabled = True
        rbView_S.Enabled = True
        rbView_T.Enabled = True

    End Sub

    Private Sub clearAllDisplay(ByVal fv As Control)
        Dim v As Control
        For Each v In fv.Controls

            If TypeOf v Is BaseTabControl Then
                Dim btc As BaseTabControl
                btc = v
                Dim i As Integer
                For i = 0 To btc.TabPages.Count - 1
                    Call clearAllDisplay(btc.TabPages(i))
                Next i
            ElseIf TypeOf v Is GroupBox Then
                Call clearAllDisplay(v)
                v.Enabled = False
            Else
                If TypeOf v Is TextBox Or TypeOf v Is MaskedTextBox Or TypeOf v Is ComboBox Or TypeOf v Is RichTextBox Then
                    v.Text = ""
                    v.Enabled = False
                ElseIf TypeOf v Is ListBox Then
                    Dim lb As ListBox
                    lb = v
                    lb.Items.Clear()
                    v.Enabled = False
                ElseIf TypeOf v Is CheckBox Then
                    Dim cb As CheckBox
                    cb = v
                    cb.Checked = False
                    v.Enabled = False
                ElseIf TypeOf v Is DataGridView Then
                    Dim dg As DataGridView
                    dg = v
                    dg.DataSource = Nothing
                End If
            End If
        Next v

        PanelCptBkd.Visible = False
        PanelItmNoConv.Visible = False
        PanelItmNoSelect.Visible = False
        PanelMutShp.Visible = False
        gbPanelCstEmt.Visible = False
    End Sub

    Private Sub resetcmdButton(ByVal m As String)
        If m = cModeInit Then
            If Enq_right_local = True Then
                Me.cmdAdd.Enabled = True
            Else
                Me.cmdAdd.Enabled = False
            End If
            Me.cmdSave.Enabled = False
            Me.cmdDelete.Enabled = False
            Me.cmdCopy.Enabled = False
            Me.cmdFind.Enabled = True
            Me.cmdClear.Enabled = True

            Me.cmdSearch.Enabled = True

            Me.cmdInsRow.Enabled = False
            Me.cmdDelRow.Enabled = False

            Me.cmdGenSmp.Enabled = False
            Me.cmdGenTent.Enabled = False

            Me.cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            ''''''20130826   cmdReset.Enabled = True

            Me.cmdExit.Enabled = True
            cmdRenew.Enabled = False
            cmdUpdate.Enabled = False

        ElseIf m = cModeAdd Then
            Me.cmdAdd.Enabled = False
            Me.cmdSave.Enabled = True
            Me.cmdDelete.Enabled = False
            Me.cmdCopy.Enabled = False
            Me.cmdFind.Enabled = False
            Me.cmdClear.Enabled = True

            Me.cmdSearch.Enabled = False

            Me.cmdInsRow.Enabled = True
            Me.cmdDelRow.Enabled = True

            Me.cmdGenSmp.Enabled = False
            Me.cmdGenTent.Enabled = False

            Me.cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            ''''''20130826   cmdReset.Enabled = True

            Me.cmdExit.Enabled = True

            ''' 20130909
            'cmdRenew.Enabled = True
            'cmdUpdate.Enabled = True


        ElseIf m = cModeUpd Then
            Me.cmdAdd.Enabled = False
            Me.cmdSave.Enabled = True
            Me.cmdDelete.Enabled = False
            Me.cmdCopy.Enabled = True
            Me.cmdFind.Enabled = False
            Me.cmdClear.Enabled = True

            Me.cmdSearch.Enabled = False

            Me.cmdInsRow.Enabled = True
            Me.cmdDelRow.Enabled = True

            Me.cmdGenSmp.Enabled = True
            Me.cmdGenTent.Enabled = True

            Me.cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            ''''''20130826   cmdReset.Enabled = True
            'If OldItemRecord = True Then
            '    cmdReset.Enabled = Enq_right_local
            'Else
            '    cmdReset.Enabled = False
            'End If

            Me.cmdExit.Enabled = True
            cmdRenew.Enabled = True
            cmdUpdate.Enabled = True

        ElseIf m = cModeRead Then
            Me.cmdAdd.Enabled = False
            Me.cmdSave.Enabled = False
            Me.cmdDelete.Enabled = False

            If Enq_right_local = True Then
                Me.cmdCopy.Enabled = True
            Else
                Me.cmdCopy.Enabled = False
            End If


            Me.cmdFind.Enabled = False
            Me.cmdClear.Enabled = True

            Me.cmdSearch.Enabled = False

            Me.cmdInsRow.Enabled = False
            Me.cmdDelRow.Enabled = False

            Me.cmdGenSmp.Enabled = False
            Me.cmdGenTent.Enabled = False

            Me.cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            ''''''20130826   cmdReset.Enabled = True
            cmdRenew.Enabled = True
            cmdUpdate.Enabled = True

            Me.cmdExit.Enabled = True
        ElseIf m = "DisableAll" Then
            Me.cmdAdd.Enabled = False
            Me.cmdSave.Enabled = False
            Me.cmdDelete.Enabled = False
            Me.cmdCopy.Enabled = False
            Me.cmdFind.Enabled = False
            Me.cmdClear.Enabled = False

            Me.cmdSearch.Enabled = False

            Me.cmdInsRow.Enabled = False
            Me.cmdDelRow.Enabled = False

            Me.cmdGenSmp.Enabled = False
            Me.cmdGenTent.Enabled = False

            Me.cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            cmdReset.Enabled = False

            Me.cmdExit.Enabled = True
            cmdRenew.Enabled = False
            cmdUpdate.Enabled = False

            End If

    End Sub

    Private Sub reset_detail_control(ByVal action As String, ByVal itmtyp As String)
        Select Case action
            Case "Detail_Init", "Detail_Read"
                txtDept.Enabled = False

                gbItem.Enabled = True
                If action = "Detail_Read" Then
                    txtItmNoReal.Enabled = False
                    txtItmNoTmp.Enabled = False
                    txtItmNoVen.Enabled = False
                    cboItmNoVen.Enabled = False
                Else
                    If itmtyp = "RealItem" Then
                        txtItmNoReal.Enabled = True
                        txtItmNoTmp.Enabled = False
                        txtItmNoVen.Enabled = False
                        cboItmNoVen.Enabled = False

                        txtColCde.Visible = False
                        txtColCde.Enabled = False
                        cboColCde.Visible = True
                        cboColCde.Enabled = False

                        cboPcking.Visible = True
                        cboPcking.Enabled = False

                        cboUM.Visible = False
                        txtInrQty.Visible = False
                        txtMtrQty.Visible = False
                        txtCft.Visible = False
                        txtCBM.Visible = False
                        cboFtyPrcTrm.Visible = False
                        cboDtlPrcTrm.Visible = False
                        cboTranTrm.Visible = False

                        lblUM.Visible = False
                        lblInrQty.Visible = False
                        lblMtrQty.Visible = False
                        lblCft.Visible = False
                        lblCBM.Visible = False
                        lblFtyPrcTrm.Visible = False
                        lblDtlPrcTrm.Visible = False
                        lblTranTrm.Visible = False
                        lblPckingTerm.Visible = False
                    ElseIf itmtyp = "TempItem" Then
                        txtItmNoReal.Enabled = False
                        txtItmNoTmp.Enabled = True
                        txtItmNoVen.Enabled = False
                        cboItmNoVen.Enabled = False

                        txtColCde.Visible = False
                        txtColCde.Enabled = False
                        cboColCde.Visible = True
                        cboColCde.Enabled = False

                        cboPcking.Visible = True
                        cboPcking.Enabled = False

                        cboUM.Visible = False
                        txtInrQty.Visible = False
                        txtMtrQty.Visible = False
                        txtCft.Visible = False
                        txtCBM.Visible = False
                        cboFtyPrcTrm.Visible = False
                        cboDtlPrcTrm.Visible = False
                        cboTranTrm.Visible = False

                        lblUM.Visible = False
                        lblInrQty.Visible = False
                        lblMtrQty.Visible = False
                        lblCft.Visible = False
                        lblCBM.Visible = False
                        lblFtyPrcTrm.Visible = False
                        lblDtlPrcTrm.Visible = False
                        lblTranTrm.Visible = False
                        lblPckingTerm.Visible = False
                    ElseIf itmtyp = "ItemNotInIM" Then
                        txtItmNoReal.Enabled = False
                        txtItmNoTmp.Enabled = False
                        txtItmNoVen.Enabled = True
                        cboItmNoVen.Enabled = True

                        txtColCde.Visible = True
                        txtColCde.Enabled = False
                        cboColCde.Visible = False
                        cboColCde.Enabled = False

                        cboPcking.Visible = False
                        cboPcking.Enabled = False

                        cboUM.Visible = True
                        txtInrQty.Visible = True
                        txtMtrQty.Visible = True
                        txtCft.Visible = True
                        txtCBM.Visible = True
                        cboFtyPrcTrm.Visible = True
                        cboDtlPrcTrm.Visible = True
                        cboTranTrm.Visible = True

                        lblUM.Visible = True
                        lblInrQty.Visible = True
                        lblMtrQty.Visible = True
                        lblCft.Visible = True
                        lblCBM.Visible = True
                        lblFtyPrcTrm.Visible = True
                        lblDtlPrcTrm.Visible = True
                        lblTranTrm.Visible = True
                        lblPckingTerm.Visible = True
                    Else 'All
                        txtItmNoReal.Enabled = True
                        txtItmNoTmp.Enabled = True
                        txtItmNoVen.Enabled = True
                        cboItmNoVen.Enabled = True

                        txtColCde.Visible = False
                        txtColCde.Enabled = False
                        cboColCde.Visible = True
                        cboColCde.Enabled = False

                        cboPcking.Visible = True
                        cboPcking.Enabled = False

                        cboUM.Visible = False
                        txtInrQty.Visible = False
                        txtMtrQty.Visible = False
                        txtCft.Visible = False
                        txtCBM.Visible = False
                        cboFtyPrcTrm.Visible = False
                        cboDtlPrcTrm.Visible = False
                        cboTranTrm.Visible = False

                        lblUM.Visible = False
                        lblInrQty.Visible = False
                        lblMtrQty.Visible = False
                        lblCft.Visible = False
                        lblCBM.Visible = False
                        lblFtyPrcTrm.Visible = False
                        lblDtlPrcTrm.Visible = False
                        lblTranTrm.Visible = False
                        lblPckingTerm.Visible = False
                    End If
                End If

                cmdBrowse.Enabled = True
                cmdItmNoConv.Enabled = False
                cmdItmNoConvVen.Enabled = False

                txtItmDsc.Enabled = False

                cboCusals.Enabled = False
                txtCusItm.Enabled = False
                txtAlias.Enabled = False
                txtUPC.Enabled = False

                gbColor.Enabled = False

                txtColDsc.Enabled = False
                txtAlscolcde.Enabled = False
                txtCusCol.Enabled = False

                gbPacking.Enabled = False


                txtMoq.Enabled = False

                ' check for item type ASS
                'chkPC.Visible = False
                'chkPC.Enabled = False

                txtInrdin.Enabled = False
                txtInrhin.Enabled = False
                txtInrwin.Enabled = False
                txtMtrdin.Enabled = False
                txtMtrhin.Enabled = False
                txtMtrwin.Enabled = False

                txtInrdcm.Enabled = False
                txtInrhcm.Enabled = False
                txtInrwcm.Enabled = False
                txtMtrdcm.Enabled = False
                txtMtrhcm.Enabled = False
                txtMtrwcm.Enabled = False

                txtGrswgt.Enabled = False
                txtNetwgt.Enabled = False

                txtPckItr.Enabled = False

                txtIMRmk.Enabled = False
                txtNote.Enabled = False

                'Pricing
                'gbSecond.Enabled = True
                gbPrice.Enabled = True

                txtFCurCde.Enabled = False
                txtFtyPrc.Enabled = False

                txtMU.Enabled = False
                txtPckCstAmt.Enabled = False
                txtItmCommAmt.Enabled = False
                txtCus1Dp.Enabled = False

                'cmdPrcEmt.Enabled = False

                gbVendor.Enabled = True
                cboDV.Enabled = False
                cboVenNo.Enabled = False
                cboCusVen.Enabled = False
                cboTV.Enabled = False
                cboFA.Enabled = False

                txtCosMth.Enabled = False
                cboHrmCde.Enabled = False
                cboCusUsdCurr.Enabled = False
                txtCusUsd.Enabled = False
                cboCusCadCurr.Enabled = False
                txtCusCad.Enabled = False

                txtDtyRat.Enabled = False

                txtStkQty.Enabled = False
                txtCusQty.Enabled = False
                txtSmpQty.Enabled = False


                gbTO.Enabled = True
                cboTOFty.Enabled = False
                txtTOOrdQty.Enabled = False
                txtTOShipport.Enabled = False
                txtTORemark.Enabled = False
                txtDTLFtyShpDateStr.Enabled = False
                txtDTLFtyShpDateEnd.Enabled = False
                txtDTLCustShpDateStr.Enabled = False
                txtDTLCustShpDateEnd.Enabled = False



                btnTOMutShp.Enabled = False
            Case "Detail_Update", "Detail_Update_Info"
                txtDept.Enabled = True

                gbItem.Enabled = True
                txtItmNoReal.Enabled = False
                txtItmNoTmp.Enabled = False
                txtItmNoVen.Enabled = False
                cmdBrowse.Enabled = True
                'cmdItmNoConv.Enabled = False
                'cmdItmNoConvVen.Enabled = False

                txtItmDsc.Enabled = True

                cboCusals.Enabled = True
                txtCusItm.Enabled = True
                txtAlias.Enabled = False
                txtUPC.Enabled = False

                gbColor.Enabled = True

                txtColDsc.Enabled = True
                txtAlscolcde.Enabled = False
                txtCusCol.Enabled = True

                gbPacking.Enabled = True

                If itmtyp = "ItemNotInIM" Then
                    cboPcking.Visible = False
                    cboPcking.Enabled = False

                    cboUM.Visible = True
                    txtInrQty.Visible = True
                    txtMtrQty.Visible = True
                    txtCft.Visible = True
                    txtCBM.Visible = True
                    cboFtyPrcTrm.Visible = True
                    cboDtlPrcTrm.Visible = True
                    cboTranTrm.Visible = True

                    lblUM.Visible = True
                    lblInrQty.Visible = True
                    lblMtrQty.Visible = True
                    lblCft.Visible = True
                    lblCBM.Visible = True
                    lblFtyPrcTrm.Visible = True
                    lblDtlPrcTrm.Visible = True
                    lblTranTrm.Visible = True
                    lblPckingTerm.Visible = False

                    txtColCde.Visible = True
                    txtColCde.Enabled = False
                    cboColCde.Visible = False
                    cboColCde.Enabled = False
                Else
                    cboPcking.Visible = True
                    If cboPcking.Items.Count > 1 Then
                        cboPcking.Enabled = True
                    Else
                        'cboPcking.Enabled = False
                        cboPcking.Enabled = True
                    End If

                    cboUM.Visible = False
                    txtInrQty.Visible = False
                    txtMtrQty.Visible = False
                    txtCft.Visible = False
                    txtCBM.Visible = False
                    cboFtyPrcTrm.Visible = False
                    cboDtlPrcTrm.Visible = False
                    cboTranTrm.Visible = False

                    lblUM.Visible = False
                    lblInrQty.Visible = False
                    lblMtrQty.Visible = False
                    lblCft.Visible = False
                    lblCBM.Visible = False
                    lblFtyPrcTrm.Visible = False
                    lblDtlPrcTrm.Visible = False
                    lblTranTrm.Visible = False
                    lblPckingTerm.Visible = True

                    txtColCde.Visible = False
                    txtColCde.Enabled = False
                    cboColCde.Visible = True
                    If cboColCde.Items.Count > 1 Then
                        cboColCde.Enabled = True
                    Else
                        cboColCde.Enabled = False
                    End If
                End If
                txtMoq.Enabled = True

                If action = "Detail_Update_Info" Then
                    If itmtyp = "ItemNotInIM" Then
                        cboColCde.Enabled = False

                        cboPcking.Enabled = False
                        cboUM.Visible = True
                        txtInrQty.Visible = True
                        txtMtrQty.Visible = True
                        txtCft.Visible = True
                        txtCBM.Visible = True
                        cboFtyPrcTrm.Visible = True
                        cboDtlPrcTrm.Visible = True
                        cboTranTrm.Visible = True
                    Else
                        cboColCde.Enabled = False

                        'cboPcking.Enabled = False
                        cboUM.Visible = False
                        txtInrQty.Visible = False
                        txtMtrQty.Visible = False
                        txtCft.Visible = False
                        txtCBM.Visible = False
                        cboFtyPrcTrm.Visible = False
                        cboDtlPrcTrm.Visible = False
                        cboTranTrm.Visible = False
                    End If

                End If

                ' check for item type ASS
                'chkPC.Visible = False
                'chkPC.Enabled = False

                txtInrdin.Enabled = True
                txtInrhin.Enabled = True
                txtInrwin.Enabled = True
                txtMtrdin.Enabled = True
                txtMtrhin.Enabled = True
                txtMtrwin.Enabled = True

                txtInrdcm.Enabled = True
                txtInrhcm.Enabled = True
                txtInrwcm.Enabled = True
                txtMtrdcm.Enabled = True
                txtMtrhcm.Enabled = True
                txtMtrwcm.Enabled = True

                txtGrswgt.Enabled = True
                txtNetwgt.Enabled = True

                txtPckItr.Enabled = True

                txtIMRmk.Enabled = True
                txtNote.Enabled = True

                'Pricing
                'gbSecond.Enabled = True
                gbPrice.Enabled = True
                Select Case itmtyp
                    Case "ItemNotInIM"
                        '''   20130906   txtFCurCde.Enabled = True
                        txtFtyPrc.Enabled = True
                    Case Else
                        txtFCurCde.Enabled = False
                        txtFtyPrc.Enabled = False
                End Select


                txtMU.Enabled = True
                txtPckCstAmt.Enabled = True
                txtItmCommAmt.Enabled = True
                txtCus1Dp.Enabled = True

                cmdPrcEmt.Enabled = True

                gbVendor.Enabled = True
                cboDV.Enabled = False
                cboVenNo.Enabled = False
                cboCusVen.Enabled = True
                cboTV.Enabled = True
                cboFA.Enabled = True

                txtCosMth.Enabled = True
                cboHrmCde.Enabled = True
                cboCusUsdCurr.Enabled = True
                txtCusUsd.Enabled = True
                cboCusCadCurr.Enabled = True
                txtCusCad.Enabled = True

                txtStkQty.Enabled = True
                txtCusQty.Enabled = True
                txtSmpQty.Enabled = True

                txtDtyRat.Enabled = False

                gbTO.Enabled = True
                cboTOFty.Enabled = True
                txtTOOrdQty.Enabled = True
                txtTOShipport.Enabled = True
                txtTORemark.Enabled = True



                txtHDRFtyShpDateStr.Enabled = True
                txtHDRFtyShpDateEnd.Enabled = True
                txtHDRCustShpDateStr.Enabled = True
                txtHDRCustShpDateEnd.Enabled = True


                txtDTLFtyShpDateStr.Enabled = True
                txtDTLFtyShpDateEnd.Enabled = True
                txtDTLCustShpDateStr.Enabled = True
                txtDTLCustShpDateEnd.Enabled = True


                btnTOMutShp.Enabled = True

        End Select

        PanelCptBkd.Visible = False
        PanelItmNoConv.Visible = False
        PanelItmNoSelect.Visible = False
        PanelMutShp.Visible = False
        gbPanelCstEmt.Visible = False
    End Sub

    Private Sub reset_detail_data(ByVal action As String, ByVal itmtyp As String)

        Select Case action
            Case "Detail_Init"
                txtItmDsc.Text = ""
                cboCusals.Items.Clear()
                cboCusals.Text = ""
                txtCusItm.Text = ""
                txtAlias.Text = ""
                txtUPC.Text = ""

                txtColCde.Text = ""
                txtColDsc.Text = ""
                txtAlscolcde.Text = ""
                txtCusCol.Text = ""

                cboPcking.Items.Clear()
                cboPcking.Text = ""

                cboUM.Text = ""
                txtInrQty.Text = ""
                txtMtrQty.Text = ""
                txtCft.Text = ""
                txtCBM.Text = ""
                cboFtyPrcTrm.Text = ""
                cboDtlPrcTrm.Text = ""
                cboTranTrm.Text = ""

                cboPcking.Items.Clear()
                cboPcking.Text = ""

                txtMoq.Text = ""

                chkPC.Checked = False

                txtInrdin.Text = "0"
                txtInrhin.Text = "0"
                txtInrwin.Text = "0"
                txtMtrdin.Text = "0"
                txtMtrhin.Text = "0"
                txtMtrwin.Text = "0"

                txtInrdcm.Text = "0"
                txtInrhcm.Text = "0"
                txtInrwcm.Text = "0"
                txtMtrdcm.Text = "0"
                txtMtrhcm.Text = "0"
                txtMtrwcm.Text = "0"

                txtGrswgt.Text = "0"
                txtNetwgt.Text = "0"

                txtPckItr.Text = ""

                txtIMRmk.Text = ""
                txtNote.Text = ""

                txtFCurCde.Text = ""
                txtFtyPrc.Text = ""

                txtMU.Text = ""
                txtPckCstAmt.Text = ""
                txtItmCommAmt.Text = ""
                txtCus1Dp.Text = ""
                txtBasPrc.Text = ""

                txtPrcKey.Text = ""
                txtEffDat.Text = ""
                txtExpDat.Text = ""
                txtPeriod.Text = ""

                cboDV.Text = ""
                cboVenNo.Text = ""
                cboCusVen.Text = ""
                cboTV.Text = ""
                cboFA.Text = ""

                txtCosMth.Text = ""
                cboHrmCde.Text = ""
                cboCusUsdCurr.Text = "USD"
                txtCusUsd.Text = ""
                cboCusCadCurr.Text = "CAD"
                txtCusCad.Text = ""

                txtStkQty.Text = ""
                txtCusQty.Text = ""
                txtSmpQty.Text = ""

                txtDtyRat.Text = ""

                cboTOFty.Text = ""
                txtTOOrdQty.Text = ""
                txtTOShipport.Text = ""
                txtTORemark.Text = ""

                txtDTLFtyShpDateStr.Text = ""
                txtDTLFtyShpDateEnd.Text = ""
                txtDTLCustShpDateStr.Text = ""
                txtDTLCustShpDateEnd.Text = ""
                txtCus1Sp.Text = ""

                '''20140122   ini most, except packing
            Case "Detail_Repacking"
                txtItmDsc.Text = ""
                txtCusItm.Text = ""
                txtAlias.Text = ""

                txtAlscolcde.Text = ""
                txtCusCol.Text = ""


                cboUM.Text = ""
                txtInrQty.Text = ""
                txtMtrQty.Text = ""
                txtCft.Text = ""
                txtCBM.Text = ""
                cboFtyPrcTrm.Text = ""
                cboDtlPrcTrm.Text = ""
                cboTranTrm.Text = ""

                txtMoq.Text = ""
                chkPC.Checked = False

                txtInrdin.Text = "0"
                txtInrhin.Text = "0"
                txtInrwin.Text = "0"
                txtMtrdin.Text = "0"
                txtMtrhin.Text = "0"
                txtMtrwin.Text = "0"

                txtInrdcm.Text = "0"
                txtInrhcm.Text = "0"
                txtInrwcm.Text = "0"
                txtMtrdcm.Text = "0"
                txtMtrhcm.Text = "0"
                txtMtrwcm.Text = "0"

                txtGrswgt.Text = "0"
                txtNetwgt.Text = "0"

                txtPckItr.Text = ""

                txtIMRmk.Text = ""
                txtNote.Text = ""

                txtFCurCde.Text = ""
                txtFtyPrc.Text = ""

                txtMU.Text = ""
                txtPckCstAmt.Text = ""
                txtItmCommAmt.Text = ""
                txtCus1Dp.Text = ""
                txtBasPrc.Text = ""

                txtPrcKey.Text = ""
                txtEffDat.Text = ""
                txtExpDat.Text = ""
                txtPeriod.Text = ""

                cboDV.Text = ""
                cboVenNo.Text = ""
                cboCusVen.Text = ""
                cboTV.Text = ""
                cboFA.Text = ""

                txtCosMth.Text = ""
                cboHrmCde.Text = ""
                cboCusUsdCurr.Text = "USD"
                txtCusUsd.Text = ""
                cboCusCadCurr.Text = "CAD"
                txtCusCad.Text = ""

                txtStkQty.Text = ""
                txtCusQty.Text = ""
                txtSmpQty.Text = ""

                txtDtyRat.Text = ""

                cboTOFty.Text = ""
                txtTOOrdQty.Text = ""
                txtTOShipport.Text = ""
                txtTORemark.Text = ""

                txtDTLFtyShpDateStr.Text = ""
                txtDTLFtyShpDateEnd.Text = ""
                txtDTLCustShpDateStr.Text = ""
                txtDTLCustShpDateEnd.Text = ""

                txtCus1Sp.Text = ""

        End Select
    End Sub

    Private Function check_insert_QUOTNDTL() As Boolean
        check_insert_QUOTNDTL = False

        If no_formula_to_insert = True Then
            MsgBox("Please Input a Item with a formula before insert row!")
            Exit Function
        End If


        If btcQUM00001.SelectedIndex = 1 Then 'Or btcQUM00001.SelectedIndex = 2 Then

            If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Quotation in initial mode, please check")
                check_insert_QUOTNDTL = False
                Exit Function
            Else
                Dim qutitmno_real As String
                Dim qutitmno_tmp As String
                Dim qutitmno_ven As String
                Dim qutitmno_venno As String
                qutitmno_real = txtItmNoReal.Text
                qutitmno_tmp = txtItmNoTmp.Text
                qutitmno_ven = txtItmNoVen.Text
                qutitmno_venno = cboItmNoVen.text

                If qutitmno_real = "" And qutitmno_tmp = "" And qutitmno_ven = "" Then
                    MsgBox("Please enter for Item Number!")
                    check_insert_QUOTNDTL = False
                    Call insert_QUOTNDTL(False)
                    Call display_Detail(txtSeq.Text)

                    Call reset_detail_control("Detail_Init", "All")
                    Call reset_detail_data("Detail_Init", "All")

                    btcQUM00001.SelectedIndex = 1
                    Exit Function
                Else
                    If qutitmno_ven <> "" Then
                        check_insert_QUOTNDTL = True
                    Else
                        If cboColCde.Text = "" And txtColCde.Text = "" Then
                            MsgBox("Color Code missing!")
                            check_insert_QUOTNDTL = False
                        ElseIf cboPcking.Text = "" And cboUM.Text = "" Then
                            MsgBox("Packing missing!")
                            check_insert_QUOTNDTL = False
                        ElseIf check_dup_Packing() = True Then
                            MsgBox("Duplicate packing selected!")
                            check_insert_QUOTNDTL = False
                        Else
                            check_insert_QUOTNDTL = True
                        End If

                        If check_insert_QUOTNDTL = False Then
                            Call insert_QUOTNDTL(False)
                            Call display_Detail(txtSeq.Text)

                            Call reset_detail_control("Detail_Init", "All")
                            Call reset_detail_data("Detail_Init", "All")

                            txtItmNoReal.Text = qutitmno_real
                            txtItmNoTmp.Text = qutitmno_tmp
                            txtItmNoVen.Text = qutitmno_ven
                            cboItmNoVen.text = qutitmno_venno

                            btcQUM00001.SelectedIndex = 1
                            Exit Function
                        End If
                    End If
                End If
            End If
        Else
            MsgBox("Please insert row in Details Page!")
            check_insert_QUOTNDTL = False
        End If
    End Function

    Private Function check_leave_QuotationDetail() As Boolean
        check_leave_QuotationDetail = False

        If check_dup_Packing() = True Then
            MsgBox("Duplicate packing selected!")

            Call insert_QUOTNDTL(False)
            Call display_Detail(txtSeq.Text)

            Call reset_detail_control("Detail_Init", "All")
            Call reset_detail_data("Detail_Init", "All")

            check_leave_QuotationDetail = False
            Exit Function
        ElseIf cboColCde.Text = "" And txtColCde.Text = "" Then
            MsgBox("Missing Color!")
            check_leave_QuotationDetail = False
            Exit Function
        ElseIf cboPcking.Text = "" Then
            MsgBox("Missing Packing!")
            check_leave_QuotationDetail = False
            Exit Function
        End If

        check_leave_QuotationDetail = True
    End Function

    Private Function insert_QUOTNDTL(ByVal addnew As Boolean) As Integer
        Dim qutseq As Integer
        Dim loc As Integer

        qutseq = 0

        If addnew = True Then
            Dim i As Integer


            For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") > qutseq Then
                    qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")
                End If
            Next i
            qutseq = qutseq + 1

            insert_QUOTNDTL = qutseq

            rs_QUOTNDTL.Tables("RESULT").Rows.Add()

            loc = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
        Else
            ''should be the cur one, instead of last item
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")
            loc = sReadingIndexQ
            ''qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1).Item("qud_qutseq")
        End If


        ''loc = sReadingIndexQ
        ''loc = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1


        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("Del") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("mode") = "NEW"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("upditmdtl") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("updmoqmoa") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("updassbom") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("converttopc") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cocde") = cboCoCde.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutno") = txtQutNo.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutseq") = qutseq
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmsts") = "CMP"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutitmsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmtyp") = "REG"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnotyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnoreal") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnotmp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnoven") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnovenno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmdsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusstyno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_alsitmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_upc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_colcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_coldsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_alscolcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscol") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pckseq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_packterm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_untcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr") = 1
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_effdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_expdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cft") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cbm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("inner_in") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("master_in") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("inner_cm") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("master_cm") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrdin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrwin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrhin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrdin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrwin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrhin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrdcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrwcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrhcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrdcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrwcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrhcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_grswgt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_netwgt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pckitr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_dept") = Me.txtDeptH.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_hstref") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moqunttyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moa") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_prcsec") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_grsmgn") = 0
        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde") = rs_CUBASINF_P.Tables("RESULT").Rows(0).Item("cpi_curcde")
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde") = rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("qud_curcde")
        End If
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_discnt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_contopc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pcprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_fcurcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftycst") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_basprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cocde") = cboCoCde.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutno") = txtQutNo.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutseq") = qutseq
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_itmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_untcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_inrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mtrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cft") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cbm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus1no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus2no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cat") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_venno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycst") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muminprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_spmuper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dpmuper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cumu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cush") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upsper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_labper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_faper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cstbufper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pliper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dmdper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_rbtper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_stdprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstA") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstB") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstC") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstD") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstTran") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstPack") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_lightspec") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_creusr") = "~*ADD*~"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_updusr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_credat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upddat") = "01/01/1900"
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_timstp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_stkqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpunt") = "PC"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_rndsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_buyer") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_toqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_TOShipport") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tormk") = ""

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpstr") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpend") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpstr") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpend") = "01/01/1900"


        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpstr") = txtHDRFtyShpDateStr.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpend") = txtHDRFtyShpDateEnd.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpstr") = txtHDRCustShpDateStr.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpend") = txtHDRCustShpDateEnd.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_venno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("vbi_vensts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_venitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusven") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_DV") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_TV") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyaud") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cususdcur") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cususd") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscadcur") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscad") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_note") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_image") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_imgpth") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_hrmcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_dtyrat") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cosmth") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("ysi_dsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_apprve") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("ibi_catlvl3") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("vbi_ventyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("CIHCURR") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("CIHAMT") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_onetim") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pdabpdiff") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftytmpitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftytmpitmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qce_amt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_subcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tbm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tbmsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moflag") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_orgmoq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_orgmoa") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cussub") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_specpck") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcat") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcatfml") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcatamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pmu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_imrmk") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_calpmu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_creusr") = "~*ADD*~"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_updusr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_credat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_upddat") = "01/01/1900"
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_timstp") = ""
    End Function
    Private Function cmdreset_QUOTNDTL() As Integer



        Dim loc As Integer
        loc = sReadingIndexQ


        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("Del") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("mode") = "UPD"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("upditmdtl") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("updmoqmoa") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("updassbom") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("converttopc") = "N"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cocde") = cboCoCde.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutno") = txtQutNo.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutseq") = qutseq
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutitmsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmtyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnotyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnoreal") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnotmp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnoven") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmnovenno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmdsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusstyno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_alsitmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_upc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_colcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_coldsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_alscolcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscol") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pckseq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_packterm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_untcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr") = 1
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_effdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_expdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cft") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cbm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("inner_in") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("master_in") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("inner_cm") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("master_cm") = "0x0x0"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrdin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrwin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrhin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrdin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrwin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrhin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrdcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrwcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrhcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrdcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrwcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrhcm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutdat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_grswgt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_netwgt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pckitr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_dept") = Me.txtDeptH.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_hstref") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moqunttyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moa") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_prcsec") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_grsmgn") = 0
        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde") = rs_CUBASINF_P.Tables("RESULT").Rows(0).Item("cpi_curcde")
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde") = rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("qud_curcde")
        End If
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus2dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_discnt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_contopc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pcprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_fcurcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftycst") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_basprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cocde") = cboCoCde.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutno") = txtQutNo.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutseq") = qutseq
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_itmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_untcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_inrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mtrqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cft") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cbm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus1no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus2no") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cat") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_venno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_prctrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_trantrm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycst") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muminprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1sp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1dp") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_spmuper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dpmuper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cumu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pm") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cush") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upsper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_labper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_faper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cstbufper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pliper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dmdper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_rbtper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_stdprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstA") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstB") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstC") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstD") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstTran") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycstPack") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_lightspec") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_creusr") = "~*UPD*~"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_updusr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_credat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upddat") = "01/01/1900"
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_timstp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_stkqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpunt") = "PC"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpprc") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_rndsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_buyer") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_toqty") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_TOShipport") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tormk") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpstr") = txtHDRFtyShpDateStr.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyshpend") = txtHDRFtyShpDateEnd.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpstr") = txtHDRCustShpDateStr.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cushpend") = txtHDRCustShpDateEnd.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_venno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("vbi_vensts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_venitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cusven") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_DV") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_TV") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyaud") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cususdcur") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cususd") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscadcur") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cuscad") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_note") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_image") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_imgpth") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_hrmcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_dtyrat") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cosmth") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("ysi_dsc") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_apprve") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("ibi_catlvl3") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("vbi_ventyp") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("CIHCURR") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("CIHAMT") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_onetim") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pdabpdiff") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftytmpitm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftytmpitmno") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qce_amt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_subcde") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tbm") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_tbmsts") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_moflag") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_orgmoq") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_orgmoa") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cussub") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_specpck") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcat") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcatfml") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_custitmcatamt") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pmu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_imrmk") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_calpmu") = 0
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_creusr") = "~*UPD*~"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_updusr") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_credat") = "01/01/1900"
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_upddat") = "01/01/1900"
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_timstp") = ""
    End Function

    Private Sub display_Header()
        Dim rs_Result As New DataSet

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header sp_select_QUOTNDTL 1 :" & rtnStr)
            Exit Sub
        End If

        If UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "A" Or _
            UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "W" Then
            If rs_Result.Tables("RESULT").Rows.Count > 0 Then
                For index As Integer = 0 To rs_Result.Tables("RESULT").Rows.Count - 1
                    If UCase(Microsoft.VisualBasic.Left(rs_Result.Tables("RESULT").Rows(index)("qud_itmsts").ToString, 3)) = "OLD" And _
                        rs_Result.Tables("RESULT").Rows(index)("qud_ftytmpitm").ToString <> "Y" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "H - Hold"
                        Exit For
                    End If
                Next
            End If
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUASSINF '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header sp_select_QUASSINF :" & rtnStr)
            Exit Sub
        End If

        If UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "A" Or _
            UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "W" Then
            If rs_Result.Tables("RESULT").Rows.Count > 0 Then
                For index As Integer = 0 To rs_Result.Tables("RESULT").Rows.Count - 1
                    If UCase(Microsoft.VisualBasic.Left(rs_Result.Tables("RESULT").Rows(index)("ibi_itmsts").ToString, 3)) = "OLD" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "H - Hold"
                        Exit For
                    End If
                Next
            End If
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header sp_select_QUOTNDTL 2 :" & rtnStr)
            Exit Sub
        End If

        '**********Check whether has different basic price in IM and PDA******
        If UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "A" Or _
            UCase(Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1)) = "W" Then
            If rs_Result.Tables("RESULT").Rows.Count > 0 Then
                For index As Integer = 0 To rs_Result.Tables("RESULT").Rows.Count - 1
                    If rs_Result.Tables("RESULT").Rows(index)("qud_pdabpdiff").ToString() = "Y" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "H - Hold"
                        Exit For
                    End If
                Next
            End If
        End If

        txtQutSts.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString()
        If txtQutSts.Text = "" Then

            'flag_no_update_mu(sReadingIndexQ) = False

            cbopcking_got_focus = False
            cboColCde_got_focus = False
            Is_Updating_item = False


            Call set_qutsts()


        End If
        'check from dtl

        If Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "A" Then
            chkCancel.Checked = False
            chkCancel.Enabled = Del_right_local 'True
            chkApprove.Checked = False
            chkApprove.Enabled = False
            chkPC_hdr.Enabled = True
        ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "E" Then
            chkCancel.Checked = False
            chkCancel.Enabled = False
            chkApprove.Checked = False
            chkApprove.Enabled = False
            chkPC_hdr.Enabled = False
        ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "C" Then
            chkCancel.Checked = True
            chkCancel.Enabled = False
            chkApprove.Checked = False
            chkApprove.Enabled = False
            chkPC_hdr.Enabled = False
        ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "W" And gsUsrRank <= 3 Then
            chkCancel.Checked = False
            chkCancel.Enabled = False
            chkApprove.Checked = False
            chkApprove.Enabled = True
            chkPC_hdr.Enabled = True
        ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "H" Then
            chkCancel.Checked = True
            chkCancel.Enabled = False
            chkApprove.Checked = False
            chkApprove.Enabled = False
            chkPC_hdr.Enabled = False
        End If

        txtIssDat.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_issdat").ToShortDateString()
        txtRvsDat.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_rvsdat").ToShortDateString()

        cboCus1No.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no")

        txtCus1Ad.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1ad")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1ad"))
        txtCus1St.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1st")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1st"))
        txtCus1Cy.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cy")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cy"))
        txtCus1Zp.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1zp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1zp"))

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','Contact Person'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CP, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header sp_select_CUBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_CUBASINF_CP.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
            cboCus1Cp.Enabled = False
        Else
            cboCus1Cp.Enabled = True
            cboCus1Cp.Items.Clear()
            cboCus1Cp.Text = ""
            For index As Integer = 0 To rs_CUBASINF_CP.Tables("RESULT").Rows.Count - 1
                cboCus1Cp.Items.Add(rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString.Replace(vbCr, "").Replace(vbLf, ""))
            Next

            Dim sTmp As String
            Dim bExist As Boolean = False

            sTmp = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cp").ToString.Trim)
            If sTmp <> "" And cboCus1Cp.Items.Count > 0 Then
                For index As Integer = 0 To cboCus1Cp.Items.Count - 1
                    If cboCus1Cp.Items(index).ToString.Trim = sTmp Then
                        bExist = True
                        Exit For
                    End If
                Next
            End If
            If bExist = False Then
                MsgBox("Contact Person for Primary Customer not found in Customer Master", MsgBoxStyle.Exclamation)
                If sTmp <> "" Then
                    cboCus1Cp.Items.Add(sTmp)
                End If
            End If
        End If
        cboCus1Cp.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1cp"))

        '*** Phase 2
        display_combo(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cugrptyp_int").ToString.Trim, cboCus1CgInt)
        display_combo(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cugrptyp_ext").ToString.Trim, cboCus1CgExt)

        If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no")) Then
            cboCus2No.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no"))
            txtCus2Ad.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2ad")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2ad"))
            txtCus2St.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2st")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2st"))
            txtCus2Cy.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cy")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cy"))
            txtCus2Zp.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2zp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2zp"))
        Else
            cboCus2No.Text = ""
            txtCus2Ad.Text = ""
            txtCus2St.Text = ""
            txtCus2Cy.Text = ""
            txtCus2Zp.Text = ""

        End If

        flgLoadApplyAllPC = True
        If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_conalltopc").ToString = "Y" Then
            chkPC_hdr.Checked = True
        Else
            chkPC_hdr.Checked = False
        End If
        flgLoadApplyAllPC = False

        If rs_QUOTNHDR.Tables("RESULT").Rows(0)("cpi_prcsec").ToString() = "GM" Then
            optGM.Checked = True
            optMU.Checked = False
        Else
            optGM.Checked = False
            optMU.Checked = True
        End If

        txtGrsMgn.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("cpi_grsmgn")) = True, 0, rs_QUOTNHDR.Tables("RESULT").Rows(0)("cpi_grsmgn"))

        Call SetHdrYear()
        Call SetHdrSeason()

        strApprMax = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_quplus").ToString()
        strApprMin = "-" + rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_quminus").ToString()

        strCurExRat = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_curexrat").ToString()
        strCurExEffDat = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_curexeffdat"), "yyyy-MM-dd")

        txtDeptH.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_dept")) = True, 0, rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_dept").ToString.Trim)
        display_combo(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_Year").ToString(), cboYear)
        display_combo(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_Season").ToString(), cboSeason)
        txtDesc.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_desc").ToString()

        'rounding
        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_rounding '" & cboCoCde.Text & "','" & cboCus1No.Text.Split(" - ")(0) & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_rounding, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header rs_CUBASINF_rounding:" & rtnStr)
            'Exit Sub
        End If
        ''
        cus1_rounding = 4
        If rs_CUBASINF_rounding.Tables("RESULT").Rows.Count > 0 Then
            cus1_rounding = rs_CUBASINF_rounding.Tables("RESULT").Rows(0)("cbi_rounding")

        End If



        If cboCus2No.Text <> "" Then
            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & cboCus2No.Text.Split(" - ")(0) & "','Contact Person'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CP, rtnStr)

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading Display_Header sp_select_CUBASINF_Q :" & rtnStr)
                Exit Sub
            End If

            If rs_CUBASINF_CP.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboCus2Cp.Enabled = False
            Else
                cboCus2Cp.Enabled = True
                cboCus2Cp.Items.Clear()
                cboCus2Cp.Text = ""
                For index As Integer = 0 To rs_CUBASINF_CP.Tables("RESULT").Rows.Count - 1
                    cboCus2Cp.Items.Add(rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString())
                Next

                Dim sTmp As String
                Dim bExist As Boolean = False

                sTmp = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cp"))
                If sTmp <> "" And cboCus2Cp.Items.Count > 0 Then
                    For index As Integer = 0 To cboCus2Cp.Items.Count - 1
                        If cboCus2Cp.Items(index).ToString.Trim = sTmp.Trim Then
                            bExist = True
                            Exit For
                        End If
                    Next
                End If
                If bExist = False Then
                    MsgBox("Contact Person for Secondary Customer not found in Customer Master", MsgBoxStyle.Exclamation)
                    If sTmp <> "" Then
                        cboCus2Cp.Items.Add(sTmp)
                    End If
                End If
            End If
            cboCus2Cp.Text = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cp")) = True, "", rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2cp"))

            If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_relatn") = "A" Then
                optActive.Checked = True
                optPassive.Checked = False
            ElseIf rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_relatn") = "P" Then
                optActive.Checked = False
                optPassive.Checked = True
            End If
        End If
        cboCusAgt.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cusagt").ToString()

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_list_SYSALREL '" & cboCoCde.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYSALREL, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cboCus1NoClick sp_list_SYSALREL :" & rtnStr)
            Exit Sub
        End If

        If rs_SYSALREL.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
            cboSalDiv.Enabled = False
            cboSalDiv.Items.Clear()
            cboSalDiv.Text = ""

            cboSalRep.Enabled = False
            cboSalRep.Items.Clear()
            cboSalRep.Text = ""
        Else
            sFilter = "ssr_saltem = " & "'" & rs_QUOTNHDR.Tables("RESULT").Rows(0)("cbi_saltem").ToString.Trim & "'"
            rs_SYSALREL.Tables("RESULT").DefaultView.RowFilter = sFilter
            rs_SYSALREL.Tables("RESULT").DefaultView.Sort = "ssr_saldiv, ssr_saltem"
            sFilter = ""

            If rs_SYSALREL.Tables("RESULT").DefaultView.Count = 0 Then
                cboSalDiv.Enabled = False
                cboSalDiv.Items.Clear()
                cboSalDiv.Text = ""

                cboSalRep.Enabled = False
                cboSalRep.Items.Clear()
                cboSalRep.Text = ""
            Else
                cboSalDiv.Enabled = True
                cboSalDiv.Items.Clear()
                cboSalDiv.Text = ""

                Dim sTmpDiv, sTmpTeam As String

                sTmpDiv = rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_saldiv").ToString.Trim
                sTmpTeam = rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_saltem").ToString.Trim

                cboSalDiv.Items.Add("")
                cboSalDiv.Items.Add("Division " & sTmpDiv & " (Team " & sTmpTeam & ")")

                If rs_SYSALREL.Tables("RESULT").DefaultView.Count > 1 Then
                    For index As Integer = 1 To rs_SYSALREL.Tables("RESULT").DefaultView.Count - 1
                        If sTmpDiv <> rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saldiv").ToString.Trim Or _
                            sTmpTeam <> rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saltem").ToString.Trim Then

                            sTmpDiv = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saldiv").ToString.Trim
                            sTmpTeam = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saltem").ToString.Trim

                            cboSalDiv.Items.Add("Division " & sTmpDiv & " (Team " & sTmpTeam & ")")
                        End If
                    Next

                    display_combo("Division " & sTmpDiv & " (Team " & sTmpTeam & ")", cboSalDiv)
                End If

                Dim sTmp As String = ""
                Dim bExist As Boolean = False

                sTmp = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_saldivtem").ToString.Trim
                If sTmp <> "" And cboSalDiv.Items.Count > 0 Then
                    For index As Integer = 0 To cboSalDiv.Items.Count - 1
                        If cboSalDiv.Items(index).ToString.Trim = sTmp Then
                            bExist = True
                            Exit For
                        End If
                    Next
                End If
                If bExist = False Then
                    MsgBox("Sales Division and Team is not responsible for this Primary Customer in Customer Master", MsgBoxStyle.Exclamation)
                    If sTmp <> "" Then
                        cboSalDiv.Items.Add(sTmp)
                    End If
                End If


                '        'Modify 2013
                cboSalDiv.Enabled = False

                cboSalRep.Enabled = True
                cboSalRep.Items.Clear()
                cboSalRep.Text = ""

                cboSalRep.Items.Add("")
                For index As Integer = 0 To rs_SYSALREL.Tables("RESULT").DefaultView.Count - 1
                    cboSalRep.Items.Add(rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_usrnam").ToString.Trim & " (" & _
                    rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_salrep").ToString.Trim & ")")
                Next

                If rs_SYSALREL.Tables("RESULT").DefaultView.Count > 0 Then
                    display_combo(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_srname").ToString.Trim, cboSalRep)
                End If

                sTmp = ""
                bExist = False

                sTmp = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_srname").ToString.Trim
                If sTmp <> "" And cboSalRep.Items.Count > 0 Then
                    For index As Integer = 0 To cboSalRep.Items.Count - 1
                        If cboSalRep.Items(index).ToString.Trim = sTmp Then
                            bExist = True
                            Exit For
                        End If
                    Next
                End If
                If bExist = False Then
                    MsgBox("Sales Rep is not responsible for this Primary Customer in Customer Master", MsgBoxStyle.Exclamation)
                    If sTmp <> "" Then
                        cboSalRep.Items.Add(sTmp)
                    End If
                End If
            End If
        End If

        cboSmpPrd.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_smpprd")
        cboSmpFgt.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_smpfgt")
        txtPayTrm.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_paytrm")
        txtPrcTrm.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_prctrm")
        txtCurCde.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_curcde")

        txtValDat.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_valdat")
        txtRmk.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_rmk")

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        If CDbl(strCurExRat) > 0 Then
            gspStr = "sp_select_CUBASINF_Curex '" & cboCoCde.Text & "','" & txtCurCde.Text.Split("-")(0) & "','" & CDbl(strCurExRat) & "','" & Convert.ToDateTime(strCurExEffDat) & "','N'"
        Else


            gspStr = "sp_select_CUBASINF_Curex '" & cboCoCde.Text & "','','0','','N'"
        End If
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CR, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header sp_select_CUBASINF_Curex :" & rtnStr)
            Exit Sub
        End If

        If rs_CUBASINF_CR.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
            MsgBox("No Currency in System.")
        End If

        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr"), "01/01/1900") =0 Then
            txtHDRFtyShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        Else
			'20140408
            txtHDRFtyShpDateStr.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr")
			txtHDRFtyShpDateStr.Text = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_ftyshpstr"), "MM/dd/yyyy")
        End If
        ''' 20140122special handle
        If txtHDRFtyShpDateStr.Text.Trim = "11/19/00" Then
            txtHDRFtyShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        End If
        If txtHDRFtyShpDateStr.Text.Trim = "11/19/2000" Then
            txtHDRFtyShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        End If


        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend"), "01/01/1900") =0 Then
            txtHDRFtyShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        Else
            '20140408
            'txtHDRFtyShpDateEnd.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend")
            txtHDRFtyShpDateEnd.Text = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_ftyshpend"), "MM/dd/yyyy")
        End If
        ''' 20140122special handle
        If txtHDRFtyShpDateEnd.Text.Trim = "11/19/00" Then
            txtHDRFtyShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        End If
        If txtHDRFtyShpDateEnd.Text.Trim = "11/19/2000" Then
            txtHDRFtyShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        End If


        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr"), "01/01/1900") =0 Then
            txtHDRCustShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        Else
			'20140408
            'txtHDRCustShpDateStr.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr")
			txtHDRCustShpDateStr.Text = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cushpstr"), "MM/dd/yyyy")
        End If
        ''' 20140122special handle
        If txtHDRCustShpDateStr.Text.Trim = "11/19/00" Then
            txtHDRCustShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        End If
        If txtHDRCustShpDateStr.Text.Trim = "11/19/2000" Then
            txtHDRCustShpDateStr.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        End If


        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend"), "01/01/1900") =0 Then
            txtHDRCustShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        Else
			'20140408
            'txtHDRCustShpDateEnd.Text = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend")
			txtHDRCustShpDateEnd.Text = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cushpend"), "MM/dd/yyyy")
        End If
        ''' 20140122special handle
        If txtHDRCustShpDateEnd.Text.Trim = "11/19/00" Then
            txtHDRCustShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        End If
        If txtHDRCustShpDateEnd.Text.Trim = "11/19/2000" Then
            txtHDRCustShpDateEnd.Text = ""
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        End If




        StatusBar.Panels(1).Text = Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_credat"), "MM/dd/yyyy") & _
                                    " " & Format(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_upddat"), "MM/dd/yyyy") & _
                                    " " & rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_updusr").ToString()
    End Sub


    Public Sub display_Detail(ByVal qutseq As Integer)

        sReadingIndexQ = 0

        Dim i As Integer

        '''bug20130729
        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            ''bug
            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")) Then

                If qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") Then
                    sReadingIndexQ = i
                End If
            End If

        Next i

        Dim flgPDABPDIFF As Boolean
        Dim flgOLDNewItem As Boolean

        bolLatestQut = True
        flgRenewing = True
        flgPDABPDIFF = False
        flgOLDNewItem = False


        Dim ext_temp_itm As Boolean
        ext_temp_itm = False


        no_Display_Detail = False

        If no_Display_Detail = False Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                If sReadingIndexQ >= 0 And sReadingIndexQ <= rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).RowState <> "8" Then
                    If True Then
                        ''bug
                        If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")) Then
                            'MsgBox("No record!")
                            Exit Sub
                        End If


                        txtSeq.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq")


                        ''20130807
                        '' If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal").ToString.Trim <> "" Then
                        txtItmNoReal.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal").ToString.Trim
                        ''End If

                        ''txtItmNoReal.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim
                        ''20130807
                        ''If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp").ToString.Trim <> "" Then
                        txtItmNoTmp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp").ToString.Trim
                        ''End If
                        ''20130807
                        ''        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven").ToString.Trim <> "" Then

                        txtItmNoVen.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven").ToString.Trim
                        '' End If
                        ''20130807

                        '''20130816,  txtItmNo.Text may change accrding to the txtItmNoReal,txtItmNoTmp,txtItmNoVen,txtItmNoVen??
                        txtItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")


                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven").ToString.Trim <> "" Then
                            ext_temp_itm = True
                        End If


                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno")) Then
                            If InStr(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ") > 1 Then
                                If Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ")(0)) > 1000 And _
                                 Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ")(0)) < 9999 _
                                Then
                                    display_combo_ven(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                                Else
                                    display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                                End If
                            Else
                                display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                            End If
                        End If

                        '                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)

                        'If Replace(cboItmNoVen.Text, "-", "") = cboItmNoVen.Text Then
                        '    MsgBox("Please select vendor from the drop down list!")
                        '    cboItmNoVen.Enabled = True
                        '    cboItmNoVen.Focus()
                        'Else
                        '    cboItmNoVen.Text = Reverse_hyphen_one_two(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString)
                        'End If

                        ' ''If cboItmNoVen.text.Trim = "" Then
                        ' ''    cboItmNoVen.Text = Reverse_hyphen_one_two(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString)
                        ' ''End If

                        '20130816
                        ''20130902
                        ''Call calculate_gbPandelCstEmt(txtSeq.Text)

                        Call check_mu(sReadingIndexQ)

                        txtAlias.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_alsitmno")
                        txtAlscolcde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_alscolcde")

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc").ToString() = "Y" Then
                            chkPC.Checked = True
                            Call ABUASST(txtItmNo.Text, "SHOWPRC")
                        Else
                            chkPC.Checked = False
                            Call ABUASST(txtItmNo.Text, "HIDEPRC")
                        End If

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_conftr").ToString() = "" Then
                            txtUMFtr.Text = "1"
                        Else
                            txtUMFtr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_conftr").ToString()
                        End If

                        txtPCPrc.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pcprc"), "###,###,##0.0000")
                        txtPCPrc_Text_round_5 = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pcprc"), "###,###,##0.000000")

                        txtPCPrcCur.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde").ToString()

                        If isABUAssortment(txtItmNo.Text) Then
                            Call ABUASST(txtItmNo.Text, "SHOW")
                        End If

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pdabpdiff").ToString() <> "" Then
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pdabpdiff").ToString = "Y" And Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Then
                                flgPDABPDIFF = True
                            End If
                        End If

                        '*** Check for Discontinued New Item
                        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "OLD" Then
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del").ToString <> "Y" Then
                                Dim rsIMBASINF1 As New DataSet

                                gsCompany = Trim(cboCoCde.Text)
                                Call Update_gs_Value(gsCompany)

                                gspStr = "sp_select_IMBASINF_Q_Check_Dis '" & cboCoCde.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString & "'"
                                rtnLong = execute_SQLStatement(gspStr, rsIMBASINF1, rtnStr)
                                gspStr = ""

                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading Display_Detail sp_select_IMBASINF_Q_Check_Dis :" & rtnStr)
                                    Exit Sub
                                End If

                                If rsIMBASINF1.Tables("RESULT").Rows.Count > 0 Then
                                    Dim counter As Integer
                                    For counter = 0 To rsIMBASINF1.Tables("RESULT").Rows.Count - 1
                                        If rsIMBASINF1.Tables("RESULT").Rows(counter)("ibi_itmsts").ToString = "DIS" Then
                                            chkDelete.Enabled = True
                                            flgOLDNewItem = True
                                            Exit For
                                        End If
                                    Next
                                End If
                                rsIMBASINF1.Tables.Clear()
                            End If
                        End If

                        txtItmDsc.Text = Replace(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmdsc").ToString, "''", "'")
                        cboDtlPrcTrm.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString
                        cboFtyPrcTrm.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString
                        cboTranTrm.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString

                        Dim sTemp As String
                        sTemp = ""

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no").ToString <> "" Then
                            sTemp = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no").ToString
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no").ToString <> "" Then
                                sTemp = sTemp + "/" + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no").ToString
                            End If
                        Else
                            sTemp = "Standard"
                        End If
                        txtPrcKey.Text = sTemp

                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat")) Then
                            txtEffDat.Text = Convert.ToDateTime(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat")).ToShortDateString
                        Else
                            txtEffDat.Text = "01/01/1900"
                        End If

                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat")) Then
                            txtExpDat.Text = Convert.ToDateTime(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat")).ToShortDateString
                        Else
                            txtExpDat.Text = "01/01/1900"
                        End If


                        '''  20130909  refill colcde cbo
                        ''' 
                        gsCompany = Trim(cboCoCde.Text)
                        Call Update_gs_Value(gsCompany)

                        gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString & "'"
                        rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading txtItmNo_Press sp_select_IMCOLINF 2 :" & rtnStr)
                            Exit Sub
                        End If

                        cboColCde.Items.Clear()
                        For index As Integer = 0 To rs_IMCOLINF.Tables("RESULT").Rows.Count - 1
                            cboColCde.Items.Add(rs_IMCOLINF.Tables("RESULT").Rows(index)("icf_colcde").ToString)
                        Next
                        '''


                        If IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHCURR")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHCURR")) = "" And _
                            IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHAMT")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHAMT")) = "" And QuotCopyFlag = True Then
                            '*** Phase 2
                            If ext_temp_itm = True Then
                                txtColCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString
                            Else
                                Call display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString, cboColCde)
                                cboColCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString
                            End If
                        Else
                            If ext_temp_itm = True Then
                                txtColCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString
                            Else
                                cboColCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString
                            End If
                            txtCIHcur.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHCURR")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHCURR"))
                            txtCIHprc.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHAMT")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHAMT"))
                        End If

                        txtCusCol.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscol")
                        txtCusItm.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusitm")
                        txtColDsc.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc")), "", Replace(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc").ToString, "''", "'"))


                        cboUM.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde")
                        txtInrQty.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty")
                        txtMtrQty.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty")
                        txtCft.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft").ToString), "##0.####")
                        txtCBM.Text = Format(Val(IIf(Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm").ToString) = "", 0, Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm").ToString))), "##0.####")

                        If Trim(CStr(Year(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutdat")))) <> "1900" Then
                            txtPeriod.Text = Trim(CStr(Year(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutdat")))) + "-" + Microsoft.VisualBasic.Right("00" + Trim(CStr(Month(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutdat")))), 2)
                        Else
                            txtPeriod.Text = ""
                        End If

                        txtCurCde1.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")
                        txtCurrMOQ.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")

                        ORI_MOQ = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoq")), "0", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoq"))
                        ORI_MOA = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoa")), "0", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoa"))
                        ORI_MOFLAG = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moflag")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moflag"))

                        cboPcking.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString + _
                                            " / " + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString + _
                                            " / " + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString + _
                                            " / " + Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft")).ToString + _
                                            " / " + Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm")).ToString + _
                                            " / " + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString + _
                                            " / " + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString + _
                                            " / " + rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString

                        txtNote.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_note")), "", Replace(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_note").ToString, "''", "'"))

                        txtCurCde2.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")

                        txtItmDsc.Text = Replace(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmdsc").ToString, "''", "'")

                        lblPckCstAmt.Text = "Amt (" & txtCurCde2.Text & ")"
                        lblItmCommAmt.Text = "Amt (" & txtCurCde2.Text & ")"

                        txtBasPrc.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc").ToString), "###,###,##0.0000")
                        If txtQutNo.Text <> "" Then
                            Call LoadPrcEmtFromQU()
                            'Need to change use QUOTNDTL 20130708 Marco
                        End If

                        '''20140128
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts").ToString <> "TBC" Then


                            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "W" Then
                                chkApproveDtl.Enabled = True
                            Else
                                chkApproveDtl.Enabled = False
                            End If

                            'chkApproveDtl.Enabled = IIf(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString = "N", True, False)


                        Else
                            chkApproveDtl.Enabled = False
                        End If
 
                        'If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString = "Y" And _
                        '    chkApproveDtl.Enabled = True Then
                        'End If


                        chkApproveDtl.Checked = IIf(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString = "Y", True, False)

                        txtCus1Sp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp").ToString), "###,###,##0.0000")
                        txtCurCde3.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")
                        txtPCPrcCur.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")

                        txtInrdin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin").ToString), "##0.####")
                        txtInrwin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin").ToString), "##0.####")
                        txtInrhin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin").ToString), "##0.####")
                        txtMtrdin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin").ToString), "##0.####")
                        txtMtrwin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin").ToString), "##0.####")
                        txtMtrhin.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin").ToString), "##0.####")

                        txtInrdcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm").ToString), "##0.####")
                        txtInrwcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm").ToString), "##0.####")
                        txtInrhcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm").ToString), "##0.####")
                        txtMtrdcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm").ToString), "##0.####")
                        txtMtrwcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm").ToString), "##0.####")
                        txtMtrhcm.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm").ToString), "##0.####")

                        txtGrswgt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grswgt").ToString), "##0.###")
                        txtNetwgt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_netwgt").ToString), "##0.###")

                        chkFtyTmpItm.Checked = IIf(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitm").ToString = "Y", True, False)

                        lblCurrMOQ.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moqunttyp").ToString & " ="

                        discnt = True
                        txtCus1Dp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp").ToString), "###,###,##0.0000")


                        txtMU.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_mu").ToString), "###,###,##0.0000")
                        txtPckCstAmt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper").ToString), "###,###,##0.0000")
                        txtItmCommAmt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper").ToString), "###,###,##0.0000")
                        lblMUMin.Text = "(Min " + Format(round(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mumin"), 2), "###,###,##0.00") + "%)"

                        Call displayMOQMOA()

                        txtIMRmk.Text = IIf(Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk").ToString) = "", "", Replace(Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk").ToString), "''", "'"))

                        txtCurCde3.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")

                        txtSmpUnt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpunt")
                        txtSmpQty.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpqty")
                        txtSmpPrc.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpprc").ToString), "###,###,##0.0000")
                        txtStkQty.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_stkqty")
                        txtCusQty.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusqty")

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "CMP" Then
                            cboItmSts.Text = "CMP - Active Item with complete Info."
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "INC" Then
                            cboItmSts.Text = "INC - Active Item with incomplete Info."
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "HLD" Then
                            cboItmSts.Text = "HLD - Active Item Hold by the system."
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "DIS" Then
                            cboItmSts.Text = "DIS - Discontinue Item."
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "INA" Then
                            cboItmSts.Text = "INA - Inactive Item."
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "CLO" Then
                            cboItmSts.Text = "CLO - Closed (UCP Item)"
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "TBC" Then
                            cboItmSts.Text = "TBC - To be confirmed Item"
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString.ToUpper = "OLD" Then
                            cboItmSts.Text = "OLD - Old Item."
                        End If

                        '*********************Check assorted item whether is old item********
                        Dim rs_CheckResult As New DataSet
                        Dim flgFound As Boolean

                        flgFound = False

                        gsCompany = Trim(cboCoCde.Text)
                        Call Update_gs_Value(gsCompany)

                        gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString & "'"
                        rtnLong = execute_SQLStatement(gspStr, rs_CheckResult, rtnStr)
                        gspStr = ""

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading Display_Detail sp_select_IMBOMASS_Q :" & rtnStr)
                            Exit Sub
                        End If

                        If rs_CheckResult.Tables("RESULT").Rows.Count > 0 Then
                            For index1 As Integer = 0 To rs_CheckResult.Tables("RESULT").Rows.Count - 1
                                If rs_CheckResult.Tables("RESULT").Rows(index1)("ibi_itmsts").ToString = "OLD" Then
                                    cboItmSts.Text = "Old - Old Assorted Item."
                                    flgFound = True
                                End If
                            Next
                        End If

                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts")
                        txtPckItr.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckitr")), "", Replace(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckitr").ToString, "''", "'"))
                        'txtHstRef.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hstref")

                        cusdp = True
                        txtDiscnt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_discnt").ToString), "##0.###")

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim").ToString = "Y" Then
                                optOneTimY.Checked = True
                                optOneTimN.Checked = False
                                optOneTimY.Enabled = False
                                optOneTimN.Enabled = False
                            ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim").ToString = "N" Then
                                optOneTimY.Checked = False
                                optOneTimN.Checked = True
                                optOneTimY.Enabled = True
                                optOneTimN.Enabled = True
                            End If
                        End If

                        '20131017
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prcsec").ToString = "GM" Then
                            optGM.Checked = True
                            optMU.Checked = False
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prcsec").ToString = "MU" Then
                            optGM.Checked = False
                            optMU.Checked = True
                        Else
                            optGM.Checked = False
                            optMU.Checked = False
                        End If

                        txtGrsMgn.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grsmgn").ToString), "##0.###")
                        txtCus2Sp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp").ToString), "###,###,##0.0000")
                        txtCurCde2.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")
                        txtCus2Dp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp").ToString), "###,###,##0.0000")
                        txtCurCde7.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde")

                        '*** Disable Discount and Discounted Price and Gross Margin when Approved
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString = "Y" And gsUsrRank > 3 Then
                            If cboCus2No.Text <> "" Then
                                'optGM.Enabled = False
                                'optMU.Enabled = False
                                'txtGrsMgn.Enabled = False
                            End If

                            optOneTimY.Enabled = False
                            optOneTimN.Enabled = False
                            txtDiscnt.Enabled = False
                            txtCus1Dp.Enabled = False

                            '*** Allow user to delete detail record if it is approved
                            If copy_flag = False And Add_flag = False Then
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                                    If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                                        Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                                        '''20130807 allow delete item chkDelete.Enabled = False
                                    Else
                                        chkDelete.Enabled = True
                                    End If
                                Else
                                    If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                                        '''20130807 allow delete item chkDelete.Enabled = False
                                    Else
                                        chkDelete.Enabled = True
                                    End If
                                End If
                            End If
                        Else
                            If cboCus2No.Text <> "" Then
                                optGM.Enabled = True
                                optMU.Enabled = True
                                txtGrsMgn.Enabled = True
                                gbSecond.Enabled = True

                                If optMU.Checked = False Then
                                    optGM.Checked = True
                                End If

                            End If

                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim").ToString = "N" Then
                                optOneTimY.Enabled = True
                                optOneTimN.Enabled = True
                            End If

                            txtDiscnt.Enabled = True

                            If chkPC.Checked <> True Then
                                txtCus1Dp.Enabled = True
                            End If

                            If copy_flag = False And Add_flag = False Then
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                                    If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                                        Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                                        '''20130807 allow delete item chkDelete.Enabled = False
                                    Else
                                        chkDelete.Enabled = True
                                    End If
                                Else
                                    If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                                        '''20130807 allow delete item chkDelete.Enabled = False
                                    Else
                                        chkDelete.Enabled = True
                                    End If
                                End If
                            End If
                        End If

                        cboHrmCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde")
                        txtDtyRat.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dtyrat").ToString), "##0.###")

                        'modufy
                        If Trim(txtItmNo.Text) <> "" Then
                            Call GetCusSty(Trim(txtItmNo.Text))
                        Else
                            Call GetCusSty(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno"))
                        End If

                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusstyno")) Then
                            cboCusals.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusstyno")
                        Else
                            cboCusals.Text = ""

                        End If

                        txtUPC.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc")

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitm").ToString = "Y" Then
                            chkFtyTmpItm.Checked = True
                        Else
                            chkFtyTmpItm.Checked = False
                        End If

                        txtFtyTmpItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitmno")

                        txtDept.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dept")

                        '                        Call fillcboCusVen(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        '                        Call fillcboDV(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        '                        Call fillcboTV(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        '                        Call fillcboFA(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        '                        Call fillcboItmNoVen(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)

                        '                        Call fillcboPVen(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven").ToString, cboCusVen)
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dv").ToString, cboDV)
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tv").ToString, cboTV)
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyaud").ToString, cboFA)
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno").ToString, cboVenNo)
                        'display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)


                        '*** Show custom vendor
                        'cboCusVen.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven"))
                        'cboDV.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_DV")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_DV"))
                        'cboTV.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_TV")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_TV"))
                        'cboFA.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyaud")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyaud"))

                        'If txtItmNoVen.Text.Trim <> "" Then
                        '    cboItmNoVen.text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno"))
                        'End If

                        'cboVenNo.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven"))

                        'cboTOFty.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_buyer")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_buyer"))

                        txtTOOrdQty.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toqty")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toqty"))
                        txtTORemark.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tormk")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tormk"))
                        txtTOShipport.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toshipport")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toshipport"))

                        txtDTLFtyShpDateStr.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr")), "", Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr"), "MM/dd/yyyy"))
                        If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr"), "01/01/1900") = 0 Then
                            txtDTLFtyShpDateStr.Text = ""
                        End If
                        ''' 20140122special handle
                        If txtDTLFtyShpDateStr.Text.Trim = "11/19/00" Then
                            txtDTLFtyShpDateStr.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
                        End If
                        If txtDTLFtyShpDateStr.Text.Trim = "11/19/2000" Then
                            txtDTLFtyShpDateStr.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
                        End If

                        txtDTLFtyShpDateEnd.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend")), "", Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend"), "MM/dd/yyyy"))
                        If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend"), "01/01/1900") =0 Then
                            txtDTLFtyShpDateEnd.Text = ""
                        End If
                        ''' 20140122special handle
                        If txtDTLFtyShpDateEnd.Text.Trim = "11/19/00" Then
                            txtDTLFtyShpDateEnd.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
                        End If
                        If txtDTLFtyShpDateEnd.Text.Trim = "11/19/2000" Then
                            txtDTLFtyShpDateEnd.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
                        End If

                        txtDTLCustShpDateStr.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr")), "", Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr"), "MM/dd/yyyy"))
                        If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr"), "01/01/1900") =0 Then
                            txtDTLCustShpDateStr.Text = ""
                        End If
                        ''' 20140122special handle
                        If txtDTLCustShpDateStr.Text.Trim = "11/19/00" Then
                            txtDTLCustShpDateStr.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"
                        End If
                        If txtDTLCustShpDateStr.Text.Trim = "11/19/2000" Then
                            txtDTLCustShpDateStr.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"
                        End If

                        txtDTLCustShpDateEnd.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend")), "", Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend"), "MM/dd/yyyy"))
                        If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend"), "01/01/1900") =0 Then
                            txtDTLCustShpDateEnd.Text = ""
                        End If
                        ''' 20140122special handle
                        If txtDTLCustShpDateEnd.Text.Trim = "11/19/00" Then
                            txtDTLCustShpDateEnd.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
                        End If
                        If txtDTLCustShpDateEnd.Text.Trim = "11/19/2000" Then
                            txtDTLCustShpDateEnd.Text = ""
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
                        End If

                        txtCusSub.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cussub")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cussub"))

                        txtSubCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_subcde")
                        txtVenItm.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venitm")
                        txtFCurCde.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde")
                        txtFtyPrc.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc").ToString), "###,###,##0.0000")
                        txtFtyCst.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst").ToString), "###,###,##0.0000")

                        dr = rs_CUBASINF_CM.Tables("RESULT").Select("ysi_cde = " & "'" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cosmth").ToString & "'")
                        If dr.Length > 0 Then
                            txtCosMth.Text = dr(0)("ysi_cde") + " - " + dr(0)("ysi_dsc")
                        Else
                            txtCosMth.Text = ""
                        End If
                        If txtCosMth.Text = " - " Then txtCosMth.Text = ""

                        pth = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imgpth").ToString.Trim

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_image").ToString = "Y" Then
                            optImageY.Checked = True
                            optImageN.Checked = False
                            cmdImage.Enabled = True
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_image").ToString = "N" Then
                            optImageY.Checked = False
                            optImageN.Checked = True
                            cmdImage.Enabled = False
                        End If

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del").ToString = "Y" Then
                            chkDelete.Checked = True
                        Else
                            chkDelete.Checked = False
                        End If

                        If cboHrmCde.Text <> "" Then
                            dr = rs_SYHRMCDE.Tables("RESULT").Select("yhc_hrmcde = " & "'" & cboHrmCde.Text & "'")
                            If dr.Length > 0 Then
                                cboHrmCde.Text = dr(0)("yhc_hrmcde") + " - " + dr(0)("yhc_hrmdsc") + _
                                                    IIf(dr(0)("yhc_tarzon").ToString = "U", " (HSTU # for USA)", " (Tariff # for Europe)")
                            End If
                        End If

                        'If InStr(cboHrmCde.Text, " - ") > 0 Then
                        '    txtDtyRat.Enabled = False
                        'Else
                        '    txtDtyRat.Enabled = True
                        'End If

                        If rs_QUASSINF.Tables.Count > 0 Then
                            sFilter = "qai_qutseq = " & txtSeq.Text & " and mode <> 'DEL'"
                            rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter
                            If rs_QUASSINF.Tables("RESULT").DefaultView.Count = 0 Then
                                cmdAss.Enabled = False
                            Else
                                cmdAss.Enabled = True
                            End If
                        Else
                            cmdAss.Enabled = False
                        End If

                        If rs_QUCPTBKD.Tables.Count > 0 Then
                            sFilter = "qcb_qutseq = " & txtSeq.Text & " and mode <> 'DEL'"
                            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
                            If rs_QUCPTBKD.Tables("RESULT").DefaultView.Count = 0 Then
                                dgMatBkd.DataSource = Nothing
                            Else
                                dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
                                Call display_Component()
                            End If
                        End If

                        '*** Force the value, avoid the change of value from the change of other control
                        txtIMRmk.Text = IIf(Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk").ToString) = "", "", Replace(Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk").ToString), "''", "'"))

                        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd").ToString) > 0 Then
                            txtCusUsd.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd"), "###,###,##0.0000")
                            display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususdcur").ToString, cboCusUsdCurr)
                        Else
                            txtCusUsd.Text = ""
                            cboCusUsdCurr.Text = "USD"
                        End If

                        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad").ToString) > 0 Then
                            txtCusCad.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad"), "###,###,##0.0000")
                            display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscadcur").ToString, cboCusCadCurr)
                        Else
                            txtCusCad.Text = ""
                            cboCusCadCurr.Text = "CAD"
                        End If

                        If txtItmNo.Text <> "" And cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "HLD" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "DIS" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "OLD" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "TBC" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "INA" And _
                            Microsoft.VisualBasic.Right(cboVenNo.Text, 13) <> "(Discontinue)" Then
                            cmdUpdateMO.Enabled = True
                        Else
                            cmdUpdateMO.Enabled = False
                        End If

                        '*** Freeze when item inactive
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "DIS" Or _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "OLD" Or _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "TBC" Or _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "INA" Or _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_vensts").ToString = "I" Then
                            'Call disable_Detail()
                            Call reset_detail_control("Detail_Read", "All")
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_vensts").ToString = "I" Then
                                'MsgBox("Inactive Vendor.")
                            End If
                            cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
                            cmdUpdateMO.Enabled = False
                        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "INA" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_vensts").ToString = "A" Then
                            Call enable_Detail(sReadingIndexQ)
                            '*** Disable Discount and Discounted Price and Gross Margin when Approved
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString = "Y" And gsUsrRank > 3 Then
                                If cboCus2No.Text <> "" Then
                                    'optGM.Enabled = False
                                    'optMU.Enabled = False
                                    'txtGrsMgn.Enabled = False
                                End If

                                optOneTimY.Enabled = False
                                optOneTimN.Enabled = False
                                txtDiscnt.Enabled = False
                                txtCus1Dp.Enabled = False
                                cmdUpdateMO.Enabled = False
                            Else
                                If cboCus2No.Text <> "" Then
                                    optGM.Enabled = True
                                    optMU.Enabled = True
                                    txtGrsMgn.Enabled = True
                                    gbSecond.Enabled = True

                                    If optMU.Checked = False Then
                                        optGM.Checked = True
                                    End If


                                End If

                                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim").ToString = "N" Then
                                    optOneTimY.Enabled = True
                                    optOneTimN.Enabled = True
                                End If

                                txtDiscnt.Enabled = True
                                txtCus1Dp.Enabled = True

                                If chkPC.Checked = True Then
                                    Call ABUASST(txtItmNo.Text, "SHOWPRC")
                                Else
                                    Call ABUASST(txtItmNo.Text, "HIDEPRC")
                                End If

                                '*** Phase 2
                                If txtItmNo.Text <> "" And cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "HLD" And _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "DIS" And _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "OLD" And _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "TBC" And _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "INA" And _
                                   Microsoft.VisualBasic.Right(cboVenNo.Text, 13) <> "(Discontinue)" Then
                                    cmdUpdateMO.Enabled = True
                                Else
                                    cmdUpdateMO.Enabled = False
                                End If
                            End If

                        End If

                        'If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts").ToString = "INCOMPLETE" Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts").ToString = "I - Inactive" Then
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "DIS" And _
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "OLD" And _
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "TBC" And _
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString <> "INA" And _
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_vensts").ToString <> "I" Then
                                cmdUpdItm.Enabled = True
                            End If
                            Call ABUASST(txtItmNo.Text, "HIDE")
                            Call ABUASST(txtItmNo.Text, "HIDEPRC")
                        Else
                            cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
                        End If
                    End If
                End If
            End If
        End If

        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "H" Then
            'cmdReset.Enabled = False
        End If


        If sReadingIndexQ = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 And rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
            cmdBackD.Enabled = True
            cmdNextD.Enabled = False
        ElseIf sReadingIndexQ = 0 And rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
            cmdBackD.Enabled = False
            cmdNextD.Enabled = True
        ElseIf sReadingIndexQ = 0 And rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            cmdBackD.Enabled = False
            cmdNextD.Enabled = False
        ElseIf sReadingIndexQ > 0 And rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 And sReadingIndexQ < rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 Then
            cmdBackD.Enabled = True
            cmdNextD.Enabled = True
        End If

        discnt = False
        cusdp = False
        bolLatestQut = False

        flgRenewing = False

        Cursor = Cursors.Default

        ''20130807    
        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "Y" Then

            Call reset_detail_readonly()
            'Call ShowFooterBar(False)
            chkDelete.Enabled = True
            Exit Sub
        Else
            chkDelete.Enabled = True
        End If

        '20130828
        If chkPC.Checked = True And txtUMFtr.Text.ToString <> "" Then
            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()

            either_cus1dp_or_cus2dp = txtCus1Dp.Text
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If Not IsNumeric(txtCus2Dp.Text) Then
                    txtCus2Dp.Text = txtCus1Dp.Text
                End If
                If optGM.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                ElseIf optMU.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                End If
            End If

            txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
            txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")
        End If


        '''20130815
        If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
            gbPacking.Enabled = True
            cboPcking.Enabled = True
        End If

        '''20130908
        If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "") Then
            cboPcking.BringToFront()
        End If

        ''duplicate??
        'txtDTLFtyShpDateStr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr")
        'txtDTLFtyShpDateEnd.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend")
        'txtDTLCustShpDateStr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr")
        'txtDTLCustShpDateEnd.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend")

        '''20140221
        'System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.ShortDatePattern = "MM/dd/yyyy"
        '        CultureInfo.CurrentUICulture.DateTimeFormat.ShortDatePattern = "MM/dd/yyyy"; 


        '''20140325
        '        Call updateMOQMOA()

    End Sub

    Private Sub packtermcontrol(ByVal inputcase As String)
        If inputcase = "ItemNotInIM" Then
            cboUM.Visible = True
            txtInrQty.Visible = True
            txtMtrQty.Visible = True
            cboFtyPrcTrm.Visible = True
            cboDtlPrcTrm.Visible = True
            cboTranTrm.Visible = True

            cboUM.Enabled = True
            txtInrQty.Enabled = True
            txtMtrQty.Enabled = True
            cboFtyPrcTrm.Enabled = True
            cboDtlPrcTrm.Enabled = True
            cboTranTrm.Enabled = True


            cboPcking.Visible = False
            cboPcking.Enabled = False
        Else
            cboUM.Visible = False
            txtInrQty.Visible = False
            txtMtrQty.Visible = False
            cboFtyPrcTrm.Visible = False
            cboDtlPrcTrm.Visible = False
            cboTranTrm.Visible = False

            cboUM.Enabled = False
            txtInrQty.Enabled = False
            txtMtrQty.Enabled = False
            cboFtyPrcTrm.Enabled = False
            cboDtlPrcTrm.Enabled = False
            cboTranTrm.Enabled = False

            cboPcking.Visible = True
            cboPcking.Enabled = True
        End If

    End Sub

    Private Sub display_dgOthDtl(ByVal type As String)
    

        'type
        'A - All
        'F - Functional
        'P - Pricing
        'T - Sample and TO
        'S - Summary

        If rs_QUOTNDTL.Tables.Count = 0 Then
            Exit Sub
        End If

        dgOthDtl.RowHeadersWidth = 18
        dgOthDtl.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.DisableResizing
        dgOthDtl.ColumnHeadersHeight = 18
        dgOthDtl.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing
        dgOthDtl.AllowUserToResizeColumns = True
        dgOthDtl.AllowUserToResizeRows = False
        dgOthDtl.RowTemplate.Height = 18

        dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView



        Dim i As Integer
        '        dgOthDtl.Columns(dgOthDtl_Del).Frozen = False

        i = 0 '0
        dgOthDtl_Del = i
        dgOthDtl.Columns(i).HeaderText = "Del"
        dgOthDtl.Columns(i).Width = 37
        dgOthDtl.Columns(i).ReadOnly = False
        Select Case type
            Case "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        i = i + 1 '1
        dgOthDtl_mode = i
        dgOthDtl.Columns(i).Visible = False
        i = i + 1 '2
        dgOthDtl_upditmdtl = i
        dgOthDtl.Columns(i).HeaderText = "Upd Itm"
        dgOthDtl.Columns(i).Width = 65
        dgOthDtl.Columns(i).ReadOnly = False
        Select Case type
            Case "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        i = i + 1 '3
        dgOthDtl_updmoqmoa = i
        dgOthDtl.Columns(i).HeaderText = "Upd MOQ MOA"
        dgOthDtl.Columns(i).Width = 75
        dgOthDtl.Columns(i).ReadOnly = False
        Select Case type
            Case "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        i = i + 1 '4
        dgOthDtl_updassbom = i
        dgOthDtl.Columns(i).HeaderText = "Upd ASS BOM"
        dgOthDtl.Columns(i).Width = 75
        dgOthDtl.Columns(i).ReadOnly = False
        Select Case type
            Case "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        i = i + 1 '5
        dgOthDtl_converttopc = i
        dgOthDtl.Columns(i).HeaderText = "Convert PC"
        dgOthDtl.Columns(i).Width = 85
        dgOthDtl.Columns(i).ReadOnly = False
        Select Case type
            Case "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        i = i + 1 '6
        dgOthDtl_qud_cocde = i
        dgOthDtl.Columns(i).Visible = False
        i = i + 1 '7
        dgOthDtl_qud_qutno = i
        dgOthDtl.Columns(i).Visible = False
        i = i + 1 '8
        dgOthDtl_qud_qutseq = i
        dgOthDtl.Columns(i).HeaderText = "Seq"
        dgOthDtl.Columns(i).Width = 37
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '9
        dgOthDtl_qud_itmsts = i
        dgOthDtl.Columns(i).HeaderText = "ItmSts"
        dgOthDtl.Columns(i).Width = 55
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '10
        dgOthDtl_qud_qutitmsts = i
        dgOthDtl.Columns(i).HeaderText = "QUSts"
        dgOthDtl.Columns(i).Width = 55
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '11
        dgOthDtl_qud_itmno = i
        dgOthDtl.Columns(i).HeaderText = "Item No."
        dgOthDtl.Columns(i).Width = 120
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '12
        dgOthDtl_qud_itmtyp = i
        dgOthDtl.Columns(i).HeaderText = "Item Type"
        dgOthDtl.Columns(i).Width = 65
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '13
        dgOthDtl_qud_itmnotyp = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '14
        dgOthDtl_qud_itmnoreal = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '15
        dgOthDtl_qud_itmnotmp = i
        dgOthDtl.Columns(i).HeaderText = "Temp Item"
        dgOthDtl.Columns(i).Width = 90
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '16
        dgOthDtl_qud_itmnoven = i
        dgOthDtl.Columns(i).HeaderText = "Vdr Item"
        dgOthDtl.Columns(i).Width = 65
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '17
        dgOthDtl_qud_itmnovenno = i
        dgOthDtl.Columns(i).HeaderText = "Vdr No"
        dgOthDtl.Columns(i).Width = 45
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '18
        dgOthDtl_qud_itmdsc = i
        dgOthDtl.Columns(i).HeaderText = "Item Dsc"
        dgOthDtl.Columns(i).Width = 130
        dgOthDtl.Columns(i).Visible = True
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '19
        dgOthDtl_qud_cusstyno = i
        dgOthDtl.Columns(i).HeaderText = "Style No"
        dgOthDtl.Columns(i).Width = 65
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '20
        dgOthDtl_qud_cusitm = i
        dgOthDtl.Columns(i).HeaderText = "Cus Item"
        dgOthDtl.Columns(i).Width = 65
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '21
        dgOthDtl_qud_alsitmno = i
        dgOthDtl.Columns(i).HeaderText = "Alias Item"
        dgOthDtl.Columns(i).Width = 30
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '22
        dgOthDtl_qud_upc = i
        dgOthDtl.Columns(i).HeaderText = "UPC#"
        dgOthDtl.Columns(i).Width = 30
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '23
        dgOthDtl_qud_colcde = i
        dgOthDtl.Columns(i).HeaderText = "Color"
        dgOthDtl.Columns(i).Width = 100
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '24
        dgOthDtl_qud_coldsc = i
        dgOthDtl.Columns(i).HeaderText = "Color Dsc"
        dgOthDtl.Columns(i).Width = 50
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '25
        dgOthDtl_qud_alscolcde = i
        dgOthDtl.Columns(i).HeaderText = "Alias Col"
        dgOthDtl.Columns(i).Width = 40
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '26
        dgOthDtl_qud_cuscol = i
        dgOthDtl.Columns(i).HeaderText = "Cust Col"
        dgOthDtl.Columns(i).Width = 40
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '27
        dgOthDtl_qud_pckseq = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '28
        dgOthDtl_qud_packterm = i
        dgOthDtl.Columns(i).HeaderText = "Pack & Term"
        dgOthDtl.Columns(i).Width = 250
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '29
        dgOthDtl_qud_untcde = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '30
        dgOthDtl_qud_inrqty = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '31
        dgOthDtl_qud_mtrqty = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '32
        dgOthDtl_qud_prctrm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '33
        dgOthDtl_qud_ftyprctrm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '34
        dgOthDtl_qud_trantrm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '35
        dgOthDtl_qud_conftr = i
        dgOthDtl.Columns(i).HeaderText = "PC Ftr"
        dgOthDtl.Columns(i).Width = 75
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '36
        dgOthDtl_qud_effdat = i
        dgOthDtl.Columns(i).HeaderText = "Eff Date"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '37
        dgOthDtl_qud_expdat = i
        dgOthDtl.Columns(i).HeaderText = "Exp Date"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '38
        dgOthDtl_qud_cus1no = i
        dgOthDtl.Columns(i).HeaderText = "Pricing Key 1"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '39
        dgOthDtl_qud_cus2no = i
        dgOthDtl.Columns(i).HeaderText = "Pricing Key 2"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '40
        dgOthDtl_qud_cft = i
        dgOthDtl.Columns(i).HeaderText = "CFT"
        dgOthDtl.Columns(i).Width = 50
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '41
        dgOthDtl_qud_cbm = i
        dgOthDtl.Columns(i).HeaderText = "CBM"
        dgOthDtl.Columns(i).Width = 50
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '42
        dgOthDtl_inner_in = i
        dgOthDtl.Columns(i).HeaderText = "Inner(in) LxWxH"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '43
        dgOthDtl_master_in = i
        dgOthDtl.Columns(i).HeaderText = "Master(in) LxWxH"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '44
        dgOthDtl_inner_cm = i
        dgOthDtl.Columns(i).HeaderText = "Inner(cm) LxWxH"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '45
        dgOthDtl_master_cm = i
        dgOthDtl.Columns(i).HeaderText = "Master(cm) LxWxH"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '46
        dgOthDtl_qud_inrdin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '47
        dgOthDtl_qud_inrwin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '48
        dgOthDtl_qud_inrhin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '49
        dgOthDtl_qud_mtrdin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '50
        dgOthDtl_qud_mtrwin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '51
        dgOthDtl_qud_mtrhin = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '52
        dgOthDtl_qud_inrdcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '53
        dgOthDtl_qud_inrwcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '54
        dgOthDtl_qud_inrhcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '55
        dgOthDtl_qud_mtrdcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '56
        dgOthDtl_qud_mtrwcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '57
        dgOthDtl_qud_mtrhcm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '58
        dgOthDtl_qud_qutdat = i
        dgOthDtl.Columns(i).HeaderText = "IM Period"
        dgOthDtl.Columns(i).DefaultCellStyle.Format = "yyyy-MM"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '59
        dgOthDtl_qud_grswgt = i
        dgOthDtl.Columns(i).HeaderText = "GW"
        dgOthDtl.Columns(i).Width = 60
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '60
        dgOthDtl_qud_netwgt = i
        dgOthDtl.Columns(i).HeaderText = "NW"
        dgOthDtl.Columns(i).Width = 60
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '61
        dgOthDtl_qud_pckitr = i
        dgOthDtl.Columns(i).HeaderText = "Pack Instr"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '62
        dgOthDtl_qud_dept = i
        dgOthDtl.Columns(i).HeaderText = "Dept"
        dgOthDtl.Columns(i).Width = 50
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '63
        dgOthDtl_qud_hstref = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '64
        dgOthDtl_qud_moq = i
        dgOthDtl.Columns(i).HeaderText = "MOQ"
        dgOthDtl.Columns(i).Width = 60
        Select Case type
            Case "A", "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '65
        dgOthDtl_qud_moqunttyp = i
        dgOthDtl.Columns(i).HeaderText = "MOQ Type"
        dgOthDtl.Columns(i).Width = 65
        Select Case type
            Case "A", "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '66
        dgOthDtl_qud_moa = i
        dgOthDtl.Columns(i).HeaderText = "MOA"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "A", "F"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '67
        dgOthDtl_qud_prcsec = i
        dgOthDtl.Columns(i).HeaderText = "P/S"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "A", "P"
                dgOthDtl.Columns(i).Visible = False
                '                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '68
        dgOthDtl_qud_grsmgn = i
        dgOthDtl.Columns(i).HeaderText = "GM%"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "A", "P"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '69
        dgOthDtl_qud_curcde = i
        dgOthDtl.Columns(i).HeaderText = "Cur."
        dgOthDtl.Columns(i).Width = 37
        Select Case type
            Case "A", "P"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '70
        dgOthDtl_qud_cus1sp = i
        dgOthDtl.Columns(i).HeaderText = "Std Price"
        dgOthDtl.Columns(i).Width = 80
        Select Case type
            Case "A", "P"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '71
        dgOthDtl_qud_cus2sp = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '72
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_cus1dp = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '73
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_cus2dp = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '74
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_discnt = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '75
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_contopc = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '76
        dgOthDtl_qud_pcprc = i
        dgOthDtl.Columns(i).HeaderText = "Price For PC USD"
        dgOthDtl.Columns(i).Width = 120
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '77
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_fcurcde = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '78
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_ftyprc = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '79
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_ftycst = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '80
        dgOthDtl_qud_basprc = i
        dgOthDtl.Columns(i).HeaderText = "Basic Price"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '81
        dgOthDtl_qpe_cocde = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '82
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_qutno = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '83
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_qutseq = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '84
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_itmno = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '85
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_untcde = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '86
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_inrqty = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '87
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_mtrqty = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '88
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cft = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '89
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cbm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '90
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftyprctrm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '91
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_prctrm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '92
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_trantrm = i
        dgOthDtl.Columns(i).ReadOnly = True

        '''''''''''''''''changed name
        i = i + 1 '93   
        dgOthDtl.Columns(i).Visible = False
        'dgOthDtl_qpe_cus1no = i
        dgOthDtl_qpe_fml_cus1no = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '94
        'dgOthDtl_qpe_cus2no = i
        dgOthDtl_qpe_fml_cus2no = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '95
        dgOthDtl_qpe_fml_cat = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '96
        'dgOthDtl_qpe_ventyp = i
        dgOthDtl_qpe_fml_venno = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '97
        dgOthDtl_qpe_fml_prctrm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '98
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_fml_trantrm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '99
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_fml_ventranflg = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '100
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_fcurcde = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '101
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycst = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '102
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftyprc = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '103
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_curcde = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '104
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_basprc = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '105
        dgOthDtl_qpe_mu = i
        dgOthDtl.Columns(i).HeaderText = "GM/MU%"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '106
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_mumin = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '107
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_muprc = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '108
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '109
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cus1sp = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '110
        dgOthDtl_qpe_cus1dp = i
        dgOthDtl.Columns(i).HeaderText = "Adjusted Price"
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl.Columns(i).Width = 150
        i = i + 1 '111
        dgOthDtl_qpe_cushcstbufper = i
        dgOthDtl.Columns(i).HeaderText = "Cushion /Buffer%"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '112
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cushcstbufamt = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '113
        dgOthDtl_qpe_othdisper = i
        dgOthDtl.Columns(i).HeaderText = "Discount %"
        dgOthDtl.Columns(i).Width = 80
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '114
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_maxapvper = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '115
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_maxapvamt = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '116
        dgOthDtl_qpe_spmuper = i
        dgOthDtl.Columns(i).HeaderText = "Sample UM"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '117
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_dpmuper = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '118
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cumu = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '119
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_pm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '120
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cush = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '121
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_thccusper = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '122
        dgOthDtl_qpe_upsper = i
        dgOthDtl.Columns(i).HeaderText = "UPS / Sampling (%)"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        i = i + 1 '123
        dgOthDtl_qpe_labper = i
        dgOthDtl.Columns(i).HeaderText = "Lab Test (%)"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '124
        dgOthDtl_qpe_faper = i
        dgOthDtl.Columns(i).HeaderText = "Factory Audit (%)"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select


        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '125
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_cstbufper = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '126
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_othper = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '127
        dgOthDtl_qpe_pliper = i
        dgOthDtl.Columns(i).HeaderText = "PLI %"
        dgOthDtl.Columns(i).Width = 75
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '128
        dgOthDtl_qpe_dmdper = i
        dgOthDtl.Columns(i).HeaderText = "Defective Markdown %"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '129
        dgOthDtl_qpe_rbtper = i
        dgOthDtl.Columns(i).HeaderText = "Rebate %"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '130
        dgOthDtl_qpe_subttlper = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '131
        dgOthDtl.Columns(i).HeaderText = "Packing Cost"
        dgOthDtl_qpe_pkgper = i
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl.Columns(i).Width = 100

        i = i + 1 '132
        dgOthDtl_qpe_comper = i
        dgOthDtl.Columns(i).HeaderText = "Commission %"
        dgOthDtl.Columns(i).Width = 100
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '133
        dgOthDtl.Columns(i).HeaderText = "Commission Amt."
        dgOthDtl_qpe_icmper = i
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
         
        i = i + 1 '134
        dgOthDtl_qpe_stdprc = i
        ''dgOthDtl.Columns(i).HeaderText = "Pricing (Standard/Customer)"
        ''dgOthDtl.Columns(i).Width = 90
        

        
        dgOthDtl.Columns(i).Visible = False

        ''''''''''''''new
        i = i + 1 '135
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstA = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '136
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstB = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '137
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstC = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '138
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstD = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '139
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstTran = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '140
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_ftycstPack = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '141
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_lightspec = i
        dgOthDtl.Columns(i).ReadOnly = True


        i = i + 1 '142
        dgOthDtl_qpe_creusr = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '143
        dgOthDtl_qpe_updusr = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '144
        dgOthDtl_qpe_credat = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '145
        dgOthDtl_qpe_upddat = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '146
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qpe_timstp = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '147
        dgOthDtl_qud_stkqty = i
        dgOthDtl.Columns(i).HeaderText = "Sample Stock Qty"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '148
        dgOthDtl_qud_cusqty = i
        dgOthDtl.Columns(i).HeaderText = "Sample Cust Qty"
        dgOthDtl.Columns(i).Width = 130
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '149
        dgOthDtl_qud_smpqty = i
        dgOthDtl.Columns(i).HeaderText = "Sample Total Qty"
        dgOthDtl.Columns(i).Width = 130
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '150
        dgOthDtl_qud_smpunt = i
        dgOthDtl.Columns(i).HeaderText = "Sample UM"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '151
        dgOthDtl_qud_smpprc = i
        dgOthDtl.Columns(i).HeaderText = "Sample Price USD"
        dgOthDtl.Columns(i).Width = 130
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '152
        dgOthDtl_qud_rndsts = i
        dgOthDtl.Columns(i).HeaderText = "Sample Stage"
        dgOthDtl.Columns(i).Width = 90
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '153
        dgOthDtl_qud_buyer = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '154
        dgOthDtl_qud_toqty = i
        dgOthDtl.Columns(i).HeaderText = "Total Qty"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '155
        dgOthDtl_qud_tormk = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '156
        dgOthDtl_qud_ftyshpstr = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '157
        dgOthDtl_qud_ftyshpend = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '158
        dgOthDtl_qud_cushpstr = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '159
        dgOthDtl_qud_cushpend = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '160
        dgOthDtl_qud_venno = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '161
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_vbi_vensts = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '162
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_venitm = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '163
        dgOthDtl_qud_cusven = i
        dgOthDtl.Columns(i).HeaderText = "Custom Vendor"
        dgOthDtl.Columns(i).Width = 130
        Select Case type
            Case "T", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '164
        dgOthDtl_qud_DV = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '165
        dgOthDtl_qud_TV = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '166
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_ftyaud = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '167
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl_qud_cususdcur = i
        i = i + 1 '168
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl_qud_cususd = i
        i = i + 1 '169
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl_qud_cuscadcur = i
        i = i + 1 '170
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl_qud_cuscad = i
        i = i + 1 '171
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_note = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '172
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_image = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '173
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_imgpth = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '174
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_hrmcde = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '175
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_dtyrat = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '176
        dgOthDtl_qud_cosmth = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '177
        dgOthDtl_ysi_dsc = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '178
        dgOthDtl_qud_apprve = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '179
        dgOthDtl_ibi_catlvl3 = i
        dgOthDtl.Columns(i).HeaderText = "Customer Item Category"
        dgOthDtl.Columns(i).Width = 150
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        i = i + 1 '180
        dgOthDtl_vbi_ventyp = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '181
        dgOthDtl_CIHCURR = i
        dgOthDtl.Columns(i).HeaderText = "CIH CUR"
        dgOthDtl.Columns(i).Width = 50
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '182
        dgOthDtl_CIHAMT = i
        dgOthDtl.Columns(i).HeaderText = "CIH Amount"
        dgOthDtl.Columns(i).Width = 75
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '183
        dgOthDtl_qud_onetim = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '184
        dgOthDtl_qud_pdabpdiff = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '185
        dgOthDtl_qud_ftytmpitm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '186
        dgOthDtl_qud_ftytmpitmno = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '187
        dgOthDtl_qce_amt = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '188
        dgOthDtl_qud_subcde = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '189
        dgOthDtl_qud_tbm = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '190
        dgOthDtl_qud_tbmsts = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '191
        dgOthDtl_qud_moflag = i
        dgOthDtl.Columns(i).HeaderText = "MOQ/MOA"
        dgOthDtl.Columns(i).Width = 45
        Select Case type
            Case "F", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        i = i + 1 '192
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_orgmoq = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '193
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        dgOthDtl_qud_orgmoa = i
        i = i + 1 '194
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_cussub = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '195
        dgOthDtl_qud_specpck = i
        dgOthDtl.Columns(i).HeaderText = "Special Packing Desc"
        dgOthDtl.Columns(i).Width = 100
        Select Case type
            Case "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        i = i + 1 '196
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_custitmcat = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '197
        dgOthDtl_qud_custitmcatfml = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '198
        dgOthDtl_qud_custitmcatamt = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '199
        dgOthDtl_qud_pmu = i
        dgOthDtl.Columns(i).HeaderText = "PMU %"
        dgOthDtl.Columns(i).Width = 70
        Select Case type
            Case "P", "A"
                dgOthDtl.Columns(i).Visible = True
            Case Else
                dgOthDtl.Columns(i).Visible = False
        End Select

        i = i + 1 '200
        dgOthDtl_qud_imrmk = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '201
        dgOthDtl_qud_calpmu = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '202
        dgOthDtl_qud_creusr = i
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '203
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_updusr = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '204
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_credat = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '205
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_upddat = i
        dgOthDtl.Columns(i).ReadOnly = True
        i = i + 1 '206
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_timstp = i
        dgOthDtl.Columns(i).ReadOnly = True

        i = i + 1 '207
        dgOthDtl.Columns(i).Visible = False
        dgOthDtl_qud_timstp = i
        dgOthDtl.Columns(i).ReadOnly = True

        ''))!reset readonly
        Call setStatus_dgOthDtl(sMode)
    End Sub

    Private Sub display_gbPandelCstEmt(ByVal qutseq As Integer)
        Dim i As Integer
        i = 0

        Dim loc As Integer
        loc = -1

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") = qutseq Then
                loc = i
            End If
        Next i

        If loc = -1 Then
            Exit Sub
        End If

        txtSeqP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutseq")
        txtItmNoP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_itmno")

        txtPckingP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_untcde") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_inrqty") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mtrqty") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cft") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cbm") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprctrm") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_prctrm") & " / " & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_trantrm")

        'Formula section
        txtCus1NoP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus1no")
        txtCus2NoP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus2no")
        txtItmCatP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cat")
        txtVenTypP.Text = ""
        txtVenNoP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_venno")
        txtVenTranP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg")
        txtPrcTrmP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_prctrm")
        txtTranTrmP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_trantrm")


        txtFtyCstCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde")
        txtFtyCstP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycst")
        txtFtyPrcCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde")
        txtFtyPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprc")
        txtBasPrcCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        txtBasPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc")

        lblMUMinP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin")

        '20130825
        If flag_txtMUP_keypress = True Then
            flag_txtMUP_keypress = False
        Else
            txtMUP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu")
        End If


        txtMUPriceCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        txtMinMUPriceP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muminprc")
        txtMUPriceP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc")

        txtPckCst1CurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")

        '20130825
        If flag_txtPckCst1P_keypress = True Then
            flag_txtPckCst1P_keypress = False
        Else
            txtPckCst1P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper")
        End If

             txtComm1P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper")
 
        txtItmComm1CurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")

        If flag_txtItmComm1P_keypress = True Then
            flag_txtItmComm1P_keypress = False
        Else
            txtItmComm1P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper")
        End If

        txtCurCde2P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
        txtCus1SpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp")

        txtCurCde21P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")

        ''HKMU
        Dim temp_basprc As Decimal
        Dim temp_ftyprc As Decimal
        Dim temp_cur As String
        Dim temp_fcur As String

        temp_cur = "USD"
        temp_cur = rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qpe_curcde")
        If temp_cur = "" Then
            temp_cur = "USD"
        End If

        temp_fcur = "USD"
        temp_fcur = rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qpe_fcurcde")
        If temp_fcur = "" Then
            temp_fcur = "USD"
        End If

        temp_basprc = rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qpe_basprc")
        temp_ftyprc = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qpe_ftyprc")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qpe_ftyprc"))

        'for cal
        '''7.75  is according to excel formula
        If temp_cur = "USD" And temp_fcur = "HKD" Then
            temp_ftyprc = temp_ftyprc / 7.75
        End If

        Dim temp_hk_mu As Decimal
        If temp_ftyprc <> 0 Then
            temp_hk_mu = temp_basprc / temp_ftyprc
        Else
            temp_hk_mu = 1
        End If

        txtHKMUP.Text = round(temp_hk_mu, 2)

        ''20130808
        If flag_txtCus1DpP_keypress = True Then
            flag_txtCus1DpP_keypress = False
        Else
            txtCus1DpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1dp")
        End If

        ''20131003
        If flag_txtPCPrcP_keypress = True Then
            flag_txtPCPrcP_keypress = False
        Else
            txtPCPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pcprc")

            txtPCPrcP.Text = round(txtPCPrcP.Text, cus1_rounding)

            txtPCPrcP_Text_round_5 = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pcprc")

            '''20140228
            ''' nm

        End If



        '        lblApproveAmtP.Text = "Amt (" + txtCurCde2P.Text + ")"

        txtCushCostBufPercP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper")
        txtOtherDisLmtPercP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper")
        txtMaxApprovePercP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvper")

        txtCustMUPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cumu")
        txtProMarPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pm")
        txtCushPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cush")
        txtTHCCustPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper")
        txtUPSPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upsper")
        txtLabPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_labper")
        txtFAPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_faper")
        txtCostBufPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cstbufper")
        txtOthersPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othper")

        txtPLIPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pliper")
        txtDefMDPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dmdper")
        txtRebatePercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_rbtper")

        txtSubTtlPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper")

        txtPckCstAmtChgCurr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        txtPckCstAmtChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper")

        txtCommPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper")

        txtItmCommAmtChgCurr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        txtItmCommAmtChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper")

        txtStdPrcCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
        txtStdPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp")


        If sMode = cModeAdd Or sMode = cModeUpd Then
            txtMUP.Enabled = True
            txtPckCst1P.Enabled = True
            txtItmComm1P.Enabled = True
            '''20140228
            ''' 
            If chkPC.Checked = True Then
                txtCus1DpP.Enabled = False
            Else
                txtCus1DpP.Enabled = True
            End If

        Else
            txtMUP.Enabled = True
            txtPckCst1P.Enabled = True
            txtItmComm1P.Enabled = True
            '''20140228
            ''' 
            If chkPC.Checked = True Then
                txtCus1DpP.Enabled = False
            Else
                txtCus1DpP.Enabled = True
            End If


        End If

        Call check_mu1()
        '1st check



    End Sub

    Private Sub update_gbPandelCstEmt(ByVal qutseq As Integer)
        Dim i As Integer
        i = 0

        Dim loc As Integer
        loc = -1

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") = qutseq Then
                loc = i
            End If
        Next i

        If loc = -1 Then
            Exit Sub
        End If

        '        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutseq") = txtSeqP.Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_itmno") = txtItmNoP.Text

        'txtPckingP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_untcde") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_inrqty") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mtrqty") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cft") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cbm") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprctrm") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_prctrm") & " / " & _
        '                    rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_trantrm")

        'Formula section
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus1no") = txtCus1NoP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus2no") = txtCus2NoP.Text
        'txtVenTypP.Text = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_venno") = txtVenNoP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg") = txtVenTranP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_prctrm") = txtPrcTrmP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_trantrm") = txtTranTrmP.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde") = txtFtyCstCurrP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycst") = txtFtyCstP.Text
        '        txtFtyPrcCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde")
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprc") = txtFtyPrcP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde") = txtBasPrcCurrP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc") = txtBasPrcP.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin") = lblMUMinP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu") = IIf(IsNumeric(txtMUP.Text), txtMUP.Text, 0)

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muminprc") = txtMinMUPriceP.Text
        '        txtMUPriceCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = txtMUPriceP.Text

        '        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde") = txtPckCst1CurrP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper") = txtPckCst1P.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper") = txtComm1P.Text

        '        txtItmComm1CurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper") = txtItmComm1P.Text

        'txtCurCde2P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp") = txtCus1SpP.Text

        'txtCurCde21P.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1dp") = txtCus1DpP.Text

        '        lblApproveAmtP.Text = "Amt (" + txtCurCde2P.Text + ")"

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper") = txtCushCostBufPercP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper") = txtOtherDisLmtPercP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvper") = txtMaxApprovePercP.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cumu") = txtCustMUPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pm") = txtProMarPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cush") = txtCushPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper") = txtTHCCustPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upsper") = txtUPSPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_labper") = txtLabPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_faper") = txtFAPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cstbufper") = txtCostBufPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othper") = txtOthersPercChgP.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pliper") = txtPLIPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dmdper") = txtDefMDPercChgP.Text
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_rbtper") = txtRebatePercChgP.Text

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper") = txtSubTtlPercChgP.Text


        Call check_mu(loc)
        'txtSubTtlPercChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu")

        'txtPckCstAmtChgCurr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        'txtPckCstAmtChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper")

        'txtItmCommAmtChgCurr.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde")
        'txtItmCommAmtChgP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper")

        'txtStdPrcCurrP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
        'txtStdPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp")
    End Sub

    Private Function get_QUPRCEMT_CU(ByVal qutseq As Integer, ByVal cusno As String, ByVal cusno2 As String, ByVal ventyp As String, ByVal itmcat As String, ByVal venno As String, ByVal PrcTrm As String, ByVal TranTrm As String) As Boolean
        get_QUPRCEMT_CU = False

        Dim i As Integer
        i = 0

        Dim loc As Integer
        loc = -1

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") = qutseq Then
                loc = i
            End If
        Next i

        If loc = -1 Then
            Exit Function
        End If

        Dim tmp As New DataSet

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUPRCEMT_CU '','" & cusno & "','" & cusno2 & "','" & ventyp & "','" & itmcat & "','" & venno & "','" & PrcTrm & "','" & TranTrm & "'"
        rtnLong = execute_SQLStatement(gspStr, tmp, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading get_QUPRCEMT_CU sp_select_QUPRCEMT_CU :" & rtnStr)
            Exit Function
        End If

        If tmp.Tables("RESULT").Rows.Count > 0 Then
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cocde") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cocde")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutno") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutno")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_qutseq") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_qutseq")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_itmno") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmno")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_untcde") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_untcde")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_inrqty") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_inrqty")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mtrqty") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_mtrqty")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cft") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cft")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cbm") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cbm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprctrm") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprctrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_prctrm") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_prctrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_trantrm") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_trantrm")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus1no") = tmp.Tables("RESULT").Rows(0).Item("ccf_cus1no")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cus2no") = tmp.Tables("RESULT").Rows(0).Item("ccf_cus2no")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_cat") = tmp.Tables("RESULT").Rows(0).Item("ccf_cat")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_venno") = tmp.Tables("RESULT").Rows(0).Item("ccf_venno")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_prctrm") = tmp.Tables("RESULT").Rows(0).Item("ccf_prctrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_trantrm") = tmp.Tables("RESULT").Rows(0).Item("ccf_trantrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg") = tmp.Tables("RESULT").Rows(0).Item("ccf_ventranflg")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fcurcde") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_fcurcde")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftycst") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftycst")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_ftyprc") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_ftyprc")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_curcde") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_curcde")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_basprc")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper") = tmp.Tables("RESULT").Rows(0).Item("ccf_cush") + tmp.Tables("RESULT").Rows(0).Item("ccf_cstbufper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper") = tmp.Tables("RESULT").Rows(0).Item("ccf_upsper") + tmp.Tables("RESULT").Rows(0).Item("ccf_labper") + tmp.Tables("RESULT").Rows(0).Item("ccf_faper") + tmp.Tables("RESULT").Rows(0).Item("ccf_othper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_maxapvper") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper") + rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cumu") = tmp.Tables("RESULT").Rows(0).Item("ccf_cumu")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pm") = tmp.Tables("RESULT").Rows(0).Item("ccf_pm")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cush") = tmp.Tables("RESULT").Rows(0).Item("ccf_cush")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper") = tmp.Tables("RESULT").Rows(0).Item("ccf_thccusper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_upsper") = tmp.Tables("RESULT").Rows(0).Item("ccf_upsper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_labper") = tmp.Tables("RESULT").Rows(0).Item("ccf_labper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_faper") = tmp.Tables("RESULT").Rows(0).Item("ccf_faper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cstbufper") = tmp.Tables("RESULT").Rows(0).Item("ccf_cstbufper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othper") = tmp.Tables("RESULT").Rows(0).Item("ccf_othper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pliper") = tmp.Tables("RESULT").Rows(0).Item("ccf_pliper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_dmdper") = tmp.Tables("RESULT").Rows(0).Item("ccf_dmdper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_rbtper") = tmp.Tables("RESULT").Rows(0).Item("ccf_rbtper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper") = tmp.Tables("RESULT").Rows(0).Item("ccf_pkgper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper") = tmp.Tables("RESULT").Rows(0).Item("ccf_comper")
            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper") = tmp.Tables("RESULT").Rows(0).Item("ccf_icmper")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper") = tmp.Tables("RESULT").Rows(0).Item("ccf_cumu") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_pm") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_thccusper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_upsper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_labper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_faper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_cstbufper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_othper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_pliper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_dmdper") + _
                                                                            tmp.Tables("RESULT").Rows(0).Item("ccf_rbtper")

            rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu") = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper")

            get_QUPRCEMT_CU = True
        Else
            MsgBox("Item cannot be quoted due to no Quotation Pricing formula!")
            Exit Function
        End If
    End Function

    Public Sub calculate_gbPandelCstEmt(ByVal qutseq As Integer)
        Dim i As Integer
        i = 0

        Dim loc As Integer
        loc = -1

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") = qutseq Then
                loc = i
            End If
        Next i

        If loc = -1 Then
            Exit Sub
        End If

        Dim calBasicPrice As Decimal

        Dim calMarkup_Org As Decimal
        Dim calMarkup_Usr As Decimal

        Dim calPckCstAmt As Decimal
        Dim calCommPer As Decimal
        Dim calCommAmt As Decimal

        Dim calCURounding As Integer

        ' StdPrc = BP * MU Org = MU Prc Org + PckCst Amt * CommPer + CommAmt
        ' AdjPrc = BP * MU Usr = MU Prc Usr + PckCst Amt * CommPer + CommAmt

        ''avoid DBNULL
        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > loc Then
            Exit Sub
        End If

        calBasicPrice = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc")
        calMarkup_Org = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_subttlper")
        calMarkup_Usr = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu")

        calPckCstAmt = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper")
        calCommPer = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper")
        calCommAmt = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper")

        calCURounding = cus1_rounding'temporary hard code : used in Standard Price and Adjusted Price


        Dim calMarkupPrice_Org As Decimal
        Dim calMarkupPrice_Usr As Decimal
        Dim calMinMarkupPrice As Decimal

        Dim resStandardPrice As Decimal
        Dim resAdjustedPrice As Decimal

        '1. Calculate Standard Price
        If calMarkup_Org <> 100 Then
            calMarkupPrice_Org = round(calBasicPrice / ((1 - calMarkup_Org / 100)), 4)
        End If
        If calCommPer <> 100 Then
            resStandardPrice = round(round((calMarkupPrice_Org + calPckCstAmt) / ((1 - calCommPer / 100)), 4) + round(calCommAmt, 4), calCURounding)
        End If

        '2 Calculate Adjusted Price
        If calMarkup_Usr <> 100 Then
            calMarkupPrice_Usr = round(calBasicPrice / ((1 - calMarkup_Usr / 100)), 4)
        End If

        If calCommPer <> 100 Then
            resAdjustedPrice = round(round((calMarkupPrice_Usr + calPckCstAmt) / ((1 - calCommPer / 100)), 4) + round(calCommAmt, 4), calCURounding)
        End If

        '3 Calculate Minimun Markup
        Dim calCushCstbufPer As Decimal
        Dim calOthDisPer As Decimal
        Dim calThcCusPer As Decimal
        Dim calVenTranFlag As String

        calCushCstbufPer = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cushcstbufper")
        calOthDisPer = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_othdisper")
        calThcCusPer = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_thccusper")
        calVenTranFlag = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_fml_ventranflg")

        Dim resMinMarkupPer As Decimal

        If calVenTranFlag = "Y" Then
            resMinMarkupPer = calMarkup_Org - calCushCstbufPer - calOthDisPer - calThcCusPer
        Else
            resMinMarkupPer = calMarkup_Org - calCushCstbufPer - calOthDisPer
        End If

        '4 Calculate Minimum Markup Price
        Dim resMinMarkupPrc As Decimal
        'resMinMarkupPrc = round(((calBasicPrice / (1 - resMinMarkupPer / 100)) / (1 - calCommPer / 100)) + calPckCstAmt + calCommAmt, calCURounding)
        Dim calMinMarkupPrc As Decimal
        calMinMarkupPrc = round(calBasicPrice / ((1 - resMinMarkupPer / 100)), 4)
        resMinMarkupPrc = round(round((calMinMarkupPrc + calPckCstAmt) / ((1 - calCommPer / 100)), 4) + round(calCommAmt, 4), calCURounding)


        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin") = resMinMarkupPer
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = calMarkupPrice_Usr
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muminprc") = resMinMarkupPrc
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper") = calPckCstAmt
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper") = calCommPer
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper") = calCommAmt

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1sp") = resStandardPrice
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_cus1dp") = resAdjustedPrice

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1sp") = resStandardPrice
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1dp") = resAdjustedPrice

        Call check_mu(sReadingIndexQ)


        '5 Calculate Sample Price
        Dim strUM As String
        Dim samplePrice As Decimal
        Dim itmtyp As String
        Dim umftr As Decimal
        

        '20131017
        If cboCus2No.Text <> "" Then
            If optGM.Checked = True Then
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, resStandardPrice)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If

                If txtCus1Dp.Text = "" Then
                    txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, resAdjustedPrice)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If
            Else
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, resStandardPrice)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                End If

                If txtCus1Dp.Text = "" Then
                    txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                Else
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, resAdjustedPrice)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                End If
            End If
        End If

        either_cus1dp_or_cus2dp = resAdjustedPrice
        If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
            If optGM.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
            ElseIf optMU.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
            End If
        End If


        strUM = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_untcde")
        gspStr = "sp_select_CUBASINF_Q '','" & strUM & "','Conversion'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYCONFTR, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading calculate_gbPandelCstEmt sp_select_CUBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
            samplePrice = Format(round(either_cus1dp_or_cus2dp, calCURounding), "###,###,##0.000000")
        Else
            samplePrice = Format(round(either_cus1dp_or_cus2dp / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), calCURounding), "###,###,##0.000000")
        End If

        itmtyp = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmtyp")
        'default
        umftr = 1

     If itmtyp = "ASS" Then
            If Not IsNumeric(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr")) Then
                umftr = 1
            Else
                umftr = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr")
            End If

            samplePrice = Format(round(either_cus1dp_or_cus2dp / umftr, calCURounding), "###,###,##0.000000")
        Else

            '''20140211
            If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
                umftr = 1
            Else
                umftr = rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")
            End If
            samplePrice = Format(round(either_cus1dp_or_cus2dp / umftr, calCURounding), "###,###,##0.000000")

        End If

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpprc") = samplePrice
        '20130909
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_pcprc") = samplePrice
        txtPCPrc.Text = samplePrice
        txtPCPrc_Text_round_5 = samplePrice


        Dim convertToPCFlag As String
        convertToPCFlag = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_contopc")

        If convertToPCFlag = "Y" Then
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If optGM.Checked = True Then
                    ''
                    txtCus2Dp.Text = txtPCPrc_Text_round_5 * umftr

                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                ElseIf optMU.Checked = True Then
                    ''

                    txtCus2Dp.Text = txtPCPrc_Text_round_5 * umftr

                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                Else

                    txtCus1Dp.Text = txtPCPrc_Text_round_5 * umftr

                    txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If
            Else

                txtCus1Dp.Text = txtPCPrc_Text_round_5 * umftr

                txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
            End If
        End If

    End Sub

    Private Function check_QuotationHeader() As Boolean
        check_QuotationHeader = False

		     '''20140211
        Call set_qutsts()

        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        '*** Primary Customer
        If cboCus1No.Text <> "" And cboCus1No.Enabled = True And cboCus1No.Items.Count > 0 Then
            inCombo = False
            i = cboCus1No.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus1No.Text) = Trim(cboCus1No.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                'If no_need_check_btcindex = False Then
                MsgBox("Primary Customer - Data is Invalid, please select in Drop Down List.")
                'End If
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboCus1No.Enabled = True
                If cboCus1No.Enabled And cboCus1No.Visible Then cboCus1No.Focus()
                Exit Function
            End If
        End If

        '*** Contact Person - Primary Customer
        If cboCus1Cp.Text <> "" And cboCus1Cp.Enabled = True And cboCus1Cp.Items.Count > 0 Then
            inCombo = False
            i = cboCus1Cp.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus1Cp.Text) = Trim(cboCus1Cp.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Primary Customer - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                cboCus1Cp.Enabled = True
                If cboCus1Cp.Enabled And cboCus1Cp.Visible Then cboCus1Cp.Focus()
                Exit Function
            End If
        End If

        '*** Secondary Customer
        If cboCus2No.Text <> "" And cboCus2No.Enabled = True And cboCus2No.Items.Count > 0 Then
            inCombo = False
            i = cboCus2No.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus2No.Text) = Trim(cboCus2No.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Secondary Customer - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboCus2No.Enabled = True
                If cboCus2No.Enabled And cboCus2No.Visible Then cboCus2No.Focus()
                Exit Function
            End If
        End If

        '*** Contact Person - Secondary Customer
        If cboCus2Cp.Text <> "" And cboCus2Cp.Enabled = True And cboCus2Cp.Items.Count > 0 Then
            inCombo = False
            i = cboCus2Cp.Items.Count
            For Y = 0 To i - 1
				If Trim(cboCus2Cp.Text) = Trim(Replace(cboCus2Cp.Items(Y), vbCrLf, "")) Then
                'If Trim(cboCus2Cp.Text) = Trim(cboCus2Cp.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Secondary Customer - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboCus2Cp.Enabled = True
                If cboCus2Cp.Enabled And cboCus2Cp.Visible Then cboCus2Cp.Focus()
                Exit Function
            End If
        End If

        '*** Agent
        If cboCusAgt.Text <> "" And cboCusAgt.Enabled = True And cboCusAgt.Items.Count > 0 Then
            inCombo = False
            i = cboCusAgt.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCusAgt.Text) = Trim(cboCusAgt.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Agent - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboCusAgt.Enabled = True
                If cboCusAgt.Enabled And cboCusAgt.Visible Then cboCusAgt.Focus()
                Exit Function
            End If
        End If

        '*** Phase 2
        '*** Sales Division (Team)
        If cboSalDiv.Text <> "" And cboSalDiv.Enabled = True And cboSalDiv.Items.Count > 0 Then
            inCombo = False
            i = cboSalDiv.Items.Count
            For Y = 0 To i - 1
                If Trim(cboSalDiv.Text) = Trim(cboSalDiv.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Sales Division (Team) - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboSalDiv.Enabled = True
                If cboSalDiv.Enabled And cboSalDiv.Visible Then cboSalDiv.Focus()
                Exit Function
            End If
        End If

        '*** Sales Rep
        If cboSalRep.Text = "" Then
            If Trim(cboCus1No.Text) <> "" Then

                MsgBox("Sales Rep - Data is Invalid, please select in Drop Down List.")
                cboSalRep.Enabled = True
            End If
            '   MsgBox("Sales Rep - Data is Invalid, please select in Drop Down List.")
            ''btcQUM00001.SelectedIndex = 0
            'no_need_check_btcindex = True
            'cboSalRep.Enabled = True
            If cboSalRep.Enabled And cboSalRep.Visible Then cboSalRep.Focus()
            Exit Function
        ElseIf cboSalRep.Text <> "" And cboSalRep.Enabled = True And cboSalRep.Items.Count > 0 Then
            inCombo = False
            i = cboSalRep.Items.Count
            For Y = 0 To i - 1
                If Trim(cboSalRep.Text) = Trim(cboSalRep.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Sales Rep - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                'no_need_check_btcindex = True
                cboSalRep.Enabled = True
                If cboSalRep.Enabled And cboSalRep.Visible Then cboSalRep.Focus()
                Exit Function
            End If
        End If


        '*** Phase 2
        If cboYear.Text = "" And cboYear.Enabled = True Then
            '''btcQUM00001.SelectedIndex = 0
            'no_need_check_btcindex = True

            MsgBox("Quotation Title - Year, must be assigned.")

            cboYear.Enabled = True

            If cboYear.Enabled And cboYear.Visible Then cboYear.Focus()
            Exit Function
        End If

        '*** Phase 2
        If cboSeason.Text = "" And cboSeason.Enabled = True Then
            ''btcQUM00001.SelectedIndex = 0
            'no_need_check_btcindex = True
            MsgBox("Quotation Title - Season, must be assigned.")
            cboSeason.Enabled = True
            If cboSeason.Enabled And cboSeason.Visible Then cboSeason.Focus()
            Exit Function
        End If

        '*** Phase 2
        If txtDesc.Text = "" And txtDesc.Enabled = True Then
            ''btcQUM00001.SelectedIndex = 0
            MsgBox("Quotation Title - Project, must be entered.")
            txtDesc.Enabled = True
            If txtDesc.Enabled And txtDesc.Visible Then txtDesc.Focus()
            Exit Function
        End If

        If cboSmpPrd.Text = "" And cboSmpPrd.Enabled = True Then
            ''btcQUM00001.SelectedIndex = 0
            'no_need_check_btcindex = True

            MsgBox("Sample Product Term must be assigned, please update Customer Master first.")
            cboSmpPrd.Enabled = True
            If cboSmpPrd.Enabled And cboSmpPrd.Visible Then cboSmpPrd.Focus()
            Exit Function
        End If

        If cboSmpFgt.Text = "" And cboSmpFgt.Enabled = True Then
            ''btcQUM00001.SelectedIndex = 0
            'no_need_check_btcindex = True

            MsgBox("Sample Freight Term must be assigned, please update Customer Master first.")
            cboSmpFgt.Enabled = True
            If cboSmpFgt.Enabled And cboSmpFgt.Visible Then cboSmpFgt.Focus()
            Exit Function
        End If

        check_QuotationHeader = True
    End Function

    Private Function check_QuotationDetail() As Boolean
        check_QuotationDetail = False

        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        '*** Vender Item No Vendor Code
        If txtItmNoVen.Text <> "" Then
            If cboItmNoVen.text <> "" And cboItmNoVen.Enabled = True And cboItmNoVen.Items.Count > 0 Then
                inCombo = False
                i = cboItmNoVen.Items.Count
                For Y = 0 To i - 1
                    If Trim(cboItmNoVen.Text) = Trim(cboItmNoVen.Items(Y).ToString) Then
                        inCombo = True
                    End If
                Next

                If inCombo = False And cboItmNoVen.Enabled = True Then
                    MsgBox("Vendor Code for Vendor Item - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboItmNoVen.Enabled = True
                    If cboItmNoVen.Enabled And cboItmNoVen.Visible Then cboItmNoVen.Focus()
                    Exit Function
                End If
            End If

            If cboItmNoVen.text = "" And cboItmNoVen.Enabled = True Then
                MsgBox("Vendor Code for Vendor Item - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboItmNoVen.Enabled = True
                If cboItmNoVen.Enabled And cboItmNoVen.Visible Then cboItmNoVen.Focus()
                Exit Function
            End If
        End If

        If txtItmNoVen.Text = "" Then
            '*** Color Code
            If cboColCde.Text <> "" And cboColCde.Enabled = True And cboColCde.Items.Count > 0 Then
                inCombo = False
                i = cboColCde.Items.Count
                For Y = 0 To i - 1
                    If cboColCde.Text = cboColCde.Items(Y).ToString Then
                        inCombo = True
                    End If
                Next

                If inCombo = False And cboColCde.Enabled = True Then
                    MsgBox("Color Code - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboColCde.Enabled = True
                    If cboColCde.Enabled And cboColCde.Visible Then cboColCde.Focus()
                    Exit Function
                End If
            End If

            If cboColCde.Text = "" And cboColCde.Enabled = True Then
                MsgBox("Color Code - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboColCde.Enabled = True
                If cboColCde.Enabled And cboColCde.Visible Then cboColCde.Focus()
                Exit Function
            End If

            '*** Packing
            If cboPcking.Text <> "" And cboPcking.Enabled = True And cboPcking.Items.Count > 0 Then
                inCombo = False
                i = cboPcking.Items.Count
                For Y = 0 To i - 1
                    If cboPcking.Text = cboPcking.Items(Y).ToString Then
                        inCombo = True
                    End If
                Next

                If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
                    MsgBox("Please input Item No.")
                    btcQUM00001.SelectedIndex = 1
                    Exit Function
                End If

                If inCombo = False And cboPcking.Enabled = True Then
                    MsgBox("Packing - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboPcking.Enabled = True
                    If cboPcking.Enabled And cboPcking.Visible Then cboPcking.Focus()
                    Exit Function
                End If
            End If

            '*** Phase 2
            If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" _
            And chkDelete.Checked = False Then
                MsgBox("Please input Item No.")
                btcQUM00001.SelectedIndex = 1
                Exit Function
            End If

            If cboPcking.Text = "" Or Trim(cboPcking.Text) = " / 0 / 0 / 0 / 0 / / /" Then
                'If cboPcking.Text = "" Or Trim(cboPcking.Text) = "/ 0 / 0" Then
                MsgBox("Packing - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboPcking.Enabled = True
                If cboPcking.Enabled And cboPcking.Visible Then cboPcking.Focus()
                Exit Function
            End If
        End If

        'If Trim(txtCus1Dp.Text) = "" Then
        '    txtCus1Dp.Text = 0
        'End If


        '*** Check CFT and Mtr (Inch)
        Dim dblTmp As Double

        If Trim(txtMtrdin.Text) = "" Then
            txtMtrdin.Text = "0"
        End If

        If Trim(txtMtrwin.Text) = "" Then
            txtMtrwin.Text = "0"
        End If

        If Trim(txtMtrhin.Text) = "" Then
            txtMtrhin.Text = "0"
        End If

        If txtMtrdin.Text <> "0" And txtMtrwin.Text <> "0" And txtMtrhin.Text <> "0" Then
            dblTmp = (CDbl(IIf(txtMtrdin.Text = "", 0, txtMtrdin.Text)) * CDbl(IIf(txtMtrwin.Text = "", 0, txtMtrwin.Text)) * CDbl(IIf(txtMtrhin.Text = "", 0, txtMtrhin.Text))) / 1728

            If Trim(txtCft.Text) = "" Then
                txtCft.Text = "0"
            End If

            If dblTmp <> 0 And CDbl(IIf(txtCft.Text = "", 0, txtCft.Text)) <> 0 Then
                dblTmp = (dblTmp - CDbl(IIf(txtCft.Text = "", 0, txtCft.Text))) / CDbl(IIf(txtCft.Text = "", 0, txtCft.Text))

                If dblTmp > 0.03 Then
                    MsgBox("Master (in) LxWxH is 3% over than CFT.")
                ElseIf dblTmp < -0.03 Then
                    MsgBox("Master (in) LxWxH is 3% less than CFT.")
                End If
            End If
        End If

        'If txtItmNo.Text = "" Then
        '    btcQUM00001.SelectedIndex = 1

        '    MsgBox("Please input Item No.")

        '    txtItmNoReal.Enabled = True
        '    txtItmNoTmp.Enabled = True
        '    txtItmNoVen.Enabled = True

        '    txtItmNoReal.Focus()
        '    Exit Function
        'End If


        If CDec(IIf(txtDiscnt.Text = "", 0, txtDiscnt.Text)) > 100 Then
            '*** Phase 2
            btcQUM00001.SelectedIndex = 1
            Discount_Flag = True
            txtDiscnt.Text = "0"
            MsgBox("Discount cannot large than 100%.")
            txtDiscnt.Enabled = True
            If txtDiscnt.Enabled And txtDiscnt.Visible Then txtDiscnt.Focus()
            Exit Function
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
            btcQUM00001.SelectedIndex = 1
            MsgBox("This Quotation has no item record, cannot save.")
            Exit Function
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 And chkDelete.Checked = True Then
            btcQUM00001.SelectedIndex = 1
            MsgBox("This Quotation only has one item record, cannot delete.")
            Exit Function
        End If

        'If Trim(txtGrswgt.Text) = "" Then
        '    txtGrswgt.Text = "0"
        'End If

        'If Trim(txtNetwgt.Text) = "" Then
        '    txtNetwgt.Text = "0"
        'End If

        If CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) >= 1000 Then
            MsgBox("Gross weight should be less than 1000!")
            Exit Function
        End If

        If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) >= 1000 Then
            MsgBox("Net weight should not less than 1000!")
            Exit Function
        End If

        If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) > CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) Then
            MsgBox("Gross weight should not be smaller than net weight!")
            Exit Function
        End If

        check_QuotationDetail = True
    End Function

    Private Function check_all_items() As Boolean
        check_all_items = False
        Dim i As Integer
        Dim qutseq As Integer
        Dim find_sReadingIndexQ As Integer

        Dim qutitmno_real As String
        Dim qutitmno_tmp As String
        Dim qutitmno_ven As String
        Dim qutitmno_venno As String

        Dim tmp_thirdroad_venno_wrong As Boolean

        qutitmno_real = txtItmNoReal.Text
        qutitmno_tmp = txtItmNoTmp.Text
        qutitmno_ven = txtItmNoVen.Text
        qutitmno_venno = cboItmNoVen.text

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1

            If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")) Then
                Exit Function
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("del") <> "Y" Then


                qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")
                qutitmno_real = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnoreal").ToString.Trim
                qutitmno_tmp = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnotmp").ToString.Trim
                qutitmno_ven = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnoven").ToString.Trim

                For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                    If rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_qutseq") = qutseq Then
                        find_sReadingIndexQ = index
                    End If
                Next

                'If (qutitmno_real = "" And qutitmno_tmp = "" And qutitmno_ven = "") _
                '        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_basprc") = 0) _
                '        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cus1sp") = 0) _
                '        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mumin") = 0) _
                '        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mu") = 0) _
                '        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_colcde") = "") _
                '                         Then
                tmp_thirdroad_venno_wrong = False

                If qutitmno_ven <> "" Then '3rd road
                    If InStr(rs_QUOTNDTL.Tables("RESULT").Rows(i)("qud_itmnovenno").ToString, " - ") - 1 >= 0 Then

                        If Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(0)) > 1000 And _
                        Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(0)) < 9999 _
                                    Then
                            'reverse
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno") = Reverse_hyphen_one_two(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"))
                        Else
                        End If
                    Else
                        tmp_thirdroad_venno_wrong = True
                    End If
                End If





                If (qutitmno_real = "" And qutitmno_tmp = "" And qutitmno_ven = "") _
                        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_basprc") = 0) _
                        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cus1sp") = 0) _
                        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mu") = 0) _
                        Or ((qutitmno_real <> "" Or qutitmno_tmp <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_colcde") = "") _
                        Or ((qutitmno_ven <> "") And rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_colcde") = "") _
                        Or ((qutitmno_ven <> "") And Val(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyprc")) = 0) _
                        Or ((qutitmno_ven <> "") And tmp_thirdroad_venno_wrong = True) _
                                         Then
                    MsgBox("Item Number/color  could not be empty, and Price/formula/ven# should be valid !")
                    'Call insert_QUOTNDTL(False)
                    sReadingIndexQ = find_sReadingIndexQ
                    txtSeq.Text = qutseq
                    Call display_Detail(txtSeq.Text)

                    'Call reset_detail_control("Detail_Init", "All")
                    'Call reset_detail_data("Detail_Init", "All")
                    btcQUM00001.SelectedIndex = 1
                    txtItmNoReal.Enabled = True
                    txtItmNoTmp.Enabled = True
                    txtItmNoVen.Enabled = True
                    cboItmNoVen.Enabled = True


                    txtItmNoReal.Focus()

                    If qutitmno_ven <> "" Then
                        txtItmNoVen.Focus()
                    End If



                    Exit Function
                End If
            End If

        Next i

        check_all_items = True
    End Function

    Private Sub check_update_QuotationDetail()
        'Check Quotation Detail Status


    End Sub

    Private Function save_QuotationHeader() As Boolean
        save_QuotationHeader = False

        Dim QUH_COCDE As String
        Dim QUH_QUTNO As String
        Dim QUH_ISSDAT As String
        Dim QUH_RVSDAT As String
        Dim QUH_CUS1NO As String
        Dim QUH_CUS2NO As String
        Dim QUH_RELATN As String
        Dim QUH_CUS1AD As String
        Dim QUH_CUS2AD As String
        Dim QUH_CUS1ST As String
        Dim QUH_CUS1CY As String
        Dim QUH_CUS1ZP As String
        Dim QUH_CUS2ST As String
        Dim QUH_CUS2CY As String
        Dim QUH_CUS2ZP As String
        Dim QUH_CUS1CP As String
        Dim QUH_CUS2CP As String
        Dim QUH_SALREP As String
        Dim QUH_CUSAGT As String
        Dim QUH_VALDAT As String
        Dim QUH_SMPPRD As String
        Dim QUH_SMPFGT As String
        Dim QUH_PRCTRM As String
        Dim QUH_PAYTRM As String
        Dim QUH_CURCDE As String
        Dim QUH_QUTSTS As String
        Dim QUH_RMK As String
        Dim QUH_CONALLTOPC As String
        Dim QUH_YEAR As String
        Dim QUH_SEASON As String
        Dim QUH_DESC As String
        Dim QUH_QUPLUS As String
        Dim QUH_QUMINUS As String
        Dim QUH_CUREXRAT As String
        Dim QUH_CUREXEFFDAT As String
        Dim QUH_CUGRPTYP_INT As String
        Dim QUH_CUGRPTYP_EXT As String
        Dim QUH_DEPT As String
        Dim QUH_SALDIVTEM As String
        Dim QUH_SRNAME As String
        Dim quh_ftyshpstr As String
        Dim quh_ftyshpend As String
        Dim quh_cushpstr As String
        Dim quh_cushpend As String
        Dim QUH_CREUSR As String

        QUH_COCDE = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde")
        QUH_QUTNO = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutno")
        QUH_ISSDAT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_issdat")
        QUH_RVSDAT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rvsdat")
        QUH_CUS1NO = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1no"), " - ")(0)


        If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no")) Then
            QUH_CUS2NO = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2no")) = True, "", Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2no"), " - ")(0))
            QUH_CUS2ST = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2st"), "'", "''")
            QUH_CUS2CY = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cy"), "'", "''")
            QUH_CUS2ZP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2zp"), "'", "''")
            QUH_CUS2CP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cp"), "'", "''")

            QUH_CUS2AD = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2ad"), "'", "''")
        Else
            QUH_CUS2NO = ""
            QUH_CUS2ST = ""
            QUH_CUS2CY = ""
            QUH_CUS2ZP = ""
            QUH_CUS2CP = ""

            QUH_CUS2AD = ""
        End If



        'QUH_CUS2NO = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2no")) = True, "", Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2no"), " - ")(0))

        QUH_RELATN = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_relatn")
        QUH_CUS1AD = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1ad"), "'", "''")
        'QUH_CUS2AD = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2ad"), "'", "''")
        QUH_CUS1ST = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1st"), "'", "''")
        QUH_CUS1CY = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cy"), "'", "''")
        QUH_CUS1ZP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1zp"), "'", "''")
        'QUH_CUS2ST = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2st"), "'", "''")
        'QUH_CUS2CY = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cy"), "'", "''")
        'QUH_CUS2ZP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2zp"), "'", "''")
        QUH_CUS1CP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cp"), "'", "''")
        'QUH_CUS2CP = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cp"), "'", "''")
        QUH_SALREP = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_salrep")
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cusagt") = "" Then
            QUH_CUSAGT = ""
        Else
            QUH_CUSAGT = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cusagt"), " - ")(0)
        End If
        QUH_VALDAT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_valdat")
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpprd") = "" Then
            QUH_SMPPRD = ""
        Else
            QUH_SMPPRD = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpprd"), " - ")(0)
        End If
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpfgt") = "" Then
            QUH_SMPFGT = ""
        Else
            QUH_SMPFGT = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpfgt"), " - ")(0)
        End If
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_prctrm") = "" Then
            QUH_PRCTRM = ""
        Else
            QUH_PRCTRM = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_prctrm"), " - ")(0)
        End If
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_paytrm") = "" Then
            QUH_PAYTRM = ""
        Else
            QUH_PAYTRM = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_paytrm"), " - ")(0)
        End If
        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curcde") = "" Then
            QUH_CURCDE = ""
        Else
            QUH_CURCDE = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curcde"), " - ")(0)
        End If
        QUH_QUTSTS = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutsts")) = True, "A", Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutsts"), " - ")(0))
        QUH_RMK = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rmk"), "'", "''")
        QUH_CONALLTOPC = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_conalltopc")
        QUH_YEAR = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Year")
        QUH_SEASON = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Season")
        QUH_DESC = Replace(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Desc"), "'", "''")
        QUH_QUPLUS = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_quplus")
        QUH_QUMINUS = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_quminus")
        QUH_CUREXRAT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curexrat")
        QUH_CUREXEFFDAT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curexeffdat")
        QUH_CUGRPTYP_INT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cugrptyp_int")
        QUH_CUGRPTYP_EXT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cugrptyp_ext")
        QUH_DEPT = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_dept")
        QUH_SALDIVTEM = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_saldivtem")
        ''bug
        If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname")) Then

            If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname") = "" Then
                QUH_SRNAME = ""
            Else
                QUH_SRNAME = Split(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname"), "(")(1)
                QUH_SRNAME = QUH_SRNAME.Substring(0, QUH_SRNAME.Length - 1)
            End If
        End If

        quh_ftyshpstr = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr")
        quh_ftyshpend = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend")
        quh_cushpstr = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr")
        quh_cushpend = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend")

        QUH_CREUSR = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr")

        If QUH_CREUSR = "~*ADD*~" Or QUH_CREUSR = "~*NEW*~" Then
            gspStr = "sp_insert_QUOTNHDR '" & QUH_COCDE & "','" & QUH_QUTNO & "','" & QUH_ISSDAT & "','" & QUH_RVSDAT & "','" & QUH_CUS1NO & "','" & _
                                                QUH_CUS2NO & "','" & QUH_RELATN & "','" & QUH_CUS1AD & "','" & QUH_CUS2AD & "','" & QUH_CUS1ST & "','" & _
                                                QUH_CUS1CY & "','" & QUH_CUS1ZP & "','" & QUH_CUS2ST & "','" & QUH_CUS2CY & "','" & QUH_CUS2ZP & "','" & _
                                                QUH_CUS1CP & "','" & QUH_CUS2CP & "','" & QUH_SALREP & "','" & QUH_CUSAGT & "','" & QUH_VALDAT & "','" & _
                                                QUH_SMPPRD & "','" & QUH_SMPFGT & "','" & QUH_PRCTRM & "','" & QUH_PAYTRM & "','" & QUH_CURCDE & "','" & _
                                                QUH_QUTSTS & "','" & QUH_RMK & "','" & QUH_CONALLTOPC & "','" & QUH_YEAR & "','" & QUH_SEASON & "','" & _
                                                QUH_DESC & "','" & QUH_QUPLUS & "','" & QUH_QUMINUS & "','" & QUH_CUREXRAT & "','" & QUH_CUREXEFFDAT & "','" & _
                                                QUH_CUGRPTYP_INT & "','" & QUH_CUGRPTYP_EXT & "','" & QUH_DEPT & "','" & QUH_SALDIVTEM & "','" & QUH_SRNAME & "','" & _
                                                quh_ftyshpstr & "','" & quh_ftyshpend & "','" & quh_cushpstr & "','" & quh_cushpend & "','" & _
                                                gsUsrID & "'"
            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading save_IMBASINF sp_insert_IMBASINF :" & rtnStr)
                save_QuotationHeader = False
                Exit Function
            End If
        ElseIf QUH_CREUSR = "~*UPD*~" Then
            gspStr = "sp_update_QUOTNHDR '" & QUH_COCDE & "','" & QUH_QUTNO & "','" & QUH_ISSDAT & "','" & QUH_RVSDAT & "','" & QUH_CUS1NO & "','" & _
                                                QUH_CUS2NO & "','" & QUH_RELATN & "','" & QUH_CUS1AD & "','" & QUH_CUS2AD & "','" & QUH_CUS1ST & "','" & _
                                                QUH_CUS1CY & "','" & QUH_CUS1ZP & "','" & QUH_CUS2ST & "','" & QUH_CUS2CY & "','" & QUH_CUS2ZP & "','" & _
                                                QUH_CUS1CP & "','" & QUH_CUS2CP & "','" & QUH_SALREP & "','" & QUH_CUSAGT & "','" & QUH_VALDAT & "','" & _
                                                QUH_SMPPRD & "','" & QUH_SMPFGT & "','" & QUH_PRCTRM & "','" & QUH_PAYTRM & "','" & QUH_CURCDE & "','" & _
                                                QUH_QUTSTS & "','" & QUH_RMK & "','" & QUH_CONALLTOPC & "','" & QUH_YEAR & "','" & QUH_SEASON & "','" & _
                                                QUH_DESC & "','" & QUH_QUPLUS & "','" & QUH_QUMINUS & "','" & QUH_CUREXRAT & "','" & QUH_CUREXEFFDAT & "','" & _
                                                QUH_CUGRPTYP_INT & "','" & QUH_CUGRPTYP_EXT & "','" & QUH_DEPT & "','" & QUH_SALDIVTEM & "','" & QUH_SRNAME & "','" & _
                                                quh_ftyshpstr & "','" & quh_ftyshpend & "','" & quh_cushpstr & "','" & quh_cushpend & "','" & _
                                                    gsUsrID & "'"
            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading save_IMBASINF sp_update_IMBASINF :" & rtnStr)
                save_QuotationHeader = False
                Exit Function
            End If
        End If
        save_QuotationHeader = True
    End Function

    Private Function save_QuotationDetail() As Boolean
        save_QuotationDetail = False

        If save_QUOTNDTL() = False Then
            Exit Function
        End If

        If save_IMCUSSTY() = False Then
            Exit Function
        End If

        If save_QUPRCEMT() = False Then
            Exit Function
        End If

        If save_QUCPTBKD() = False Then
            Exit Function
        End If

        If save_QUASSINF() = False Then
            Exit Function
        End If

        If save_QUDTLSHP() = False Then
            Exit Function
        End If

        save_QuotationDetail = True
    End Function

    Private Function save_QUOTNDTL() As Boolean
        save_QUOTNDTL = False
        gi_saved_items_count = 0

        Dim DEL_FLAG As String
        Dim QUD_COCDE As String
        Dim QUD_QUTNO As String
        Dim QUD_QUTSEQ As String
        Dim QUD_ITMNO As String
        Dim QUD_ITMSTS As String
        Dim QUD_ITMDSC As String
        Dim QUD_ALSITMNO As String
        Dim QUD_ALSCOLCDE As String
        Dim QUD_CONFTR As String
        Dim QUD_CONTOPC As String
        Dim QUD_PCPRC As String
        Dim QUD_HSTREF As String
        Dim QUD_COLCDE As String
        Dim QUD_CUSCOL As String
        Dim QUD_COLDSC As String
        Dim QUD_PCKSEQ As String
        Dim QUD_UNTCDE As String
        Dim QUD_INRQTY As String
        Dim QUD_MTRQTY As String
        Dim QUD_CFT As String
        Dim QUD_CURCDE As String
        Dim QUD_CUS1SP As String
        Dim QUD_CUS2SP As String
        Dim QUD_CUS1DP As String
        Dim QUD_CUS2DP As String
        Dim QUD_ONETIM As String
        Dim QUD_DISCNT As String
        Dim QUD_MOFLAG As String
        Dim QUD_ORGMOQ As String
        Dim QUD_ORGMOA As String
        Dim QUD_MOQ As String
        Dim QUD_MOA As String
        Dim QUD_SMPQTY As String
        Dim QUD_HRMCDE As String
        Dim QUD_DTYRAT As String
        Dim QUD_DEPT As String
        Dim QUD_CUSUSD As String
        Dim QUD_CUSCAD As String
        Dim QUD_VENNO As String
        Dim QUD_SUBCDE As String
        Dim QUD_VENITM As String
        Dim QUD_FTYPRC As String
        Dim QUD_FTYCST As String
        Dim QUD_NOTE As String
        Dim QUD_IMAGE As String
        Dim QUD_INRDIN As String
        Dim QUD_INRWIN As String
        Dim QUD_INRHIN As String
        Dim QUD_MTRDIN As String
        Dim QUD_MTRWIN As String
        Dim QUD_MTRHIN As String
        Dim QUD_INRDCM As String
        Dim QUD_INRWCM As String
        Dim QUD_INRHCM As String
        Dim QUD_MTRDCM As String
        Dim QUD_MTRWCM As String
        Dim QUD_MTRHCM As String
        Dim QUD_GRSWGT As String
        Dim QUD_NETWGT As String
        Dim QUD_COSMTH As String
        Dim QUD_SMPPRC As String
        Dim QUD_CUSITM As String
        Dim CUS1NO As String
        Dim CUS1NA As String
        Dim CUS2NO As String
        Dim CUS2NA As String
        Dim QUD_PRCSEC As String
        Dim QUD_GRSMGN As String
        Dim QUD_BASPRC As String
        Dim QUD_TBM As String
        Dim QUD_TBMSTS As String
        Dim RVSDAT As String
        Dim QUD_APPRVE As String
        Dim QUD_PDABPDIFF As String
        Dim QUD_PCKITR As String
        Dim QUD_STKQTY As String
        Dim QUD_CUSQTY As String
        Dim QUD_SMPUNT As String
        Dim QUD_QUTITMSTS As String
        Dim QUD_FCURCDE As String
        Dim SMPPRD As String
        Dim QUD_ITMTYP As String
        Dim QUH_QUTSTS As String
        Dim QUD_PRCTRM As String
        Dim QUD_CUSVEN As String
        Dim QUD_CUSSUB As String
        Dim QUD_FTYPRCTRM As String
        Dim QUD_CUSSTYNO As String
        Dim QUD_CBM As String
        Dim QUD_UPC As String
        Dim QUD_SPECPCK As String
        Dim QUD_FTYTMPITM As String
        Dim QUD_FTYTMPITMNO As String
        Dim QUD_CUSTITMCAT As String
        Dim QUD_CUSTITMCATFML As String
        Dim QUD_CUSTITMCATAMT As String
        Dim QUD_PMU As String
        Dim QUD_IMRMK As String
        Dim QUD_RNDSTS As String
        Dim QUD_CALPMU As String
        Dim QUD_MOQUNTTYP As String
        Dim QUD_QUTDAT As String
        Dim QUD_CUS1NO As String
        Dim QUD_CUS2NO As String
        Dim QUD_TRANTRM As String
        Dim QUD_EFFDAT As String
        Dim QUD_EXPDAT As String
        Dim QUD_ITMNOTYP As String
        Dim QUD_ITMNOREAL As String
        Dim QUD_ITMNOTMP As String
        Dim QUD_ITMNOVEN As String
        Dim QUD_ITMNOVENNO As String
        Dim QUD_IMGPTH As String
        Dim QUD_CUSUSDCUR As String
        Dim QUD_CUSCADCUR As String
        Dim QUD_DV As String
        Dim QUD_TV As String
        Dim QUD_FTYAUD As String
        Dim QUD_BUYER As String
        Dim QUD_TOQTY As String
        Dim QUD_TOShipport As String
        Dim QUD_TORMK As String
        Dim QUD_FTYSHPSTR As String
        Dim QUD_FTYSHPEND As String
        Dim QUD_CUSHPSTR As String
        Dim QUD_CUSHPEND As String
        Dim QUD_CREUSR As String

        Dim i As Integer

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            DEL_FLAG = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("Del")
            QUD_COCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cocde")
            QUD_QUTNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutno")
            QUD_QUTSEQ = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")
            QUD_ITMNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmno")
            QUD_ITMSTS = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmsts"), " - ")(0)
            QUD_ITMDSC = Replace(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmdsc"), "'", "''")
            '            QUD_ITMDSC = Replace(QUD_ITMDSC, """", "``")

            QUD_ALSITMNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_alsitmno")
            QUD_ALSCOLCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_alscolcde")
            QUD_CONFTR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_conftr")
            QUD_CONTOPC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_contopc")
            QUD_PCPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pcprc")
            QUD_HSTREF = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_hstref")
            QUD_COLCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_colcde")
            QUD_CUSCOL = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cuscol")
            QUD_COLDSC = Replace(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_coldsc"), "'", "''")
            QUD_PCKSEQ = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pckseq")
            QUD_UNTCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_untcde")
            QUD_INRQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrqty")
            QUD_MTRQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrqty")
            QUD_CFT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cft")
            QUD_CURCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_curcde")
            QUD_CUS1SP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus1sp")
            QUD_CUS2SP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus2sp")
            QUD_CUS1DP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus1dp")
            QUD_CUS2DP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus2dp")
            QUD_ONETIM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_onetim")
            QUD_DISCNT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_discnt")
            QUD_MOFLAG = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_moflag")
            QUD_ORGMOQ = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_orgmoq")
            QUD_ORGMOA = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_orgmoa")
            QUD_MOQ = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_moq")
            QUD_MOA = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_moa")
            QUD_SMPQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_smpqty")
            QUD_HRMCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_hrmcde")
            QUD_DTYRAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_dtyrat")
            QUD_DEPT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_dept")
            QUD_CUSUSD = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cususd")
            QUD_CUSCAD = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cuscad")
            If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_venno")) Then
                QUD_VENNO = ""
            Else
                QUD_VENNO = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_venno"), " - ")(0)
            End If
            QUD_SUBCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_subcde")
            QUD_VENITM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_venitm")
            QUD_FTYPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyprc")
            QUD_FTYCST = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftycst")
            QUD_NOTE = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_note")), "", rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_note"))
            QUD_IMAGE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_image")
            QUD_INRDIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrdin")
            QUD_INRWIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrwin")
            QUD_INRHIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrhin")
            QUD_MTRDIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrdin")
            QUD_MTRWIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrwin")
            QUD_MTRHIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrhin")
            QUD_INRDCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrdcm")
            QUD_INRWCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrwcm")
            QUD_INRHCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_inrhcm")
            QUD_MTRDCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrdcm")
            QUD_MTRWCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrwcm")
            QUD_MTRHCM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_mtrhcm")
            QUD_GRSWGT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_grswgt")
            QUD_NETWGT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_netwgt")
            QUD_COSMTH = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cosmth")
            QUD_SMPPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_smpprc")
            QUD_CUSITM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cusitm")
            CUS1NO = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
            CUS1NA = Microsoft.VisualBasic.Right(cboCus1No.Text, Len(cboCus1No.Text) - InStr(cboCus1No.Text, " - ") - 2)
            CUS1NA = CUS1NA.Replace("'", "''")

            If cboCus2No.Text <> "" Then
                If InStr(cboCus2No.Text, " - ") - 1 >= 0 Then
                    CUS2NO = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
                    CUS2NA = Replace(Microsoft.VisualBasic.Right(cboCus2No.Text, Len(cboCus2No.Text) - InStr(cboCus2No.Text, " - ") - 2), "'", "''")
                End If
            Else
                CUS2NO = ""
                CUS2NA = ""
            End If
            QUD_PRCSEC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_prcsec")
            QUD_GRSMGN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_grsmgn")
            QUD_BASPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_basprc")
            QUD_TBM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_tbm")
            QUD_TBMSTS = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_tbmsts")
            RVSDAT = Microsoft.VisualBasic.Left(txtRvsDat.Text, 10)
            QUD_APPRVE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_apprve")
            'QUD_PDABPDIFF = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pdabpdiff")
            QUD_PCKITR = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pckitr")), "", rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pckitr"))
            QUD_PCKITR = Replace(QUD_PCKITR, "'", "''")

            QUD_STKQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_stkqty")
            QUD_CUSQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cusqty")
            QUD_SMPUNT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_smpunt")
            QUD_QUTITMSTS = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutitmsts"), " - ")(0)
            QUD_FCURCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_fcurcde")
            'SMPPRD = "" 'rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("smpprd")
            QUD_ITMTYP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmtyp")
            QUH_QUTSTS = IIf(IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutsts")), "A", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutsts"))
            QUD_PRCTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_prctrm")
            QUD_CUSVEN = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cusven"), " - ")(0)
            QUD_CUSSUB = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cussub")
            QUD_FTYPRCTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyprctrm")
            QUD_CUSSTYNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cusstyno")
            QUD_CBM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cbm")
            QUD_UPC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_upc")
            QUD_SPECPCK = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_specpck")
            QUD_FTYTMPITM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftytmpitm")
            QUD_FTYTMPITMNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftytmpitmno")
            QUD_CUSTITMCAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_custitmcat")
            QUD_CUSTITMCATFML = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_custitmcatfml")
            QUD_CUSTITMCATAMT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_custitmcatamt")
            QUD_PMU = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_pmu")
            QUD_IMRMK = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_imrmk")), "", rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_imrmk"))
            QUD_IMRMK = QUD_IMRMK.Replace("'", "''")
            QUD_RNDSTS = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_rndsts")
            QUD_CALPMU = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_calpmu")
            QUD_MOQUNTTYP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_moqunttyp")
            QUD_QUTDAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutdat")
            QUD_CUS1NO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus1no")
            QUD_CUS2NO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cus2no")
            QUD_TRANTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_trantrm")
            QUD_EFFDAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_effdat")
            QUD_EXPDAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_expdat")

            If Len(QUD_EXPDAT) <= 11 Then
                QUD_EXPDAT = QUD_EXPDAT & " 23:59:00.000"
            End If

            QUD_ITMNOTYP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnotyp")
            QUD_ITMNOREAL = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnoreal")
            QUD_ITMNOTMP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnotmp")
            QUD_ITMNOVEN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnoven")

            '''III20140116
            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno")) Then
                If InStr(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ") > 1 Then


                    If Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(1)) > 1000 And _
Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(1)) < 9999 _
Then
                        QUD_ITMNOVENNO = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(1)
                    Else
                        QUD_ITMNOVENNO = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmnovenno"), " - ")(0)
                    End If

                Else
                    QUD_ITMNOVENNO = ""
                End If
            End If



            QUD_IMGPTH = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_imgpth")
            QUD_CUSUSDCUR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cususdcur")
            QUD_CUSCADCUR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cuscadcur")
            QUD_DV = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_dv"), " - ")(0)
            QUD_TV = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_tv"), " - ")(0)
            QUD_FTYAUD = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyaud"), " - ")(0)
            QUD_BUYER = Split(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_buyer"), " - ")(0)
            QUD_TOQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_toqty")
            QUD_TOShipport = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_TOShipport")

            QUD_TORMK = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_tormk")
            QUD_FTYSHPSTR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpstr")
            QUD_FTYSHPEND = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpend")
            QUD_CUSHPSTR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpstr")
            QUD_CUSHPEND = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpend")
            QUD_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr")

            gspStr = ""

            '''20130815  to avoid some missing insert,  just qpe  accrd to qud 
            ''If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_creusr") = "~*NEW*~" Then
            ''    QUD_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_creusr")
            ''End If
            ''If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_creusr") = "~*ADD*~" Then
            ''    QUD_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_creusr")
            ''End If



            If DEL_FLAG = "Y" Or QUD_CREUSR = "~*DEL*~" Then

                '''***)
                gspStr = "sp_physical_delete_QUOTNDTL '" & QUD_COCDE & "','" & QUD_QUTNO & "','" & QUD_QUTSEQ & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUOTNDTL sp_physical_delete_QUOTNDTL:" & rtnStr)
                    save_QUOTNDTL = False
                    Exit Function
                End If

                '''20140321  set the To qty to zero
                ''update sp here
                gspStr = "sp_update_TOORDDTL_3 '" & QUD_COCDE & "','" & "T" & QUD_QUTNO & "','" & Val(flag_delete_to_seq(i)) & "',0,'" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUOTNDTL sp_physical_delete_QUOTNDTL:" & rtnStr)
                    save_QUOTNDTL = False
                    Exit Function
                End If

            ElseIf QUD_CREUSR = "~*ADD*~" Or QUD_CREUSR = "~*NEW*~" Then
                ''bug0802
                If QUD_ITMNO = "" Then
                    MsgBox("Please Input All Item Numbers!")
                    save_QUOTNDTL = False
                    Exit Function
                End If

                gspStr = "sp_insert_QUOTNDTL '" & QUD_COCDE & "','" & QUD_QUTNO & "','" & QUD_QUTSEQ & "','" & QUD_ITMNO & "','" & QUD_ITMSTS & "','" & _
                                                    QUD_ITMDSC & "','" & QUD_ALSITMNO & "','" & QUD_ALSCOLCDE & "','" & QUD_CONFTR & "','" & QUD_CONTOPC & "','" & _
                                                    QUD_PCPRC & "','" & QUD_HSTREF & "','" & QUD_COLCDE & "','" & QUD_CUSCOL & "','" & QUD_COLDSC & "','" & _
                                                    QUD_PCKSEQ & "','" & QUD_UNTCDE & "','" & QUD_INRQTY & "','" & QUD_MTRQTY & "','" & QUD_CFT & "','" & _
                                                    QUD_CURCDE & "','" & QUD_CUS1SP & "','" & QUD_CUS2SP & "','" & QUD_CUS1DP & "','" & QUD_CUS2DP & "','" & _
                                                    QUD_ONETIM & "','" & QUD_DISCNT & "','" & QUD_MOFLAG & "','" & QUD_ORGMOQ & "','" & QUD_ORGMOA & "','" & _
                                                    QUD_MOQ & "','" & QUD_MOA & "','" & QUD_SMPQTY & "','" & QUD_HRMCDE & "','" & QUD_DTYRAT & "','" & _
                                                    QUD_DEPT & "','" & QUD_CUSUSD & "','" & QUD_CUSCAD & "','" & QUD_VENNO & "','" & QUD_SUBCDE & "','" & _
                                                    QUD_VENITM & "','" & QUD_FTYPRC & "','" & QUD_FTYCST & "','" & QUD_NOTE & "','" & QUD_IMAGE & "','" & _
                                                    QUD_INRDIN & "','" & QUD_INRWIN & "','" & QUD_INRHIN & "','" & QUD_MTRDIN & "','" & QUD_MTRWIN & "','" & _
                                                    QUD_MTRHIN & "','" & QUD_INRDCM & "','" & QUD_INRWCM & "','" & QUD_INRHCM & "','" & QUD_MTRDCM & "','" & _
                                                    QUD_MTRWCM & "','" & QUD_MTRHCM & "','" & QUD_GRSWGT & "','" & QUD_NETWGT & "','" & QUD_COSMTH & "','" & _
                                                    QUD_SMPPRC & "','" & QUD_CUSITM & "','" & CUS1NO & "','" & CUS1NA & "','" & CUS2NO & "','" & _
                                                    CUS2NA & "','" & QUD_PRCSEC & "','" & QUD_GRSMGN & "','" & QUD_BASPRC & "','" & QUD_TBM & "','" & _
                                                    QUD_TBMSTS & "','" & RVSDAT & "','" & QUD_APPRVE & "','" & QUD_PCKITR & "','" & _
                                                    QUD_STKQTY & "','" & QUD_CUSQTY & "','" & QUD_SMPUNT & "','" & QUD_QUTITMSTS & "','" & QUD_FCURCDE & "','" & _
                                                    QUD_ITMTYP & "','" & QUH_QUTSTS & "','" & QUD_PRCTRM & "','" & QUD_CUSVEN & "','" & _
                                                    QUD_CUSSUB & "','" & QUD_FTYPRCTRM & "','" & QUD_CUSSTYNO & "','" & QUD_CBM & "','" & QUD_UPC & "','" & _
                                                    QUD_SPECPCK & "','" & QUD_FTYTMPITM & "','" & QUD_FTYTMPITMNO & "','" & QUD_CUSTITMCAT & "','" & QUD_CUSTITMCATFML & "','" & _
                                                    QUD_CUSTITMCATAMT & "','" & QUD_PMU & "','" & QUD_IMRMK & "','" & QUD_RNDSTS & "','" & QUD_CALPMU & "','" & _
                                                    QUD_MOQUNTTYP & "','" & QUD_QUTDAT & "','" & QUD_CUS1NO & "','" & QUD_CUS2NO & "','" & QUD_TRANTRM & "','" & _
                                                    QUD_EFFDAT & "','" & QUD_EXPDAT & "','" & QUD_ITMNOTYP & "','" & QUD_ITMNOREAL & "','" & QUD_ITMNOTMP & "','" & _
                                                    QUD_ITMNOVEN & "','" & QUD_ITMNOVENNO & "','" & QUD_IMGPTH & "','" & QUD_CUSUSDCUR & "','" & QUD_CUSCADCUR & "','" & _
                                                    QUD_DV & "','" & QUD_TV & "','" & QUD_FTYAUD & "','" & QUD_BUYER & "','" & QUD_TOQTY & "','" & QUD_TORMK & "','" & _
                                                    QUD_FTYSHPSTR & "','" & QUD_FTYSHPEND & "','" & QUD_CUSHPSTR & "','" & QUD_CUSHPEND & "','" & QUD_TOShipport & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUOTNDTL sp_insert_QUOTNDTL :" & rtnStr)
                    save_QUOTNDTL = False
                    Exit Function
                End If
            ElseIf QUD_CREUSR = "~*UPD*~" Then

                If QUD_ITMNO = "" Then
                    MsgBox("Item empty found,error on saving!")
                    save_QUOTNDTL = False
                    Exit Function
                End If

                gspStr = "sp_update_QUOTNDTL '" & QUD_COCDE & "','" & QUD_QUTNO & "','" & QUD_QUTSEQ & "','" & QUD_ITMNO & "','" & QUD_ITMSTS & "','" & _
                                                    QUD_ITMDSC & "','" & QUD_ALSITMNO & "','" & QUD_ALSCOLCDE & "','" & QUD_CONFTR & "','" & QUD_CONTOPC & "','" & _
                                                    QUD_PCPRC & "','" & QUD_HSTREF & "','" & QUD_COLCDE & "','" & QUD_CUSCOL & "','" & QUD_COLDSC & "','" & _
                                                    QUD_PCKSEQ & "','" & QUD_UNTCDE & "','" & QUD_INRQTY & "','" & QUD_MTRQTY & "','" & QUD_CFT & "','" & _
                                                    QUD_CURCDE & "','" & QUD_CUS1SP & "','" & QUD_CUS2SP & "','" & QUD_CUS1DP & "','" & QUD_CUS2DP & "','" & _
                                                    QUD_ONETIM & "','" & QUD_DISCNT & "','" & QUD_MOFLAG & "','" & QUD_ORGMOQ & "','" & QUD_ORGMOA & "','" & _
                                                    QUD_MOQ & "','" & QUD_MOA & "','" & QUD_SMPQTY & "','" & QUD_HRMCDE & "','" & QUD_DTYRAT & "','" & _
                                                    QUD_DEPT & "','" & QUD_CUSUSD & "','" & QUD_CUSCAD & "','" & QUD_VENNO & "','" & QUD_SUBCDE & "','" & _
                                                    QUD_VENITM & "','" & QUD_FTYPRC & "','" & QUD_FTYCST & "','" & QUD_NOTE & "','" & QUD_IMAGE & "','" & _
                                                    QUD_INRDIN & "','" & QUD_INRWIN & "','" & QUD_INRHIN & "','" & QUD_MTRDIN & "','" & QUD_MTRWIN & "','" & _
                                                    QUD_MTRHIN & "','" & QUD_INRDCM & "','" & QUD_INRWCM & "','" & QUD_INRHCM & "','" & QUD_MTRDCM & "','" & _
                                                    QUD_MTRWCM & "','" & QUD_MTRHCM & "','" & QUD_GRSWGT & "','" & QUD_NETWGT & "','" & QUD_COSMTH & "','" & _
                                                    QUD_SMPPRC & "','" & QUD_CUSITM & "','" & CUS1NO & "','" & CUS1NA & "','" & CUS2NO & "','" & _
                                                    CUS2NA & "','" & QUD_PRCSEC & "','" & QUD_GRSMGN & "','" & QUD_BASPRC & "','" & QUD_TBM & "','" & _
                                                    QUD_TBMSTS & "','" & RVSDAT & "','" & QUD_APPRVE & "','" & QUD_PCKITR & "','" & _
                                                    QUD_STKQTY & "','" & QUD_CUSQTY & "','" & QUD_SMPUNT & "','" & QUD_QUTITMSTS & "','" & QUD_FCURCDE & "','" & _
                                                    QUD_ITMTYP & "','" & QUH_QUTSTS & "','" & QUD_PRCTRM & "','" & QUD_CUSVEN & "','" & _
                                                    QUD_CUSSUB & "','" & QUD_FTYPRCTRM & "','" & QUD_CUSSTYNO & "','" & QUD_CBM & "','" & QUD_UPC & "','" & _
                                                    QUD_SPECPCK & "','" & QUD_FTYTMPITM & "','" & QUD_FTYTMPITMNO & "','" & QUD_CUSTITMCAT & "','" & QUD_CUSTITMCATFML & "','" & _
                                                    QUD_CUSTITMCATAMT & "','" & QUD_PMU & "','" & QUD_IMRMK & "','" & QUD_RNDSTS & "','" & QUD_CALPMU & "','" & _
                                                    QUD_MOQUNTTYP & "','" & QUD_QUTDAT & "','" & QUD_CUS1NO & "','" & QUD_CUS2NO & "','" & QUD_TRANTRM & "','" & _
                                                    QUD_EFFDAT & "','" & QUD_EXPDAT & "','" & QUD_ITMNOTYP & "','" & QUD_ITMNOREAL & "','" & QUD_ITMNOTMP & "','" & _
                                                    QUD_ITMNOVEN & "','" & QUD_ITMNOVENNO & "','" & QUD_IMGPTH & "','" & QUD_CUSUSDCUR & "','" & QUD_CUSCADCUR & "','" & _
                                                    QUD_DV & "','" & QUD_TV & "','" & QUD_FTYAUD & "','" & QUD_BUYER & "','" & QUD_TOQTY & "','" & QUD_TORMK & "','" & _
                                                    QUD_FTYSHPSTR & "','" & QUD_FTYSHPEND & "','" & QUD_CUSHPSTR & "','" & QUD_CUSHPEND & "','" & QUD_TOShipport & "','" & gsUsrID & "'"

                'MsgBox(i)

                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUOTNDTL sp_update_QUOTNDTL :" & rtnStr)
                    save_QUOTNDTL = False
                    Exit Function
                End If
            End If
            gi_saved_items_count = gi_saved_items_count + 1

        Next i

        If gi_saved_items_count = 0 Then
            MsgBox("No item saved! Please Check the quotation and the item(s)!")
            save_QUOTNDTL = False
            Exit Function
        End If

        save_QUOTNDTL = True

    End Function

    Private Function save_IMCUSSTY() As Boolean
        save_IMCUSSTY = True

        Exit Function

        Dim message As String
        Dim rsM As New DataSet
        Dim relatn As String

        If Trim(cboCusals.Text) = "" Then
            Exit Function
        End If

        save_fail = False


        gspStr = ""
        gspStr = "sp_insert_IMCUSSTY_qu '" & IIf(InStr(cboCus1No.Text, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1), "") & "','" & cboCusals.Text & "','" & txtItmNo.Text & "','" & gsUsrID & "'"

        message = "sp_insert_IMCUSSTY_qu"


        '' Cursor = Cursors.Default

        rtnLong = execute_SQLStatement(gspStr, rsM, rtnStr)
        '        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Update Customer Style Fail")
            Exit Function
        End If


        '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading save_IMCUSSTY " & message & " :" & rtnStr)
            Exit Function
        Else
            IsUpdated = True
        End If


    End Function

    Private Function save_QUPRCEMT() As Boolean
        save_QUPRCEMT = False

        Dim DEL_FLAG As String
        Dim QPE_COCDE As String
        Dim QPE_QUTNO As String
        Dim QPE_QUTSEQ As String
        Dim QPE_ITMNO As String
        Dim QPE_UNTCDE As String
        Dim QPE_INRQTY As String
        Dim QPE_MTRQTY As String
        Dim QPE_CFT As String
        Dim QPE_CBM As String
        Dim QPE_FTYPRCTRM As String
        Dim QPE_PRCTRM As String
        Dim QPE_TRANTRM As String
        Dim QPE_FML_CUS1NO As String
        Dim QPE_FML_CUS2NO As String
        Dim QPE_FML_CAT As String
        Dim QPE_FML_VENNO As String
        Dim QPE_FML_VENTRANFLG As String
        Dim QPE_FCURCDE As String
        Dim QPE_FTYCST As String
        Dim QPE_FTYPRC As String
        Dim QPE_CURCDE As String
        Dim QPE_BASPRC As String
        Dim QPE_MU As String
        Dim QPE_MUMIN As String
        Dim QPE_MUPRC As String
        Dim QPE_MUMINPRC As String
        Dim QPE_CUS1SP As String
        Dim QPE_CUS1DP As String
        Dim QPE_CUSHCSTBUFPER As String
        Dim QPE_CUSHCSTBUFAMT As String
        Dim QPE_OTHDISPER As String
        Dim QPE_MAXAPVPER As String
        Dim QPE_MAXAPVAMT As String
        Dim QPE_SPMUPER As String
        Dim QPE_DPMUPER As String
        Dim QPE_CUMU As String
        Dim QPE_PM As String
        Dim QPE_CUSH As String
        Dim QPE_THCCUSPER As String
        Dim QPE_UPSPER As String
        Dim QPE_LABPER As String
        Dim QPE_FAPER As String
        Dim QPE_CSTBUFPER As String
        Dim QPE_OTHPER As String
        Dim QPE_PLIPER As String
        Dim QPE_DMDPER As String
        Dim QPE_RBTPER As String
        Dim QPE_SUBTTLPER As String
        Dim QPE_PKGPER As String
        Dim QPE_COMPER As String
        Dim QPE_ICMPER As String
        Dim QPE_STDPRC As String
        Dim QPE_FTYCSTA As String
        Dim QPE_FTYCSTB As String
        Dim QPE_FTYCSTC As String
        Dim QPE_FTYCSTD As String
        Dim QPE_FTYCSTTRAN As String
        Dim QPE_FTYCSTPACK As String
        Dim QPE_LIGHTSPEC As String

        Dim QPE_CREUSR As String

        Dim i As Integer

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            DEL_FLAG = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("Del")
            QPE_COCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cocde")
            QPE_QUTNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutno")
            QPE_QUTSEQ = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")
            QPE_ITMNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_itmno")
            QPE_UNTCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_untcde")
            QPE_INRQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_inrqty")
            QPE_MTRQTY = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mtrqty")
            QPE_CFT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cft")
            QPE_CBM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cbm")
            QPE_FTYPRCTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftyprctrm")
            QPE_PRCTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_prctrm")
            QPE_TRANTRM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_trantrm")
            QPE_FML_CUS1NO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fml_cus1no")
            QPE_FML_CUS2NO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fml_cus2no")
            QPE_FML_CAT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fml_cat")
            QPE_FML_VENNO = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fml_venno")
            QPE_FML_VENTRANFLG = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fml_ventranflg")
            QPE_FCURCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_fcurcde")
            QPE_FTYCST = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycst")
            QPE_FTYPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftyprc")
            QPE_CURCDE = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_curcde")
            QPE_BASPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_basprc")
            QPE_MU = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mu")
            QPE_MUMIN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_mumin")
            QPE_MUPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_muprc")
            QPE_MUMINPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_muminprc")
            QPE_CUS1SP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cus1sp")
            QPE_CUS1DP = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cus1dp")
            QPE_CUSHCSTBUFPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cushcstbufper")
            QPE_CUSHCSTBUFAMT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cushcstbufamt")
            QPE_OTHDISPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_othdisper")
            QPE_MAXAPVPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_maxapvper")
            QPE_MAXAPVAMT = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_maxapvamt")
            QPE_SPMUPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_spmuper")
            QPE_DPMUPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_dpmuper")
            QPE_CUMU = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cumu")
            QPE_PM = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_pm")
            QPE_CUSH = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cush")
            QPE_THCCUSPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_thccusper")
            QPE_UPSPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_upsper")
            QPE_LABPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_labper")
            QPE_FAPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_faper")
            QPE_CSTBUFPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_cstbufper")
            QPE_OTHPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_othper")
            QPE_PLIPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_pliper")
            QPE_DMDPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_dmdper")
            QPE_RBTPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_rbtper")
            QPE_SUBTTLPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_subttlper")
            QPE_PKGPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_pkgper")
            QPE_COMPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_comper")
            QPE_ICMPER = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_icmper")
            QPE_STDPRC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_stdprc")
            QPE_FTYCSTA = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstA")
            QPE_FTYCSTB = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstB")
            QPE_FTYCSTC = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstC")
            QPE_FTYCSTD = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstD")
            QPE_FTYCSTTRAN = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstTran")
            QPE_FTYCSTPACK = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_ftycstPack")
            QPE_LIGHTSPEC = Replace(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_lightspec"), "'", "''")


            QPE_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_creusr")

            '''20130815  to avoid some missing insert / Delete
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                QPE_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr")
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Then
                QPE_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr")
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*DEL*~" Then
                QPE_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr")
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~" Then
                QPE_CREUSR = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr")
            End If

            gspStr = ""
            If DEL_FLAG = "Y" Or QPE_CREUSR = "~*DEL*~" Then
                gspStr = "sp_physical_delete_QUPRCEMT '" & QPE_COCDE & "','" & QPE_QUTNO & "','" & QPE_QUTSEQ & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUPRCEMT sp_physical_delete_QUPRCEMT:" & rtnStr)
                    save_QUPRCEMT = False
                    Exit Function
                End If
            ElseIf QPE_CREUSR = "~*ADD*~" Or QPE_CREUSR = "~*NEW*~" Then
                gspStr = "sp_insert_QUPRCEMT '" & QPE_COCDE & "','" & QPE_QUTNO & "','" & QPE_QUTSEQ & "','" & QPE_ITMNO & "','" & QPE_UNTCDE & "','" & _
                                                QPE_INRQTY & "','" & QPE_MTRQTY & "','" & QPE_CFT & "','" & QPE_CBM & "','" & QPE_FTYPRCTRM & "','" & _
                                                QPE_PRCTRM & "','" & QPE_TRANTRM & "','" & QPE_FML_CUS1NO & "','" & QPE_FML_CUS2NO & "','" & QPE_FML_CAT & "','" & _
                                                QPE_FML_VENNO & "','" & QPE_FML_VENTRANFLG & "','" & QPE_FCURCDE & "','" & QPE_FTYCST & "','" & QPE_FTYPRC & "','" & _
                                                QPE_CURCDE & "','" & QPE_BASPRC & "','" & QPE_MU & "','" & QPE_MUMIN & "','" & QPE_MUPRC & "','" & QPE_MUMINPRC & "','" & _
                                                QPE_CUS1SP & "','" & QPE_CUS1DP & "','" & QPE_CUSHCSTBUFPER & "','" & QPE_CUSHCSTBUFAMT & "','" & QPE_OTHDISPER & "','" & _
                                                QPE_MAXAPVPER & "','" & QPE_MAXAPVAMT & "','" & QPE_SPMUPER & "','" & QPE_DPMUPER & "','" & QPE_CUMU & "','" & _
                                                QPE_PM & "','" & QPE_CUSH & "','" & QPE_THCCUSPER & "','" & QPE_UPSPER & "','" & QPE_LABPER & "','" & _
                                                QPE_FAPER & "','" & QPE_CSTBUFPER & "','" & QPE_OTHPER & "','" & QPE_PLIPER & "','" & QPE_DMDPER & "','" & _
                                                QPE_RBTPER & "','" & QPE_SUBTTLPER & "','" & QPE_PKGPER & "','" & QPE_COMPER & "','" & QPE_ICMPER & "','" & _
                                                QPE_STDPRC & "','" & QPE_FTYCSTA & "','" & QPE_FTYCSTB & "','" & QPE_FTYCSTC & "','" & QPE_FTYCSTD & "','" & _
                                                QPE_FTYCSTTRAN & "','" & QPE_FTYCSTPACK & "','" & QPE_LIGHTSPEC & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUPRCEMT sp_insert_QUPRCEMT :" & rtnStr)
                    save_QUPRCEMT = False
                    Exit Function
                End If
            ElseIf QPE_CREUSR = "~*UPD*~" Then
                gspStr = "sp_update_QUPRCEMT '" & QPE_COCDE & "','" & QPE_QUTNO & "','" & QPE_QUTSEQ & "','" & QPE_ITMNO & "','" & QPE_UNTCDE & "','" & _
                                                QPE_INRQTY & "','" & QPE_MTRQTY & "','" & QPE_CFT & "','" & QPE_CBM & "','" & QPE_FTYPRCTRM & "','" & _
                                                QPE_PRCTRM & "','" & QPE_TRANTRM & "','" & QPE_FML_CUS1NO & "','" & QPE_FML_CUS2NO & "','" & QPE_FML_CAT & "','" & _
                                                QPE_FML_VENNO & "','" & QPE_FML_VENTRANFLG & "','" & QPE_FCURCDE & "','" & QPE_FTYCST & "','" & QPE_FTYPRC & "','" & _
                                                QPE_CURCDE & "','" & QPE_BASPRC & "','" & QPE_MU & "','" & QPE_MUMIN & "','" & QPE_MUPRC & "','" & QPE_MUMINPRC & "','" & _
                                                QPE_CUS1SP & "','" & QPE_CUS1DP & "','" & QPE_CUSHCSTBUFPER & "','" & QPE_CUSHCSTBUFAMT & "','" & QPE_OTHDISPER & "','" & _
                                                QPE_MAXAPVPER & "','" & QPE_MAXAPVAMT & "','" & QPE_SPMUPER & "','" & QPE_DPMUPER & "','" & QPE_CUMU & "','" & _
                                                QPE_PM & "','" & QPE_CUSH & "','" & QPE_THCCUSPER & "','" & QPE_UPSPER & "','" & QPE_LABPER & "','" & _
                                                QPE_FAPER & "','" & QPE_CSTBUFPER & "','" & QPE_OTHPER & "','" & QPE_PLIPER & "','" & QPE_DMDPER & "','" & _
                                                QPE_RBTPER & "','" & QPE_SUBTTLPER & "','" & QPE_PKGPER & "','" & QPE_COMPER & "','" & QPE_ICMPER & "','" & _
                                                QPE_STDPRC & "','" & QPE_FTYCSTA & "','" & QPE_FTYCSTB & "','" & QPE_FTYCSTC & "','" & QPE_FTYCSTD & "','" & _
                                                QPE_FTYCSTTRAN & "','" & QPE_FTYCSTPACK & "','" & QPE_LIGHTSPEC & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUPRCEMT sp_update_QUPRCEMT :" & rtnStr)
                    save_QUPRCEMT = False
                    Exit Function
                End If
            End If
        Next i
        save_QUPRCEMT = True
    End Function

    Private Function save_QUCPTBKD() As Boolean
        save_QUCPTBKD = False

        Dim QCB_COCDE As String
        Dim QCB_QUTNO As String
        Dim QCB_QUTSEQ As String
        Dim QCB_ITMNO As String
        Dim QCB_CPTSEQ As String
        Dim QCB_CPT As String
        Dim QCB_CURCDE As String
        Dim QCB_CST As String
        Dim QCB_CSTPCT As String
        Dim QCB_PCT As String
        Dim QCB_CREUSR As String

        Dim i As Integer

        For i = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1
            QCB_COCDE = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_cocde")
            QCB_QUTNO = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_qutno")
            QCB_QUTSEQ = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_qutseq")
            QCB_ITMNO = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_itmno")
            QCB_CPTSEQ = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_cptseq")
            QCB_CPT = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_cpt")
            QCB_CURCDE = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_curcde")
            QCB_CST = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_cst")
            QCB_CSTPCT = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_cstpct")
            QCB_PCT = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_pct")
            QCB_CREUSR = rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_creusr")

            If QCB_CREUSR = "~*DEL*~" Then
                gspStr = "sp_physical_delete_QUCPTBKD '" & QCB_COCDE & "','" & QCB_QUTNO & "','" & QCB_QUTSEQ & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUCPTBKD sp_physical_delete_QUCPTBKD:" & rtnStr)
                    save_QUCPTBKD = False
                    Exit Function
                End If
            ElseIf QCB_CREUSR = "~*ADD*~" Or QCB_CREUSR = "~*NEW*~" Then
                gspStr = "sp_insert_QUCPTBKD '" & QCB_COCDE & "','" & QCB_QUTNO & "','" & QCB_QUTSEQ & "','" & QCB_ITMNO & "','" & QCB_CPTSEQ & "','" & _
                                                        QCB_CPT & "','" & QCB_CURCDE & "'," & QCB_CST & "," & QCB_CSTPCT & "," & QCB_PCT & ",'" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUCPTBKD sp_insert_QUCPTBKD:" & rtnStr)
                    save_QUCPTBKD = False
                    Exit Function
                End If
            ElseIf QCB_CREUSR = "~*UPD*~" Then
                gspStr = "sp_update_QUCPTBKD '" & QCB_COCDE & "','" & QCB_QUTNO & "','" & QCB_QUTSEQ & "','" & QCB_ITMNO & "','" & QCB_CPTSEQ & "','" & _
                                                        QCB_CPT & "','" & QCB_CURCDE & "'," & QCB_CST & "," & QCB_CSTPCT & "," & QCB_PCT & ",'" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUCPTBKD sp_update_QUCPTBKD:" & rtnStr)
                    save_QUCPTBKD = False
                    Exit Function
                End If
            End If
        Next i
        save_QUCPTBKD = True
    End Function

    Private Function save_QUASSINF() As Boolean
        save_QUASSINF = False

        Dim QAI_COCDE As String
        Dim QAI_QUTNO As String
        Dim QAI_QUTSEQ As String
        Dim QAI_ITMNO As String
        Dim QAI_ASSITM As String
        Dim QAI_ASSDSC As String
        Dim QAI_CUSITM As String
        Dim QAI_CUSSTYNO As String
        Dim QAI_COLCDE As String
        Dim QAI_COLDSC As String
        Dim QAI_ALSITMNO As String
        Dim QAI_ALSCOLCDE As String
        Dim QAI_CUSSKU As String
        Dim QAI_UPCEAN As String
        Dim QAI_CUSRTL As String
        Dim QAI_UNTCDE As String
        Dim QAI_INRQTY As String
        Dim QAI_MTRQTY As String
        Dim QAI_IMPERIOD As String
        Dim QAI_CREUSR As String

        Dim i As Integer
        Dim last_del_seq As Integer
        last_del_seq = 0
        For i = 0 To rs_QUASSINF.Tables("RESULT").Rows.Count - 1
            QAI_COCDE = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde")
            QAI_QUTNO = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_qutno")
            QAI_QUTSEQ = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_qutseq")
            QAI_CREUSR = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_creusr")
            If QAI_CREUSR = "~*ADD*~" Or QAI_CREUSR = "~*NEW*~" Then
                If QAI_QUTSEQ <> last_del_seq Then
                    gspStr = "sp_physical_delete_QUASSINF '" & QAI_COCDE & "','" & QAI_QUTNO & "','" & QAI_QUTSEQ & "'"
                    rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    If rtnLong <> RC_SUCCESS Then
                        MsgBox("Error on loading save_QUASSINF sp_physical_delete_QUASSINF:" & rtnStr)
                        save_QUASSINF = False
                        Exit Function
                    End If
                    last_del_seq = QAI_QUTSEQ

                End If
            End If
        Next i

        For i = 0 To rs_QUASSINF.Tables("RESULT").Rows.Count - 1
            QAI_COCDE = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde")
            QAI_QUTNO = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_qutno")
            QAI_QUTSEQ = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_qutseq")
            QAI_ITMNO = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_itmno")
            QAI_ASSITM = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_assitm")
            QAI_ASSDSC = Replace(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_assdsc"), "'", "''")
            QAI_CUSITM = IIf(IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusitm")) = True, "", rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusitm"))
            QAI_CUSSTYNO = IIf(IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusstyno")) = True, "", rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusstyno"))
            QAI_COLCDE = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_colcde")
            QAI_COLDSC = Replace(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_coldsc"), "'", "''")
            QAI_ALSITMNO = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_alsitmno")
            QAI_ALSCOLCDE = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_alscolcde")
            QAI_CUSSKU = IIf(IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cussku")) = True, "", rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cussku"))
            QAI_UPCEAN = IIf(IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_upcean")) = True, "", rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_upcean"))
            QAI_CUSRTL = IIf(IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusrtl")) = True, "", rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_cusrtl"))
            QAI_UNTCDE = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_untcde")
            QAI_INRQTY = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_inrqty")
            QAI_MTRQTY = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_mtrqty")

            ''Ass save bug 20130823
            If IsDBNull(rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_imperiod")) Then
                QAI_IMPERIOD = ""
            Else
                QAI_IMPERIOD = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_imperiod")
            End If
            If QAI_IMPERIOD = "" Then
                QAI_IMPERIOD = "1900-01-01"
            Else
                QAI_IMPERIOD = QAI_IMPERIOD & "-01"

            End If

            QAI_CREUSR = rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_creusr")

            If QAI_CREUSR = "~*DEL*~" Then
                gspStr = "sp_physical_delete_QUASSINF '" & QAI_COCDE & "','" & QAI_QUTNO & "','" & QAI_QUTSEQ & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_physical_delete_QUASSINF:" & rtnStr)
                    save_QUASSINF = False
                    Exit Function
                End If

            ElseIf QAI_CREUSR = "~*ADD*~" Or QAI_CREUSR = "~*NEW*~" Then
                gspStr = "sp_insert_QUASSINF '" & QAI_COCDE & "','" & QAI_QUTNO & "','" & QAI_QUTSEQ & "','" & QAI_ITMNO & "','" & QAI_ASSITM & "','" & _
                                                    QAI_ASSDSC & "','" & QAI_CUSITM & "','" & QAI_CUSSTYNO & "','" & QAI_COLCDE & "','" & QAI_COLDSC & "','" & QAI_ALSITMNO & "','" & _
                                                    QAI_ALSCOLCDE & "','" & QAI_CUSSKU & "','" & QAI_UPCEAN & "','" & QAI_CUSRTL & "','" & QAI_UNTCDE & "','" & _
                                                    QAI_INRQTY & "','" & QAI_MTRQTY & "','" & QAI_IMPERIOD & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_insert_QUASSINF:" & rtnStr)
                    save_QUASSINF = False
                    Exit Function
                End If
            ElseIf QAI_CREUSR = "~*UPD*~" Then
                gspStr = "sp_update_QUASSINF '" & QAI_COCDE & "','" & QAI_QUTNO & "','" & QAI_QUTSEQ & "','" & QAI_ITMNO & "','" & QAI_ASSITM & "','" & _
                                                    QAI_ASSDSC & "','" & QAI_CUSITM & "','" & QAI_CUSSTYNO & "','" & QAI_COLCDE & "','" & QAI_COLDSC & "','" & _
                                                    QAI_CUSSKU & "','" & QAI_UPCEAN & "','" & QAI_CUSRTL & "','" & QAI_UNTCDE & "','" & _
                                                    QAI_INRQTY & "','" & QAI_MTRQTY & "','" & QAI_IMPERIOD & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_update_QUASSINF:" & rtnStr)
                    save_QUASSINF = False
                    Exit Function
                End If
            End If
        Next i
        save_QUASSINF = True
    End Function

    Private Function save_QUDTLSHP() As Boolean
        save_QUDTLSHP = False

        Dim QDS_COCDE As String
        Dim QDS_QUTNO As String
        Dim QDS_QUTSEQ As String
        Dim QDS_SHPSEQ As String
        Dim QDS_SHPQTY As String
        Dim QDS_FTYSHPSTR As String
        Dim QDS_FTYSHPEND As String
        Dim QDS_CUSTSHPSTR As String
        Dim QDS_CUSTSHPEND As String
        Dim QDS_PCKUNT As String
        Dim QDS_CREUSR As String

        Dim i As Integer

        For i = 0 To rs_QUDTLSHP.Tables("RESULT").Rows.Count - 1
            QDS_COCDE = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde")
            QDS_QUTNO = rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutno")
            QDS_QUTSEQ = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_qutseq")
            QDS_SHPSEQ = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_shpseq")
            QDS_SHPQTY = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_shpqty")
            QDS_FTYSHPSTR = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_ftyshpstr")
            QDS_FTYSHPEND = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_ftyshpend")
            QDS_CUSTSHPSTR = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_custshpstr")
            QDS_CUSTSHPEND = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_custshpend")
            QDS_PCKUNT = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_pckunt")
            QDS_CREUSR = rs_QUDTLSHP.Tables("RESULT").Rows(i).Item("qds_creusr")

            If QDS_CREUSR = "~*DEL*~" Or rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde") = "Y" Then
                gspStr = "sp_physical_delete_QUDTLSHP '" & QDS_COCDE & "','" & QDS_QUTNO & "','" & QDS_QUTSEQ & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_physical_delete_QUDTLSHP:" & rtnStr)
                    save_QUDTLSHP = False
                    Exit Function
                End If
            ElseIf QDS_CREUSR = "~*ADD*~" Or QDS_CREUSR = "~*NEW*~" Then
                gspStr = "sp_insert_QUDTLSHP '" & QDS_COCDE & "','" & QDS_QUTNO & "','" & QDS_QUTSEQ & "','" & QDS_SHPSEQ & "','" & QDS_SHPQTY & "','" & _
                                                    QDS_FTYSHPSTR & "','" & QDS_FTYSHPEND & "','" & QDS_CUSTSHPSTR & "','" & QDS_CUSTSHPEND & "','" & QDS_PCKUNT & "','" & _
                                                     gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_insert_QUDTLSHP:" & rtnStr)
                    save_QUDTLSHP = False
                    Exit Function
                End If
            ElseIf QDS_CREUSR = "~*UPD*~" Then
                gspStr = "sp_update_QUDTLSHP '" & QDS_COCDE & "','" & QDS_QUTNO & "','" & QDS_QUTSEQ & "','" & QDS_SHPSEQ & "','" & QDS_SHPQTY & "','" & _
                                                   QDS_FTYSHPSTR & "','" & QDS_FTYSHPEND & "','" & QDS_CUSTSHPSTR & "','" & QDS_CUSTSHPEND & "','" & QDS_PCKUNT & "','" & _
                                                    gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading save_QUASSINF sp_update_QUDTLSHP:" & rtnStr)
                    save_QUDTLSHP = False
                    Exit Function
                End If
            End If
        Next i

        save_QUDTLSHP = True
    End Function

    Private Sub fill_QUOTNHDR()
        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            rs_QUOTNHDR.Tables("RESULT").Rows.Add()
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*ADD*~"
        End If

        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cocde") = cboCoCde.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutno") = ""
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_issdat") = txtIssDat.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rvsdat") = txtRvsDat.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1no") = cboCus1No.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2no") = cboCus2No.Text

        If optActive.Checked = True Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_relatn") = "A"
        ElseIf optPassive.Checked = True Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_relatn") = "P"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_relatn") = ""
        End If

        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1ad") = txtCus1Ad.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2ad") = txtCus2Ad.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1st") = txtCus1St.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cy") = txtCus1Cy.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1zp") = txtCus1Zp.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2st") = txtCus2St.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cy") = txtCus2Cy.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2zp") = txtCus2Zp.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cp") = cboCus1Cp.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cp") = cboCus2Cp.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_salrep") = cboSalRep.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cusagt") = cboCusAgt.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_valdat") = txtValDat.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpprd") = cboSmpPrd.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_smpfgt") = cboSmpFgt.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_prctrm") = txtPrcTrm.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_paytrm") = txtPayTrm.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curcde") = txtCurCde.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutsts") = txtQutSts.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rmk") = txtRmk.Text
        If chkPC_hdr.Checked = True Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_conalltopc") = "Y"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_conalltopc") = "N"
        End If
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Year") = cboYear.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Season") = cboSeason.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_Desc") = txtDesc.Text

        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_quplus") = 0
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_quminus") = 0
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curexrat") = 0
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_curexeffdat") = "1900/01/01"
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cugrptyp_int") = 0
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cugrptyp_ext") = 0
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_dept") = txtDeptH.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_saldivtem") = cboSalDiv.Text
        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname") = cboSalRep.Text

        If Not IsDate(txtHDRFtyShpDateStr.Text) Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = txtHDRFtyShpDateStr.Text
        End If
        '''special handle 20140122
        If txtHDRFtyShpDateStr.Text.Trim = "11/19/00" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        End If
        If txtHDRFtyShpDateStr.Text.Trim = "11/19/2000" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        End If
        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr"), "11/19/2000") =0 Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
        End If



        If Not IsDate(txtHDRFtyShpDateEnd.Text) Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = txtHDRFtyShpDateEnd.Text
        End If
        '''special handle 20140122
        If txtHDRFtyShpDateEnd.Text.Trim = "11/19/00" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        End If
        If txtHDRFtyShpDateEnd.Text.Trim = "11/19/2000" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        End If
        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend"), "11/19/2000") =0 Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
        End If


        If Not IsDate(txtHDRCustShpDateStr.Text) Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = txtHDRCustShpDateStr.Text
        End If
        '''special handle 20140122
        If txtHDRCustShpDateStr.Text.Trim = "11/19/00" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        End If
        If txtHDRCustShpDateStr.Text.Trim = "11/19/2000" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        End If
        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr"), "11/19/2000") =0 Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
        End If


        If Not IsDate(txtHDRCustShpDateEnd.Text) Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = txtHDRCustShpDateEnd.Text
        End If
        '''special handle 20140122
        If txtHDRCustShpDateEnd.Text.Trim = "11/19/00" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        End If
        If txtHDRCustShpDateEnd.Text.Trim = "11/19/2000" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        End If
        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend"), "11/19/2000") =0 Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
        End If


    End Sub

    Public Sub fill_QUOTNDTL()
        Dim onetim As String
        Dim image As String
        Dim gmmu As String

        '*** Check Combo in list or not ?
        If not_in_Combo_HDR() = True Then
            Exit Sub
        End If

        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            Exit Sub
        End If

        '*** Check Item Exist ?
        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If txtItmNo.Text <> "" And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True) Then
                If not_exist_ITEM() = True Then
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                    " - Item not found" + Chr(13) + Chr(10) + _
                    " - It is a BOM Item" + Chr(13) + Chr(10) + _
                    " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                    " - It is held by the system" + Chr(13) + Chr(10) + _
                    " - Vendor is not available", vbExclamation, "Warning fq")
                    Exit Sub
                End If
            End If
        End If

        '*** Check Quotation Item Status
        If txtItmNo.Text <> "" Then

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)

            If cboItmSts.Text.Trim <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts") = Microsoft.VisualBasic.Left(cboItmSts.Text.Trim, InStr(cboItmSts.Text.Trim, " - ") - 1)
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts") = ""
            End If


            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts") = txtQutItmSts.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dept") = txtDept.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitm") = IIf(chkFtyTmpItm.Checked = True, "Y", "")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitmno") = IIf(Trim(txtFtyTmpItmNo.Text.Trim) = "", "", Trim(txtFtyTmpItmNo.Text.Trim))

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = IIf(chkDelete.Checked = True, "Y", "N")

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("upditmdtl").ToString() = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("upditmdtl") = "N"
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("updmoqmoa").ToString() = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("updmoqmoa") = "N"
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("updassbom").ToString() = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("updassbom") = "N"
            End If
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("converttopc").ToString() = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("converttopc") = "N"
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno") = txtItmNo.Text

            '*** Phase 2
            If txtItmNoReal.Text <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotyp") = "R"
            ElseIf txtItmNoTmp.Text <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotyp") = "T"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotyp") = "V"
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal") = txtItmNoReal.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp") = txtItmNoTmp.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven") = txtItmNoVen.Text.Trim

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno") = cboItmNoVen.Text.Trim()
            ''' reverse -
            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno")) Then
                If InStr(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ") > 1 Then
                    If Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ")(0)) > 1000 And _
                     Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno"), " - ")(0)) < 9999 _
                    Then
                        display_combo_ven(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                    Else
                        display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                    End If
                Else
                    display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno").ToString, cboItmNoVen)
                End If
            End If


            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnovenno") = cboItmNoVen.Text.Trim()

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmdsc") = Trim(txtItmDsc.Text)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusstyno") = cboCusals.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusitm") = txtCusItm.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_alsitmno") = txtAlias.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc") = Trim(txtUPC.Text)

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk") = IIf(Trim(txtIMRmk.Text) = "", "", Trim(txtIMRmk.Text))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_note") = txtNote.Text

            If txtItmNoVen.Text <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde") = txtColCde.Text.Trim
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde") = cboColCde.Text.Trim
            End If
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc") = Trim(txtColDsc.Text)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_alscolcde") = txtAlscolcde.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscol") = txtCusCol.Text.Trim

            '*** Phase 2
            If txtItmNoVen.Text = "" Then
                If cboPcking.Text <> "" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") = cboUM.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty") = IIf(txtInrQty.Text.Trim = "", 0, txtInrQty.Text.Trim)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty") = IIf(txtMtrQty.Text.Trim = "", 0, txtMtrQty.Text.Trim)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft") = IIf(txtCft.Text.Trim = "", 0, Format(CDec(IIf(txtCft.Text.Trim = "", 0, txtCft.Text.Trim)), "######0.####"))
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") = ""
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft") = 0
                End If
            Else
                If cboUM.Text <> "" And _
                    cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") = cboUM.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty") = IIf(txtInrQty.Text.Trim = "", 0, txtInrQty.Text.Trim)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty") = IIf(txtMtrQty.Text.Trim = "", 0, txtMtrQty.Text.Trim)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft") = IIf(txtCft.Text.Trim = "", 0, Format(CDec(IIf(txtCft.Text.Trim = "", 0, txtCft.Text.Trim)), "######0.####"))
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") = ""
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft") = 0
                End If
            End If
            If txtUMFtr.Text.Trim = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_conftr") = 1
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_conftr") = CInt(IIf(txtUMFtr.Text.Trim = "", 1, txtUMFtr.Text.Trim))
            End If
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm") = IIf(Trim(txtCBM.Text) = "", 0, Trim(txtCBM.Text))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm") = cboDtlPrcTrm.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm") = cboFtyPrcTrm.Text.Trim '*** factory price term
            '*** Phase 2
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm") = cboTranTrm.Text.Trim

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin") = Format(CDec(IIf(txtInrdin.Text.Trim = "", 0, txtInrdin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin") = Format(CDec(IIf(txtInrwin.Text.Trim = "", 0, txtInrwin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin") = Format(CDec(IIf(txtInrhin.Text.Trim = "", 0, txtInrhin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin") = Format(CDec(IIf(txtMtrdin.Text.Trim = "", 0, txtMtrdin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin") = Format(CDec(IIf(txtMtrwin.Text.Trim = "", 0, txtMtrwin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin") = Format(CDec(IIf(txtMtrhin.Text.Trim = "", 0, txtMtrhin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm") = Format(CDec(IIf(txtInrdcm.Text.Trim = "", 0, txtInrdcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm") = Format(CDec(IIf(txtInrwcm.Text.Trim = "", 0, txtInrwcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm") = Format(CDec(IIf(txtInrhcm.Text.Trim = "", 0, txtInrhcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm") = Format(CDec(IIf(txtMtrdcm.Text.Trim = "", 0, txtMtrdcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm") = Format(CDec(IIf(txtMtrwcm.Text.Trim = "", 0, txtMtrwcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm") = Format(CDec(IIf(txtMtrhcm.Text.Trim = "", 0, txtMtrhcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_in") = Format(CDec(IIf(txtInrdin.Text.Trim = "", 0, txtInrdin.Text.Trim)), "######0.####") + "x" + _
                                            Format(CDec(IIf(txtInrwin.Text.Trim = "", 0, txtInrwin.Text.Trim)), "######0.####") + "x" + _
                                            Format(CDec(IIf(txtInrhin.Text.Trim = "", 0, txtInrhin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_in") = Format(CDec(IIf(txtMtrdin.Text.Trim = "", 0, txtMtrdin.Text.Trim)), "######0.####") + "x" + _
                                             Format(CDec(IIf(txtMtrwin.Text.Trim = "", 0, txtMtrwin.Text.Trim)), "######0.####") + "x" + _
                                             Format(CDec(IIf(txtMtrhin.Text.Trim = "", 0, txtMtrhin.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_cm") = Format(CDec(IIf(txtInrdcm.Text.Trim = "", 0, txtInrdcm.Text.Trim)), "######0.####") + "x" + _
                                            Format(CDec(IIf(txtInrwcm.Text.Trim = "", 0, txtInrwcm.Text.Trim)), "######0.####") + "x" + _
                                            Format(CDec(IIf(txtInrhcm.Text.Trim = "", 0, txtInrhcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_cm") = Format(CDec(IIf(txtMtrdcm.Text.Trim = "", 0, txtMtrdcm.Text.Trim)), "######0.####") + "x" + _
                                             Format(CDec(IIf(txtMtrwcm.Text.Trim = "", 0, txtMtrwcm.Text.Trim)), "######0.####") + "x" + _
                                             Format(CDec(IIf(txtMtrhcm.Text.Trim = "", 0, txtMtrhcm.Text.Trim)), "######0.####")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grswgt") = Format(CDec(IIf(txtGrswgt.Text.Trim = "", 0, txtGrswgt.Text.Trim)), "##0.###")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_netwgt") = Format(CDec(IIf(txtNetwgt.Text.Trim = "", 0, txtNetwgt.Text.Trim)), "##0.###")

            If Trim(txtPeriod.Text) <> "" Then

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutdat") = txtPeriod.Text.Trim + "-01"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutdat") = "1900-01-01"
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckitr") = txtPckItr.Text.Trim

            If txtCosMth.Text.Trim = "-" Or txtCosMth.Text.Trim = "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cosmth") = ""
            Else
                'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cosmth") = Microsoft.VisualBasic.Left(txtCosMth.Text.Trim, InStr(txtCosMth.Text.Trim, " - ") - 1)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cosmth") = txtCosMth.Text
            End If
            If txtCosMth.Text = " - " Then txtCosMth.Text = ""

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_stkqty") = IIf(txtStkQty.Text.Trim = "", 0, txtStkQty.Text.Trim)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusqty") = IIf(txtCusQty.Text.Trim = "", 0, txtCusQty.Text.Trim)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpqty") = IIf(txtSmpQty.Text.Trim = "", 0, txtSmpQty.Text.Trim)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpunt") = txtSmpUnt.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpprc") = IIf(txtSmpPrc.Text.Trim = "", 0, Format(CDec(IIf(txtSmpPrc.Text.Trim = "", 0, txtSmpPrc.Text.Trim)), "########0.0000"))

            '*** Update Record Set Value of Original MOQ/MOA
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moflag") = IIf(optMOA.Checked = True, "A", IIf(optMOQ.Checked = True, "Q", ""))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoq") = IIf(ORI_MOQ = "", 0, ORI_MOQ)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoa") = IIf(ORI_MOA = "", 0, Format(CDec(IIf(ORI_MOA = "", 0, ORI_MOA)), "######0"))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq") = IIf(txtMoq.Text.Trim = "", 0, txtMoq.Text.Trim)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moqunttyp") = Trim(Replace(lblCurrMOQ.Text.Trim, "=", ""))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa") = IIf(txtMoa.Text.Trim = "", 0, Format(CDec(IIf(txtMoa.Text.Trim = "", 0, txtMoa.Text.Trim)), "######0"))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde") = txtCurCde1.Text.Trim

            If cboCus2No.Text.Trim <> "" Then
                If optGM.Checked = True Then
                    gmmu = "GM"
                Else
                    gmmu = "MU"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prcsec") = gmmu
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grsmgn") = IIf(txtGrsMgn.Text.Trim = "", 0, Format(CDec(IIf(txtGrsMgn.Text.Trim = "", 0, txtGrsMgn.Text.Trim)), "##0.###"))
            End If

            If optOneTimY.Checked = True Then
                onetim = "Y"
            Else
                onetim = "N"
            End If
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim") = onetim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_discnt") = IIf(txtDiscnt.Text.Trim = "", 0, Format(CDec(IIf(txtDiscnt.Text.Trim = "", 0, txtDiscnt.Text.Trim)), "##0.###"))

            '*** Phase 2
            If txtBasPrc.Text.Trim <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = txtBasPrc.Text.Trim
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = "0"
            End If

            '*** Update CIH value to record set
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHCURR") = txtCIHcur.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("CIHAMT") = txtCIHprc.Text.Trim

            '*** Phase 2
            If txtItmNoVen.Text = "" Then
                If cboPcking.Text <> "" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp") = IIf(txtCus1Sp.Text.Trim = "", 0, Format(CDec(IIf(txtCus1Sp.Text.Trim = "", 0, txtCus1Sp.Text.Trim)), "########0.0000"))
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp") = IIf(txtCus2Sp.Text.Trim = "", 0, Format(CDec(IIf(txtCus2Sp.Text.Trim = "", 0, txtCus2Sp.Text.Trim)), "########0.0000"))

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp") = IIf(txtCus1Dp.Text.Trim = "", 0, Format(CDec(IIf(txtCus1Dp.Text.Trim = "", 0, txtCus1Dp.Text.Trim)), "########0.0000"))
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp") = IIf(txtCus2Dp.Text.Trim = "", 0, Format(CDec(IIf(txtCus2Dp.Text.Trim = "", 0, txtCus2Dp.Text.Trim)), "########0.0000"))
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp") = 0

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp") = 0
                End If
            Else
                If cboUM.Text <> "" And _
                    cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp") = IIf(txtCus1Sp.Text.Trim = "", 0, Format(CDec(IIf(txtCus1Sp.Text.Trim = "", 0, txtCus1Sp.Text.Trim)), "########0.0000"))
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp") = IIf(txtCus2Sp.Text.Trim = "", 0, Format(CDec(IIf(txtCus2Sp.Text.Trim = "", 0, txtCus2Sp.Text.Trim)), "########0.0000"))

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp") = IIf(txtCus1Dp.Text.Trim = "", 0, Format(CDec(IIf(txtCus1Dp.Text.Trim = "", 0, txtCus1Dp.Text.Trim)), "########0.0000"))
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp") = IIf(txtCus2Dp.Text.Trim = "", 0, Format(CDec(IIf(txtCus2Dp.Text.Trim = "", 0, txtCus2Dp.Text.Trim)), "########0.0000"))
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp") = 0

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp") = 0
                End If
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pcprc") = txtPCPrc_Text_round_5
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc") = IIf(chkPC.Checked = True, "Y", "")

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno") = cboVenNo.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_subcde") = txtSubCde.Text.Trim
            '*** fill custom vendor & sub code

            If Not (cboCusVen.Text.Trim = "" And _
                                    cboDV.Text.Trim = "" And _
                                    cboTV.Text.Trim = "" And _
                                    cboFA.Text.Trim = "") Then

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven") = cboCusVen.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_DV") = cboDV.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_TV") = cboTV.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyaud") = cboFA.Text.Trim

            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cussub") = txtCusSub.Text.Trim

            '*** Phase 2
            If txtItmNoVen.Text <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde") = txtFCurCde.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc") = IIf(txtFtyPrc.Text.Trim = "", 0, Format(CDec(IIf(txtFtyPrc.Text.Trim = "", 0, txtFtyPrc.Text.Trim)), "########0.0000"))
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst") = IIf(txtFtyCst.Text.Trim = "", 0, Format(CDec(IIf(txtFtyCst.Text.Trim = "", 0, txtFtyCst.Text.Trim)), "########0.0000"))

                'If cboUM.Text.Trim = "" Or txtCft.Text.Trim = "0" Or txtCBM.Text.Trim = "0" Or _
                '    cboDtlPrcTrm.Text.Trim = "" Or cboFtyPrcTrm.Text.Trim = "" Or cboTranTrm.Text.Trim = "" Then
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde") = ""
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc") = 0
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst") = 0
                'Else
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde") = txtFCurCde.Text.Trim
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc") = IIf(txtFtyPrc.Text.Trim = "", 0, Format(CDec(IIf(txtFtyPrc.Text.Trim = "", 0, txtFtyPrc.Text.Trim)), "########0.0000"))
                '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst") = IIf(txtFtyCst.Text.Trim = "", 0, Format(CDec(IIf(txtFtyCst.Text.Trim = "", 0, txtFtyCst.Text.Trim)), "########0.0000"))
                'End If
            Else
                '*** Phase 2
                If cboPcking.Text.Trim <> "" And cboPcking.Text.Trim <> " / 0 / 0 / 0 / 0 / / /" Then
                    'If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde") = txtFCurCde.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc") = IIf(txtFtyPrc.Text.Trim = "", 0, Format(CDec(IIf(txtFtyPrc.Text.Trim = "", 0, txtFtyPrc.Text.Trim)), "########0.0000"))
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst") = IIf(txtFtyCst.Text.Trim = "", 0, Format(CDec(IIf(txtFtyCst.Text.Trim = "", 0, txtFtyCst.Text.Trim)), "########0.0000"))
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde") = ""
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst") = 0
                End If
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venitm") = txtVenItm.Text.Trim

            If InStr(cboHrmCde.Text, " - ") > 0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde") = Microsoft.VisualBasic.Left(cboHrmCde.Text.Trim, InStr(cboHrmCde.Text.Trim, " - ") - 1)
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde") = cboHrmCde.Text.Trim
            End If
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dtyrat") = IIf(txtDtyRat.Text.Trim = "", 0, Format(CDec(IIf(txtDtyRat.Text.Trim = "", 0, txtDtyRat.Text.Trim)), "##0.###"))
            '*** Phase 2
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususdcur") = cboCusUsdCurr.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscadcur") = cboCusCadCurr.Text.Trim

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd") = IIf(txtCusUsd.Text.Trim = "", 0, Format(CDec(IIf(txtCusUsd.Text.Trim = "", 0, txtCusUsd.Text.Trim)), "########0.0000"))
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad") = IIf(txtCusCad.Text.Trim = "", 0, Format(CDec(IIf(txtCusCad.Text.Trim = "", 0, txtCusCad.Text.Trim)), "########0.0000"))


            '*** Check Quotation Item Status
            '*** Phase 2
            'If txtItmNoVen.Text = "" Then
            '    If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And cboColCde.Text <> "" And _
            '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc").ToString) > 0 And _
            '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts").ToString <> "I - Inactive" Then
            '        txtQutItmSts.Text = "A - Active"
            '    Else
            '        'txtQutItmSts.Text = "INCOMPLETE"
            '        txtQutItmSts.Text = "I - Inactive"
            '    End If
            'Else
            '    If cboUM.Text <> "" And _
            '        cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" And txtColCde.Text <> "" And _
            '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc").ToString) > 0 And _
            '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts").ToString <> "I - Inactive" Then
            '        txtQutItmSts.Text = "A - Active"
            '    Else
            '        txtQutItmSts.Text = "I - Inactive"
            '    End If
            'End If

            txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "W" _
                    And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = "N" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "W - Wait for Approval"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
            End If
            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "E" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "E - Expiry"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
            End If
            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "A" _
                    Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = "Y" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "A - Active"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
            End If

            '''20140127 
            If chkApproveDtl.Checked = True Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = "Y"
            End If



            If optImageY.Checked = True Then
                image = "Y"
            Else
                image = "N"
            End If
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_image") = image
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imgpth") = IIf(IsDBNull(pth), "", pth)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_TOShipport") = txtTOShipport.Text

            If Not IsDate(txtDTLFtyShpDateStr.Text) Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = txtDTLFtyShpDateStr.Text
            End If
            '''special handle 20140122
            If txtDTLFtyShpDateStr.Text.Trim = "11/19/00" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
            End If
            If txtDTLFtyShpDateStr.Text.Trim = "11/19/2000" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
            End If
            If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr"), "11/19/2000") =0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpstr") = "01/01/1900"
            End If


            If Not IsDate(txtDTLFtyShpDateEnd.Text) Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = txtDTLFtyShpDateEnd.Text
            End If
            '''special handle 20140122
            If txtDTLFtyShpDateEnd.Text.Trim = "11/19/00" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
            End If
            If txtDTLFtyShpDateEnd.Text.Trim = "11/19/2000" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
            End If
            If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend"), "11/19/2000") =0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyshpend") = "01/01/1900"
            End If


            If Not IsDate(txtDTLCustShpDateStr.Text) Then

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"

            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = txtDTLCustShpDateStr.Text
            End If
            '''special handle 20140122
            If txtDTLCustShpDateStr.Text.Trim = "11/19/00" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"
            End If
            If txtDTLCustShpDateStr.Text.Trim = "11/19/2000" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"
            End If
            If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr"), "11/19/2000") =0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpstr") = "01/01/1900"
            End If


            If Not IsDate(txtDTLCustShpDateEnd.Text) Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = txtDTLCustShpDateEnd.Text
            End If
            '''special handle 20140122
            If txtDTLCustShpDateEnd.Text.Trim = "11/19/00" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
            End If
            If txtDTLCustShpDateEnd.Text.Trim = "11/19/2000" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
            End If
            If DateDiff("d", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend"), "11/19/2000") =0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cushpend") = "01/01/1900"
            End If


            'Fill QUPRCEMT
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_itmno") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_untcde") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_inrqty") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_mtrqty") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_cft") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_cbm") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm")

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftyprctrm") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_prctrm") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_trantrm") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_fcurcde") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_fcurcde")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycst") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftyprc") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc")

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = IIf(txtMU.Text = "", 0, txtMU.Text)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = IIf(txtPckCstAmt.Text = "", 0, txtPckCstAmt.Text)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = IIf(txtItmCommAmt.Text = "", 0, txtItmCommAmt.Text)

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_cus1sp") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp")
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_cus1dp") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp")

            If (rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString = "NEW" Or _
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString = "UPD") And _
                IIf(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq").ToString = "", 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq")) = 0 Then
                '*** Phase 2
                If txtItmNoVen.Text = "" Then
                    If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" Then
                        'bug
                        If Not rs_IMPCKINF.Tables("RESULT") Is Nothing Then
                            If (rs_IMPCKINF.Tables("RESULT").Rows.Count > 0) Then
                                If rs_IMPCKINF.Tables("RESULT").Rows.Count > 0 Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckseq")

                                    '******************* Update vendor type and cat to QUOTNDTL **********
                                    If rs_IMBASINF.Tables("RESULT").Rows.Count > 0 Then
                                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp") = rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp")
                                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("ibi_catlvl3") = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_catlvl3")
                                    End If
                                End If
                            End If
                        End If

                    Else
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_in") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_in") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_cm") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_cm") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grswgt") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_netwgt") = 0
                    End If
                Else
                    If cboUM.Text <> "" And _
                        cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = 1

                        '******************* Update vendor type and cat to QUOTNDTL **********
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp") = "E"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("ibi_catlvl3") = "Standard"
                    Else
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_in") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_in") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_cm") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_cm") = "0x0x0"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grswgt") = 0
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_netwgt") = 0
                    End If
                End If
            ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString = "UPD" And _
                IIf(Not IsNumeric(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq").ToString), 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq")) = 0 Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckseq")
            End If

        End If




    End Sub


















    'TESTED FUNCTION

    Private Sub QUM00001_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Cursor = Cursors.WaitCursor

        ReDim Preserve flag_no_update_mu(3000)
        ReDim Preserve flag_delete_to_seq(3000)

        gbPanelCstEmt.Visible = False
        gbPanelCstEmt.SendToBack()



        flgRenewing = False
        flgApplyAllPC = False
        flgLoadApplyAllPC = False
        flghdrPC = False

        Call ShowFooterBar(False)

        Call FillCompCombo(gsUsrID, cboCoCde)         'Get availble Company
        Call GetDefaultCompany(cboCoCde, txtCoNam)

        Me.KeyPreview = True

        Call AccessRight(Me.Name)
        Enq_right_local = Enq_right
        Del_right_local = Del_right

        'Call getDefault_Path()

        Call fillParameter()

        Call setStatus(cModeInit)
        sMode = cModeInit

        Call Formstartup(Me.Name)
        cus1_rounding = 4


        '*** Phase 2
        'Set Size and Location for the Panels
        'PanelCptBkd.Width = cPanelSizeWidth
        'PanelCptBkd.Height = cPanelSizeHeight
        'PanelCptBkd.Location = New Point(cPanelLocationX, cPanelLocationY)
        ''PanelPrcEmt.Width = cPanelSizeWidth
        ''PanelPrcEmt.Height = cPanelSizeHeight
        ''PanelPrcEmt.Location = New Point(cPanelLocationX, cPanelLocationY)
        'PanelItmNoConv.Width = cPanelSizeWidth
        'PanelItmNoConv.Height = cPanelSizeHeight
        PanelItmNoConv.Location = New Point(cPanelLocationX, cPanelLocationY)
        'PanelItmNoSelect.Width = cPanelSizeWidth
        'PanelItmNoSelect.Height = cPanelSizeHeight
        PanelItmNoSelect.Location = New Point(cPanelLocationX, cPanelLocationY)

        'PanelMutShp.Width = cPanelSizeWidth
        'PanelMutShp.Height = cPanelSizeHeight
        'PanelMutShp.Location = New Point(cPanelLocationX, cPanelLocationY)

        sMode = cModeInit
        formInit(cModeInit)

        count_sts_E = 0
        count_sts_W = 0


        no_need_check_btcindex = False
        gf_packing_miss = False

        cmdUpdate.Enabled = False
        cmdRenew.Enabled = False

        '''III
        lblPCPrcP.Visible = False
        txtPCPrcCurP.Visible = False
        txtPCPrcP.Visible = False

        Cursor = Cursors.Default

        txtHDRFtyShpDateStr.Text = ""
        txtHDRFtyShpDateEnd.Text = ""
        txtHDRCustShpDateStr.Text = ""
        txtHDRCustShpDateEnd.Text = ""

    End Sub

    Private Sub cmdAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdAdd.Click
        Call cmdAddClick()
        sMode = cModeAdd
        Call formInit(cModeAdd)
        Recordstatus = True
    End Sub

    Private Sub cmdAddClick()
        Add_flag = True
        txtQutNo.Text = ""

        'Call fillParameter()

        Call setStatus(cModeAdd)
        sMode = cModeAdd

        gspStr = "sp_select_CUBASINF_PRI '" & cboCoCde.Text & "','" & gsUsrID & "','" & "QU" & "'"
        'Fixing global company code problem at 20100420
        gsCompany = Trim(cboCoCde.Text)
        Update_gs_Value(gsCompany)

        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
        gspStr = ""
        Me.Cursor = Windows.Forms.Cursors.Default

        If rtnLong <> RC_SUCCESS Then  '*** An error has occured
            MsgBox("Error on loading QUM00001  sp_select_CUBASINF_PRI : " & rtnStr)
            Exit Sub
        Else
            rs_CUBASINF_P = rs.Copy() '*** Cus for company
        End If
        Call fillcboPriCust() '

        If cboCus1No.Enabled And cboCus1No.Visible Then cboCus1No.Focus()
        cmdGenSmp.Enabled = False
        cmdGenTent.Enabled = False

        gsCompany = Trim(cboCoCde.Text)
       Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNHDR '',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUOTNHDR, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdAddClick sp_select_QUOTNHDR :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUOTNHDR.Tables("RESULT").Columns.Count - 1
            rs_QUOTNHDR.Tables("RESULT").Columns(i).ReadOnly = False
        Next i



        'Call insert_QUOTNHDR()
    End Sub


    Private Sub cmdSave_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdSave.Click


        ''If btcQUM00001.SelectedIndex <> 1 Then
        ''    MsgBox("Please save item in Details Page (2)!")
        ''    Exit Sub
        ''End If


        Cursor = Cursors.WaitCursor
        Call cmdSaveClick()
        Cursor = Cursors.Default
        txtQutNo.Focus()


    End Sub
    ''20130729
    Public Sub qutcopied(ByVal tmpbocono, ByVal tmpqutno)
        pub_copy_qutno = (tmpqutno)
        pub_copy_cbocono = (tmpbocono)

    End Sub
    Public Sub copy_to_new_cocus(ByVal tmpbocono, ByVal tmpcus1no, ByVal tmpcus2no)
        pub_copy_to_new_cocde = tmpbocono
        pub_copy_to_new_cus1no = tmpcus1no
        pub_copy_to_new_cus2no = tmpcus2no

    End Sub


    Public Sub qutcopied_cus2(ByVal tmp_cus2)
        pub_copy_cus2 = tmp_cus2

    End Sub
    Public Function get_qutcopied_cus2()
        get_qutcopied_cus2 = pub_copy_cus2

    End Function


    Private Sub cmdSaveClick()
        '        Cursor = Cursors.WaitCursor

        Dim tmpqutno As String
        Dim tmpcocde As String

        If sMode <> cModeAdd Then
            tmpqutno = txtQutNo.Text
            tmpcocde = cboCoCde.Text
        End If


        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        If check_QuotationHeader() = False Then
            Exit Sub
        End If

        If Recordstatus = False Then
            MsgBox("No update for the Quotation, Quotation not saved!")
            Exit Sub
        End If

        If check_QuotationDetail() = False Then
            Exit Sub
        End If

        ''' check for 3rd road
        Call fill_QUOTNDTL()

        If check_all_items() = False Then
            Exit Sub
        End If

        If sMode = cModeAdd Or sMode = cModeUpd Then
            If check_dup_Packing() = True Then
                Dim qutitmno_real As String
                Dim qutitmno_tmp As String
                Dim qutitmno_ven As String
                Dim qutitmno_venno As String
                qutitmno_real = txtItmNoReal.Text
                qutitmno_tmp = txtItmNoTmp.Text
                qutitmno_ven = txtItmNoVen.Text
                qutitmno_venno = cboItmNoVen.text

                Call insert_QUOTNDTL(False)
                Call display_Detail(txtSeq.Text)

                Call reset_detail_control("Detail_Init", "All")
                Call reset_detail_data("Detail_Init", "All")

                txtItmNoReal.Text = qutitmno_real
                txtItmNoTmp.Text = qutitmno_tmp
                txtItmNoVen.Text = qutitmno_ven
                cboItmNoVen.text = qutitmno_venno

                btcQUM00001.SelectedIndex = 1
                MsgBox("Duplicate packing selected!")
            Else

                ''0802
                'Call fill_QUOTNHDR()
                Call fill_QUOTNDTL()
                '''0811
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
                End If
            End If
        End If

        '*** Check the unavailable Quotation Status
        If txtQutSts.Text <> "" Then
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Then
                MsgBox("Quotation Status is not available, cannot SAVE.")
                Exit Sub
            End If
        End If

        If delete_All() = True Then
            MsgBox("Cannot delete all details line records.")
            Exit Sub
        End If

        If sMode = cModeAdd Then
            Dim rs As New DataSet

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_DOC_GEN '" & cboCoCde.Text & "','QO','" & gsUsrID & "'"
            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cmdSaveClick sp_select_DOC_GEN :" & rtnStr)
                Exit Sub
            End If

            qutNo = rs.Tables("RESULT").Rows(0)(0).ToString

            'update all transaction with Quotation Number
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_qutno") = qutNo

            Dim i As Integer
            For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutno") = qutNo
                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qpe_qutno") = qutNo
            Next i

            'For i = 0 To rs_QUPRCEMT.Tables("RESULT").Rows.Count - 1
            '    rs_QUPRCEMT.Tables("RESULT").Rows(0).Item("qpe_qutno") = qutNo
            'Next i

            For i = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1
                rs_QUCPTBKD.Tables("RESULT").Rows(i).Item("qcb_qutno") = qutNo
            Next i

            For i = 0 To rs_QUASSINF.Tables("RESULT").Rows.Count - 1
                rs_QUASSINF.Tables("RESULT").Rows(i).Item("qai_qutno") = qutNo
            Next i

            'For i = 0 To rs_QUDTLSHP.Tables("RESULT").Rows.Count - 1
            '    rs_QUDTLSHP.Tables("RESULT").Rows(0).Item("qds_qutno") = qutNo
            'Next i
        End If


        Call check_Status()

        If save_QuotationHeader() = False Then
            MsgBox("Error on saving Quotation Header")
            Exit Sub
        End If

        If save_QuotationDetail() = False Then
            MsgBox("Error on saving Quotation Detail")
            Exit Sub
        End If

        If sMode = cModeAdd Then
            tmpcocde = cboCoCde.Text
            tmpqutno = qutNo
        End If


        Call linked_tentative()
        

        MsgBox("Quotation Saved : " & tmpqutno)

        sMode = cModeInit
        Call formInit(cModeInit)

			    '''20140212
        ''' call 
        Call setStatus(cModeClear)
        ''20130729
        '        Call formInit(cModeAdd)

        txtQutNo.Text = tmpqutno
        cboCoCde.Text = tmpcocde

        cmdRenew.Enabled = False
        cmdUpdate.Enabled = False

        Cursor = Cursors.Default
    End Sub

    Private Sub cmdSearch_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSearch.Click
        Dim frmSYM00018 As New SYM00018


        '20130909  
        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)


        frmSYM00018.keyName = txtQutNo.Name
        frmSYM00018.strModule = "QU"

        frmSYM00018.show_frmSYM00018(Me)
    End Sub

    Private Sub cmdInsRow_BackgroundImageChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdInsRow.BackgroundImageChanged

    End Sub

    Private Sub cmdInsRow_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdInsRow.Click

        flag_cmdInsRow_Click = True

        If check_insert_QUOTNDTL() = True Then
            Dim newqutseq As Integer

            ''20140320 fill befor new
            Call fill_QUOTNDTL()


            newqutseq = insert_QUOTNDTL(True)


            no_Display_Detail = False
            Call display_Detail(newqutseq)
            Call reset_detail_control("Detail_Init", "All")
            Call reset_detail_data("Detail_Init", "All")
        Else
            Exit Sub
        End If

        '''20131015
        txtItmNoReal.Focus()

        Exit Sub

        '*** Phase 2 comment it
        'If flggrdMatbkd = True Then
        '    Call AddComponent()
        '    dgMatBkd.Focus()
        '    Exit Sub
        'End If

        Insert_flag = True
        btcQUM00001.SelectedIndex = 1

        '*** Check Combo in list or not ?
        If not_in_Combo_HDR() = True Then
            Exit Sub
        End If

        If not_in_Combo_DTL() = True Then
            Exit Sub
        End If

        '*** Check Item Exist ?
        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If txtItmNo.Text <> "" And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True) Then
                If not_exist_ITEM() = True Then
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                    " - Item not found" + Chr(13) + Chr(10) + _
                    " - It is a BOM Item" + Chr(13) + Chr(10) + _
                    " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                    " - It is held by the system" + Chr(13) + Chr(10) + _
                    " - Vendor is not available", vbExclamation, "Warning ir")
                    'add for debug
                    If txtItmNoReal.Text <> "" Then
                        If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                            txtItmNoReal.Focus()
                        End If
                    Else
                        If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                            txtItmNoTmp.Focus()
                        End If
                    End If
                    Exit Sub
                End If
            End If
        End If

        '*** Check Dupliate Packing
        If check_dup_Packing() = True Then
            btcQUM00001.SelectedIndex = 1

            '*** Phase 2
            If Not setNewItemFormat(txtItmNo.Text) Then
                MsgBox("Packing & Color are already exists.")
                cboColCde.Text = ""
                txtColCde.Text = ""
                txtColDsc.Text = ""
            End If

            cboPcking.Text = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            '*** Phase 2 comment it
            'txtHstRef.Text = ""
            'txtQutDat.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            '*** Phase 2
            txtCBM.Text = ""

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   '*** factory price term
            '*** Phase 2
            cboTranTrm.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset Original MOQ/MOA
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtPckItr.Text = ""
            txtDiscnt.Text = "0"
            txtCus1Sp.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus1Dp.Text = "0"
            txtCus1DpP.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus2Dp.Text = "0"

            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            '*** Reset CIH Currency and Price
            txtCIHprc.Text = ""
            txtCIHcur.Text = ""
            txtPeriod.Text = ""
            txtSmpPrc.Text = ""
            txtSmpUnt.Text = ""

            Call ABUASST(txtItmNo.Text, "HIDE")
            Call ABUASST(txtItmNo.Text, "HIDEPRC")

            txtInrdin.Text = "0"
            txtInrwin.Text = "0"
            txtInrhin.Text = "0"
            txtMtrdin.Text = "0"
            txtMtrwin.Text = "0"
            txtMtrhin.Text = "0"

            txtInrdcm.Text = "0"
            txtInrwcm.Text = "0"
            txtInrhcm.Text = "0"
            txtMtrdcm.Text = "0"
            txtMtrwcm.Text = "0"
            txtMtrhcm.Text = "0"

            txtGrswgt.Text = "0"
            txtNetwgt.Text = "0"
            Exit Sub
        End If

        If invalid_Detail() = True Then
            '*** Phase 2 comment it
            'If IsEmptySpecPck = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please fill in Special Packaging Desc.")
            '    If txtSpecpck.Enabled = True Then
            '        txtSpecpck.Focus()
            '    End If
            '    IsEmptySpecPck = False
            'End If

            'If IsEmptyDuty = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please select HSTU / Tariff #.", vbOKOnly, "Duty Rate")
            '    IsEmptyDuty = False
            'End If
            Exit Sub
        End If

        Call check_update_Detail()

        Call fill_QUOTNDTL()

        Dim tmp_itmtyp As String

        tmp_itmtyp = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmtyp").ToString

        no_Display_Detail = True
        dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
        rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort() = "qud_qutseq"
        no_Display_Detail = False
        txtSeq.Text = rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1)("qud_qutseq") + 1

        Call reverse_Detail()

        no_Display_Detail = True
        drNewRow = rs_QUOTNDTL.Tables("RESULT").NewRow
        no_Display_Detail = False
        drNewRow("mode") = "NEW"
        drNewRow("qud_qutseq") = rs_QUOTNDTL.Tables("RESULT").Rows.Count
        optImageN.Checked = True
        drNewRow("qud_apprve") = ""
        drNewRow("qud_itmtyp") = tmp_itmtyp
        rs_QUOTNDTL.Tables("RESULT").Rows.Add(drNewRow)

        sReadingIndexQ = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1

        '''20140129
        Call refresh_Price()



        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
            cmdBackD.Enabled = True
            cmdNextD.Enabled = False
        ElseIf rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            cmdBackD.Enabled = False
            cmdNextD.Enabled = False
        ElseIf sReadingIndexQ = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 Then
            cmdBackD.Enabled = True
            cmdNextD.Enabled = False
        End If

        If cboCus2No.Text <> "" Then
            If Add_flag = False Then
                If rs_QUOTNHDR.Tables("RESULT").Rows(0)("cpi_prcsec").ToString = "GM" Then
                    optGM.Checked = True
                    optMU.Checked = False
                Else
                    optGM.Checked = False
                    optMU.Checked = True
                End If
            Else
                If rs_CUBASINF_S.Tables("RESULT").Rows(0)("cpi_prcsec").ToString = "GM" Then
                    optGM.Checked = True
                    optMU.Checked = False
                Else
                    optGM.Checked = False
                    optMU.Checked = True
                End If
            End If
        End If

        If cmdAss.Enabled = False Then
            cmdAss.Enabled = False
        Else
            cmdAss.Enabled = True
        End If

        cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
        'cmdUpdPrc.Enabled = False
        cmdUpdateMO.Enabled = False
        '*** Phase 2 comment it
        'chkTBM.Checked = False
        'chkTBM.Enabled = True
        'cmdTBM.Enabled = False
        txtDiscnt.Enabled = True
        txtCus1Dp.Enabled = True
        '*** Phase 2 comment it
        'txtItmNo.Enabled = True

        '*** Phase 2
        If txtItmNoReal.Text <> "" Then
            If isNewItemFormat(txtItmNo.Text, True) Then
                txtItmNoReal.Text = Microsoft.VisualBasic.Left(txtItmNo.Text, 11).ToUpper
                txtItmNo.Text = txtItmNoReal.Text
                txtItmNoReal.Enabled = True
            End If
            If txtItmNoReal.Enabled And txtItmNoReal.Visible Then txtItmNoReal.Focus()
            txtItmNoReal.SelectAll()
        ElseIf txtItmNoTmp.Text <> "" And btcQUM00001.SelectedIndex = 1 Then

            txtItmNoTmp.Text = txtItmNo.Text.ToUpper
            '20130807
            txtItmNo.Text = ""
            txtItmNoReal.Text = ""

            'txtItmNo.Text = txtItmNoTmp.Text
            txtItmNoTmp.Enabled = True
            If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then txtItmNoTmp.Focus()
            txtItmNoTmp.SelectAll()
        Else
            txtItmNoVen.Text = txtItmNo.Text.ToUpper
            txtItmNo.Text = txtItmNoVen.Text
            txtItmNoVen.Enabled = True
            If txtItmNoVen.Enabled And txtItmNoVen.Visible Then txtItmNoVen.Focus()
            txtItmNoVen.SelectAll()
        End If

        Call reset_detail_control("Detail_Init", "All")
        Call reset_detail_data("Detail_Init", "All")

    End Sub

    Private Sub btcQUM00001_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles btcQUM00001.SelectedIndexChanged
        Select Case PreviousTab

            Case 0 'Header page check - check for Add mode

                If sMode = cModeAdd Then
                    ''2nd/auto change index

                    If no_need_check_btcindex = False Then

                        If check_QuotationHeader() = True Then
                            no_need_check_btcindex = True

                        Else
                            no_need_check_btcindex = True
                            btcQUM00001.SelectedIndex = 0
                        End If
                    Else
                        no_need_check_btcindex = False
                    End If



                    Call fill_QUOTNHDR()
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*ADD*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*NEW*~"
                    End If
                End If

            Case 1
                If sMode = cModeAdd Or sMode = cModeUpd Then

                    Call fill_QUOTNDTL()

                    '''0811
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
                    End If
                End If

                dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
                Call display_dgOthDtl("A")

            Case 2
                If sMode = cModeAdd Or sMode = cModeUpd Then

                End If
        End Select

        Select Case btcQUM00001.SelectedIndex
            Case 0
            Case 1

                cboCus2No.Enabled = False


                Dim qutseq As Integer
                If dgOthDtl.CurrentCell Is Nothing Then
                    qutseq = 0
                Else
                    qutseq = dgOthDtl.Item(dgOthDtl_qud_qutseq, dgOthDtl.CurrentCell.RowIndex).Value
                End If

                'no_Display_Detail = False
                Dim temp_record_status As Boolean
                temp_record_status = Recordstatus
                Call display_Detail(qutseq)
                Recordstatus = temp_record_status

                If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                    Exit Sub
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
                    Exit Sub
                End If
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "Y" Then
                    Exit Sub
                End If

                Call ShowFooterBar(True)
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    '''bug should see the recordset instead of text fileds
                    ''' 0822
                    '''0825??

                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal")) And _
                    IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp")) And _
                    IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven")) Then
                        Exit Sub
                    End If


                    If (rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal")) = "" And _
                (rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp")) = "" And _
                (rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven")) = "" Then

                        '                    If txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "" Then
                        reset_detail_control("Detail_Init", "All")
                    Else

                         




                        '''0811
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update", "RealItem")
                            End If
                        Else
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update_Info", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update_Info", "RealItem")
                            End If
                        End If
                    End If
                    'Disable packing
                    cboPcking.Enabled = False
                ElseIf sMode = cModeRead Then
                    reset_detail_control("Detail_Read", "All")
                End If
            Case 2
                Call setStatus_dgOthDtl(sMode)
                dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
                dgOthDtl.Refresh()

        End Select

        PreviousTab = btcQUM00001.SelectedIndex
        flag_cmdInsRow_Click = False
    End Sub

    Private Sub btcQUM00001_Selecting(ByVal sender As Object, ByVal e As System.Windows.Forms.TabControlCancelEventArgs) Handles btcQUM00001.Selecting
        Select Case PreviousTab
            Case 0 'Header page check - check for Add mode
                If sMode = cModeAdd Then
                    ''duplicate 
                    'If check_QuotationHeader() = True Then
                    '    Call fill_QUOTNHDR()
                    '    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*ADD*~" Then
                    '        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*NEW*~"
                    '    End If
                    'End If
                End If
            Case 1
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    Dim qutitmno_real As String
                    Dim qutitmno_tmp As String
                    Dim qutitmno_ven As String
                    Dim qutitmno_venno As String
                    qutitmno_real = txtItmNoReal.Text
                    qutitmno_tmp = txtItmNoTmp.Text
                    qutitmno_ven = txtItmNoVen.Text
                    qutitmno_venno = cboItmNoVen.text
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("DEL") <> "Y" Then
                        If qutitmno_real = "" And qutitmno_tmp = "" And qutitmno_ven = "" Then
                            MsgBox("Please enter Item Number!")
                            e.Cancel = True
                            Exit Sub
                        ElseIf check_dup_Packing() = True Then
                            MsgBox("Duplicate packing selected!")

                            Call insert_QUOTNDTL(False)
                            Call display_Detail(txtSeq.Text)

                            Call reset_detail_control("Detail_Init", "All")
                            Call reset_detail_data("Detail_Init", "All")

                            txtItmNoReal.Text = qutitmno_real
                            txtItmNoTmp.Text = qutitmno_tmp
                            txtItmNoVen.Text = qutitmno_ven
                            cboItmNoVen.text = qutitmno_venno

                            e.Cancel = True
                            Exit Sub
                        ElseIf cboColCde.Text = "" And txtColCde.Text = "" Then
                            MsgBox("Color Code missing!")
                            e.Cancel = True
                            Exit Sub
                        ElseIf cboPcking.Text = "" And cboUM.Text = "" Then
                            MsgBox("Packing missing!")
                            e.Cancel = True
                            Exit Sub
                        End If
                    End If
                End If
            Case 2
                If sMode = cModeAdd Or sMode = cModeUpd Then
                End If
                 
        End Select

    End Sub

    Public Sub txtItmNo_Press()

        Dim temp_pack_string As String

        'for less messaging    
        If txtItmNoTmp.Text = "" And _
          txtItmNo.Text = "" And _
          txtItmNoReal.Text = "" And _
          txtItmNoVen.Text = "" Then
            Exit Sub
        End If

        '''20140207
        ''' Assume cbopcking clicked
        cbopcking_got_focus = True

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtItmNo_Press sp_select_IMBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
            If txtItmNoReal.Text <> "" Then
                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_IMBASINF_Q_A '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading txtItmNo_Press sp_select_IMBASINF_Q_A :" & rtnStr)
                    Exit Sub
                End If
            End If

            If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                " - Item not found" + Chr(13) + Chr(10) + _
                " - It is a BOM Item" + Chr(13) + Chr(10) + _
                " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                " - It is held by the system" + Chr(13) + Chr(10) + _
                " - Vendor is not available", vbExclamation, "Warning k")
                Call ABUASST(txtItmNo.Text, "HIDE")
                Call ABUASST(txtItmNo.Text, "HIDEPRC")

                If txtItmNoReal.Text <> "" Then
                    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                        txtItmNoReal.Focus()
                    End If
                Else
                    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                        txtItmNoTmp.Focus()
                    End If
                End If
                Exit Sub
            End If

            Alias_itm = True


            '*************check the ibi_itmno whether is in new format**************
            If isNewItemFormat(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno"), False) Then
                MsgBox(UCase(txtItmNo.Text) & " is an Old Item." & vbCrLf & _
                   "System will show New Item instead.", vbOKOnly + vbInformation, "New Item Number Format")
                txtItmNoReal.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString
                txtItmNo.Text = UCase(Trim(txtItmNoReal.Text))
                txtItmNoReal.Refresh()
                Alias_itm = False
                Call txtItmNo_Press()
                Exit Sub
            End If
            '***********************************************************************

            Dim cus2no As String
            If cboCus2No.Text = "" Then
                cus2no = ""
            Else
                cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
            End If

            Dim rs As New DataSet

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUITMSUM_Q_check '" & cboCoCde.Text & "','" & _
                                                    Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & _
                                                    cus2no & "','" & _
                                                    txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_CUITMSUM_Q_check :" & rtnStr)
                Exit Sub
            End If

            If rs.Tables("RESULT").Rows.Count = 0 Then
                If MsgBox("This Item cannot be Quot, it is UCP Item. There has an item UCPP item " & _
                            rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & " is equal to it, Change it ?", vbYesNo) = vbYes Then
                    txtItmNoReal.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno")
                    txtItmNo.Text = UCase(Trim(txtItmNoReal.Text))
                    Alias_itm = False
                    Call txtItmNo_Press()
                Else
                    txtItmNoReal.Text = ""
                    txtItmNo.Text = ""
                    Call ABUASST(txtItmNo.Text, "HIDE")
                    Call ABUASST(txtItmNo.Text, "HIDEPRC")
                End If

                If txtItmNoReal.Enabled Then txtItmNoReal.Focus()
                txtItmNoReal.SelectAll()
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno") & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMCOLINF 2 :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMPCKINF_Q '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno") & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMPCKINF, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMPCKINF_Q 2 :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMMATBKD '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno") & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMMATBKD, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMMATBKD 2 :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno") & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMBOMASS, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMBOMASS_Q 2 :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMPRCINF_Q '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno") & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMPRCINF_NewAddItem, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMPRCINF_Q 2 :" & rtnStr)
                Exit Sub
            End If
            '************************************End of Alias ********************************************
        Else
            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMCOLINF :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMPCKINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMPCKINF, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMPCKINF_Q :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMMATBKD '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMMATBKD, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMMATBKD :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMBOMASS, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMBOMASS_Q :" & rtnStr)
                Exit Sub
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMPRCINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMPRCINF_NewAddItem, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtItmNo_Press sp_select_IMPRCINF_Q :" & rtnStr)
                Exit Sub
            End If
        End If

        Dim valid_pricing As Boolean
        Dim valid_pricing_for_customer As Boolean

        Dim check_cus1no As String
        Dim check_cus2no As String

        If cboCus1No.Text = "" Then
            check_cus1no = ""
        Else
            check_cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If cboCus2No.Text = "" Then
            check_cus2no = ""
        Else
            check_cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

        If rs_IMBASINF.Tables("RESULT").Rows.Count > 0 Then
            '************************************Check CIH Item ************************************
            txtCIHcur.Text = ""
            txtCIHprc.Text = ""
            '************************************Check Item Valid for the Company ************************
            '''##comment for asking the logic
            ' ''If not_Valid_Item(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString, Trim(Split(cboCus1No.Text, "-")(0)), IIf(rs_IMCOLINF.Tables("RESULT").Rows.Count > 0, rs_IMCOLINF.Tables("RESULT").Rows(0)("icf_colcde").ToString, "")) Then
            ' ''    If txtItmNoReal.Text <> "" Then
            ' ''        txtItmNoReal.SelectAll()
            ' ''    Else
            ' ''        txtItmNoTmp.SelectAll()
            ' ''    End If
            ' ''    Exit Sub
            ' ''End If

            '***********************************Check For Valid Pricing ***********************************
            valid_pricing = False
            valid_pricing_for_customer = False

            If rs_IMPRCINF_NewAddItem.Tables.Count > 0 Then
                For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_status").ToString = "ACT" Then
                        valid_pricing = True
                    End If
                Next
            End If

            If valid_pricing = False Then
                '                MsgBox("Item with packing but all pricing are Inactive or TBC!")
                '''2013-12-27 TBC allow now??
                MsgBox("Item with packing but all pricing are Inactive!")

                If txtItmNoReal.Text <> "" Then
                    txtItmNoReal.SelectAll()
                Else
                    txtItmNoTmp.SelectAll()
                End If


                Exit Sub
            End If

            ''default
            If cboCus2No.Text <> "" Then
                If optMU.Checked = False Then
                    optGM.Checked = True
                End If
            End If




            dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Split(cboCus1No.Text, " - ")(0) & "'")

            '*** Phase 2
            For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                If dr.Length > 0 Then
                    If Not (rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no Or _
                         rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = "" Or _
                         rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = dr(0)("cbi_cugrptyp_ext") Or _
                         rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = dr(0)("cbi_cugrptyp_int")) Then
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index).Delete()
                    End If

                End If
            Next



            rs_IMPRCINF_NewAddItem.Tables("RESULT").AcceptChanges()

            If rs_IMPRCINF_NewAddItem.Tables.Count > 0 Then
                For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_status").ToString = "ACT" Then
                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = "" And _
                            rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString = "" Then
                            'Standard Price
                            valid_pricing_for_customer = True
                        Else
                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString <> "" Then
                                'Check Primary and Secondary
                                If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no And _
                                    rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString = check_cus2no Then
                                    '???
                                    valid_pricing_for_customer = True
                                End If
                            Else
                                'Check Primary Only
                                'Check if is Customer Group
                                If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString.Length <> 5 Then
                                    dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "'")

                                    If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "E" Then
                                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_ext") Then
                                            valid_pricing_for_customer = True
                                        End If
                                    Else
                                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_int") Then
                                            valid_pricing_for_customer = True
                                        End If
                                    End If
                                Else
                                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no Then
                                        valid_pricing_for_customer = True
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next
            End If

            If valid_pricing_for_customer = False Then
                If check_cus2no = "" Then
                    MsgBox("Item with packing but no valid Pricing for Customer [" & cboCus1No.Text & "]!")
                Else
                    MsgBox("Item with packing but no valid Pricing for Customer [" & cboCus1No.Text & " | " & cboCus2No.Text & "]!")
                End If

                If txtItmNoReal.Text <> "" Then
                    txtItmNoReal.SelectAll()
                Else
                    txtItmNoTmp.SelectAll()
                End If

                Exit Sub
            End If

            If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                Exit Sub
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmtyp") = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_typ")
            txtItmDsc.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_engdsc")
            cboItmSts.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmsts")

            If Not IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_itmsts")) Then
                If (Microsoft.VisualBasic.Left(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_itmsts"), 3) = "CMP") Then
                    txtQutItmSts.Text = "A - Active"
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts") = "A - Active"
                ElseIf (Microsoft.VisualBasic.Left(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_itmsts"), 3) = "INC") Then
                    txtQutItmSts.Text = "W - Wait for approval"
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts") = "W - Wait for approval"
                End If
            End If


            txtCosMth.Text = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth")) = True, "", rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth").ToString + " - " + rs_IMBASINF.Tables("RESULT").Rows(0)("ysi_dsc").ToString)
            If txtCosMth.Text = " - " Then txtCosMth.Text = ""

            cboVenNo.Text = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venno")) = True, "", rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venno"))
            txtSubCde.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_subcde")


            ' Call fillcboPVen(txtItmNo.Text)
            ' Call fillcboDV(txtItmNo.Text)
            ' Call fillcboTV(txtItmNo.Text)
            ' Call fillcboFA(txtItmNo.Text)
            '*** show custom vendor
            cboCusVen.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
            'no for other vendor cbo

            'cboVenNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
            cboVenNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venno")

            txtCusSub.Text = ""

            txtVenItm.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")

            display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_venno"), cboDV)
            display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_tradeven"), cboTV)
            display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_examven"), cboFA)

            '*** show the alias item no.
            If rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_alsitmno").ToString <> "" Then
                txtAlias.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_alsitmno")
                txtAlscolcde.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_alscolcde")
            End If

            txtIMRmk.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_rmk").ToString.Trim

            'modify
            If Trim(txtItmNo.Text) <> "" Then
                Call GetCusSty(Trim(txtItmNo.Text))
            Else
                Call GetCusSty(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString)
            End If


            cboHrmCde.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_hamusa")
            If cboHrmCde.Text <> "" Then
                dr = rs_SYHRMCDE.Tables("RESULT").Select("yhc_hrmcde = " & "'" & cboHrmCde.Text & "'")

                If dr.Length > 0 Then
                    cboHrmCde.Text = dr(0)("yhc_hrmcde").ToString + " - " + dr(0)("yhc_hrmdsc").ToString + _
                                        IIf(dr(0)("yhc_tarzon").ToString = "U", " (HSTU # for USA)", " (Tariff # for Europe)")
                    txtDtyRat.Text = dr(0)("yhc_dtyrat")
                End If
            End If

            '*** Pre-set Original MOQ/MOA
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False
            txtMoq.Text = ""
            txtMoa.Text = ""

            On Error Resume Next

            If IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_imgpth")), "", Trim(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_imgpth").ToString)) <> "" Then
                pth = Trim(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_imgpth").ToString)
            Else
                If gsCompanyGroup = "MSG" Then
                    If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "I" Or _
                        rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "J" Then
                        pth = ItmImg_pth & SearchImgPath(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_lnecde")) & "\" & _
                                revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm"))
                    Else
                        pth = ItmImg_pth & rs_IMBASINF.Tables("RESULT").Rows(0)("venno") & "\" & _
                                revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")) & "_" & _
                                rs_IMBASINF.Tables("RESULT").Rows(0)("venno")
                    End If
                Else
                    If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "I" Or _
                        rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "J" Then
                        If ItmImg_pth_6 <> "" Then
                            pth = ItmImg_pth_6 & SearchImgPath(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_lnecde")) & "\" & _
                                    revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm"))
                        Else
                            pth = ItmImg_pth & SearchImgPath(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_lnecde")) & "\" & _
                                    revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm"))
                        End If
                    ElseIf rs_IMBASINF.Tables("RESULT").Rows(0)("venno").ToString = "0005" Then
                        pth = ItmImg_pth & rs_IMBASINF.Tables("RESULT").Rows(0)("venno") & "\" & _
                                revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")) & "_" & rs_IMBASINF.Tables("RESULT").Rows(0)("venno")
                    Else
                        If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "E" Then
                            pth = Mid(ItmImg_pth, 1, 25) & "ucp\itemimg\" & rs_IMBASINF.Tables("RESULT").Rows(0)("venno") & "\" & _
                                    revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")) & "_" & _
                                    rs_IMBASINF.Tables("RESULT").Rows(0)("venno")
                        Else
                            pth = ItmImg_pth & rs_IMBASINF.Tables("RESULT").Rows(0)("venno") & "\" & _
                                    revisedItmno(rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")) & "_" & _
                                    rs_IMBASINF.Tables("RESULT").Rows(0)("venno")
                        End If
                    End If
                End If
            End If

            If UCase(Microsoft.VisualBasic.Right(pth, 3)) <> "JPG" Then
                pth = pth & ".JPG"
            End If

            '            If UCase(Dir(pth)) <> "" Then
            If rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_imgpth").ToString <> "" Then
                optImageY.Checked = True
                optImageN.Checked = False
                cmdImage.Enabled = True
            Else
                optImageY.Checked = False
                optImageN.Checked = True
                cmdImage.Enabled = False
            End If
        End If

        If rs_IMCOLINF.Tables("RESULT").Rows.Count = 0 Then
            cboColCde.Items.Clear()
            cboColCde.Text = ""
            cboColCde.Enabled = False
        Else
            cboColCde.Enabled = True
            cboColCde.Items.Clear()
            cboColCde.Text = ""

            For index As Integer = 0 To rs_IMCOLINF.Tables("RESULT").Rows.Count - 1
                cboColCde.Items.Add(rs_IMCOLINF.Tables("RESULT").Rows(index)("icf_colcde").ToString)
            Next

            If cboColCde.Items.Count > 0 And QuotCopyFlag = False Then
                cboColCde.SelectedIndex = 0
            End If

            If QuotCopyFlag = True Then
                Call display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde"), cboColCde)
            End If
        End If

        If rs_IMPCKINF.Tables("RESULT").Rows.Count = 0 Then
            cboPcking.Enabled = False
            cboPcking.Text = ""
            Call cboPckingClick()  ''call for what?
        Else
            valid_pricing = False
            valid_pricing_for_customer = False

            cboPcking.Enabled = True
            cboPcking.Items.Clear()
            cboPcking.Text = ""

            For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
                valid_pricing_for_customer = False

                For index1 As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_pckunt").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString And _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_inrqty").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString And _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_mtrqty").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString Then

                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_status").ToString = "ACT" Then
                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus1no").ToString = "" And _
                                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString = "" Then
                                'Standard Price
                                valid_pricing_for_customer = True
                            Else
                                If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString <> "" Then
                                    'Check Primary and Secondary
                                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus1no").ToString = check_cus1no And _
                                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString = check_cus2no Then
                                        valid_pricing_for_customer = True
                                    End If
                                Else
                                    'Check Primary Only
                                    'Check if is Customer Group
                                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString.Length <> 5 Then
                                        dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "'")

                                        If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "E" Then
                                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_ext") Then
                                                valid_pricing_for_customer = True
                                            End If
                                        Else
                                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_int") Then
                                                valid_pricing_for_customer = True
                                            End If
                                        End If
                                    Else
                                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no Then
                                            valid_pricing_for_customer = True
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next

                If valid_pricing_for_customer = False Then
                    rs_IMPCKINF.Tables("RESULT").Rows(index).Delete()
                End If
            Next
            rs_IMPCKINF.Tables("RESULT").AcceptChanges()

            For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
                '*** Phase 2
                For index1 As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    If rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt") = rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_pckunt") And _
                       rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty") = rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_inrqty") And _
                       rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty") = rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_mtrqty") Then

                        temp_pack_string = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString.Trim + " / " + _
                                                rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString.Trim + " / " + _
                                                rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString.Trim + " / " + _
                                                Val(rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cft")).ToString.Trim + " / " + _
                                                Val(rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cbm")).ToString.Trim + " / " + _
                                                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_ftyprctrm").ToString.Trim + " / " + _
                                                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_hkprctrm").ToString.Trim + " / " + _
                                                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_trantrm").ToString.Trim
                        ''20130903
                        If found_pack_incbo(temp_pack_string) = False Then
                            cboPcking.Items.Add(temp_pack_string)
                        End If

                    End If
                Next

                '*** Assume 1 packing only for assortment
                If rs_IMPCKINF.Tables("RESULT").Rows(index)("max_seq") = 1 And _
                    rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_typ") = "ASS" And _
                    isABUAssortment(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString) = True Then
                    txtUMFtr.Text = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_conftr")
                    Call ABUASST(txtItmNo.Text, "SHOW")
                Else
                    txtUMFtr.Text = ""
                    txtPCPrc.Text = ""
                    txtPCPrc_Text_round_5 = 0

                    txtUMFtr.Enabled = False
                    chkPC.Visible = False
                    chkPC.Enabled = False
                    chkPC.Checked = False
                    Call ABUASST(txtItmNo.Text, "HIDE")
                    Call ABUASST(txtItmNo.Text, "HIDEPRC")
                End If
            Next


            If cboPcking.Items.Count > 0 And QuotCopyFlag = False Then
                cboPcking.SelectedIndex = 0

                If get_QUPRCEMT_CU(txtSeq.Text, Split(cboCus1No.Text, "-")(0).Trim, Split(cboCus2No.Text, "-")(0).Trim, txtVenTyp.Text.Trim, txtItmCat.Text.Trim, Split(cboVenNo.Text.Trim, "-")(0).Trim, cboDtlPrcTrm.Text, cboTranTrm.Text) = True Then
                    Call calculate_gbPandelCstEmt(txtSeq.Text)
                    txtMU.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")
                    lblMUMin.Text = "(Min " + Format(round(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mumin"), 2), "###,###,##0.00") + "%)"

                    txtPckCstAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper")
                    txtItmCommAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper")

                    txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
                    txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
                    txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")

                    no_formula_to_insert = False

                    '''20140122
                    txtItmNoReal.Enabled = False
                    txtItmNoTmp.Enabled = False
                    txtItmNoVen.Enabled = False
                    cboItmNoVen.Enabled = False

                Else
                    '''20130815
                    no_formula_to_insert = True
                    If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
                        gbPacking.Enabled = True
                        cboPcking.Enabled = True
                    End If
                    '20131212   
                    'Call reset_QUOTNDTL()
                    'Call reset_detail_control("Detail_Init", "All")
                    'Call reset_detail_data("Detail_Init", "All")


                    Exit Sub
                End If

            End If

            If QuotCopyFlag = True Then
                '*** Phase 2
                Call display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString.Trim + " / " + _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString.Trim + " / " + _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString.Trim + " / " + _
                                   Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft")).ToString.Trim + " / " + _
                                   Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm")).ToString.Trim + " / " + _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString.Trim + " / " + _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString.Trim + " / " + _
                                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString.Trim, cboPcking)
                'Call display_combo(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString + " / " + _
                '                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString + " / " + _
                '                   rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString, cboPcking)
            End If
        End If

        'moq/moa

        txtCusItm_Text = ""

        txtCIHcur.Text = ""
        txtCIHprc.Text = ""
        txtcih_curcde_Text = ""
        txtcih_prc_Text = ""

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusstyno") = GetCusSty2(rs_QUOTNDTL.Tables("RESULT").DefaultView(sReadingIndexQ)("qud_itmno"), Trim(Split(cboCus1No.Text, "-")(0)), sReadingIndexQ)
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusitm") = txtCusItm_Text

        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_moq") = txtcih_curcde_Text
        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusitm") = txtcih_prc_Text

        txtCIHcur.Text = txtcih_curcde_Text
        txtCIHprc.Text = txtcih_prc_Text

        '*** Component Breakdown
        If rs_IMMATBKD.Tables("RESULT").Rows.Count = 0 Then
            dgMatBkd.DataSource = Nothing

            If IsNumeric(txtSeq.Text) Then
                sFilter = "qcb_qutseq = " & txtSeq.Text
                rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
            End If

            If rs_QUCPTBKD.Tables("RESULT").DefaultView.Count > 0 Then
                Dim index As Integer = rs_QUCPTBKD.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutno").ToString = txtQutNo.Text And _
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutseq").ToString = txtSeq.Text Then
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0).Delete()

                    End If
                    index -= 1
                End While
                rs_QUCPTBKD.Tables("RESULT").AcceptChanges()
            End If
        Else
            dgMatBkd.DataSource = Nothing

            If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
                Dim index As Integer = rs_QUCPTBKD.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutno").ToString = txtQutNo.Text And _
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutseq").ToString = txtSeq.Text Then
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0).Delete()

                    End If
                    index -= 1
                End While
                rs_QUCPTBKD.Tables("RESULT").AcceptChanges()
            End If

            For index As Integer = 0 To rs_IMMATBKD.Tables("RESULT").Rows.Count - 1
                drNewRow = rs_QUCPTBKD.Tables("RESULT").NewRow
                drNewRow("mode") = "NEW"
                drNewRow("Del") = " "
                drNewRow("Dupditmdtlel") = " "
                drNewRow("updmoqmoa") = " "
                drNewRow("updassbom") = " "
                drNewRow("converttopc") = " "
                drNewRow("qcb_qutno") = txtQutNo.Text
                drNewRow("qcb_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
                drNewRow("qcb_itmno") = txtItmNo.Text
                drNewRow("qcb_cptseq") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_matseq")
                drNewRow("qcb_cpt") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_mat")
                drNewRow("qcb_curcde") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_curcde")
                drNewRow("qcb_cst") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cst")
                drNewRow("qcb_cstpct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cstper")
                drNewRow("qcb_pct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_wgtper")
                rs_QUCPTBKD.Tables("RESULT").Rows.Add(drNewRow)
            Next

            If IsNumeric(txtSeq.Text) Then
                sFilter = "qcb_qutseq = " & txtSeq.Text
                rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
            End If

            dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView

            Call display_Component()
        End If

        '*** Assortment Item
        If rs_IMBOMASS.Tables("RESULT").Rows.Count = 0 Then
            cmdAss.Enabled = False

            If IsNumeric(txtSeq.Text) Then
                sFilter = "qai_qutseq = " & txtSeq.Text & " and mode <> 'DEL'"
                rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter
            End If

            If rs_QUASSINF.Tables("RESULT").DefaultView.Count > 0 Then
                Dim index As Integer = rs_QUASSINF.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutno").ToString = txtQutNo.Text And _
                        rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutseq").ToString = txtSeq.Text Then
                        rs_QUASSINF.Tables("RESULT").DefaultView(0).Delete()

                    End If
                    index -= 1
                End While


                rs_QUASSINF.Tables("RESULT").AcceptChanges()
            End If
        Else
            cmdAss.Enabled = True

            If rs_QUASSINF.Tables("RESULT").DefaultView.Count > 0 Then
                Dim index As Integer = rs_QUASSINF.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutno").ToString = txtQutNo.Text And _
                        rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutseq").ToString = txtSeq.Text Then
                        rs_QUASSINF.Tables("RESULT").DefaultView(0).Delete()

                    End If
                    index -= 1
                End While
                rs_QUASSINF.Tables("RESULT").AcceptChanges()
            End If

            For index As Integer = 0 To rs_IMBOMASS.Tables("RESULT").Rows.Count - 1
                drNewRow = rs_QUASSINF.Tables("RESULT").NewRow
                drNewRow("mode") = "NEW"
                drNewRow("qai_qutno") = txtQutNo.Text
                drNewRow("qai_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
                drNewRow("qai_itmno") = txtItmNo.Text
                drNewRow("qai_assitm") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_assitm")
                drNewRow("qai_assdsc") = rs_IMBOMASS.Tables("RESULT").Rows(index)("ibi_engdsc")
                drNewRow("qai_colcde") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_colcde")
                drNewRow("qai_coldsc") = rs_IMBOMASS.Tables("RESULT").Rows(index)("icf_coldsc")
                drNewRow("qai_untcde") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_pckunt")
                drNewRow("qai_inrqty") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_inrqty")
                drNewRow("qai_mtrqty") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_mtrqty")
                drNewRow("qai_alsitmno") = rs_IMBOMASS.Tables("RESULT").Rows(index)("ibi_alsitmno")
                drNewRow("qai_alscolcde") = rs_IMBOMASS.Tables("RESULT").Rows(index)("ibi_alscolcde")
                drNewRow("ibi_itmsts") = rs_IMBOMASS.Tables("RESULT").Rows(index)("ibi_itmsts")
                drNewRow("qai_imperiod") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_period")
                drNewRow("qai_creusr") = "~*ADD*~"
                rs_QUASSINF.Tables("RESULT").Rows.Add(drNewRow)
            Next

            If IsNumeric(txtSeq.Text) Then
                sFilter = "qai_qutseq = " & txtSeq.Text & " and mode <> 'DEL'"
                rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter
            End If
        End If

        '*** aim to disable the color code list for user to select when it is a new format
        If isNewItemFormat(txtItmNo.Text, True) Then
            cboColCde.Enabled = False
        Else
            cboColCde.Enabled = True
        End If

        If rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_ftytmp").ToString = "Y" Then
            chkFtyTmpItm.Checked = True
        Else
            chkFtyTmpItm.Checked = False
        End If

        Dim itmtyp As String
        If txtItmNoVen.Text <> "" Then
            itmtyp = "ItemNotInIM"
        Else
            itmtyp = "RealItem"
        End If

        reset_detail_control("Detail_Update", itmtyp)

        'Fill in Prc Element


        'Call cmdPrcEmt.PerformClick()
        'Call cmdPanPrcEmtUpdate.PerformClick()

        '''20130815
        If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
            gbPacking.Enabled = True
            cboPcking.Enabled = True
        End If


        '20130828
        If chkPC.Checked = True And txtUMFtr.Text.ToString <> "" Then
            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()

       

            either_cus1dp_or_cus2dp = txtCus1Dp.Text
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If Not IsNumeric(txtCus2Dp.Text) Then
                    txtCus2Dp.Text = txtCus1Dp.Text
                End If
                If optGM.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                ElseIf optMU.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                End If
            End If

            txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
            txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")
        End If


        '20130816  for itm converting cases
        Call fill_QUOTNDTL()

        Cursor = Cursors.Default

    End Sub

    Private Sub txtItmNo_Change()
        If txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "" Then
            txtItmNoReal.Enabled = True
            txtItmNoTmp.Enabled = True
            txtItmNoVen.Enabled = True
            Call reset_detail_control("Detail_Init", "All")
        End If
    End Sub

    Public Sub cmdFind_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdFind.Click
        txtQutNo.Text = UCase(Trim(txtQutNo.Text))
        Call txtQutNoKeyPress()
        Recordstatus = False
    End Sub

    Public Function txtQutNoKeyPress() As Boolean
        txtQutNoKeyPress = False

        '''20131017
        ''' 
        If cboCus2No.Text <> "" Then
            optGM.Enabled = True
            optMU.Enabled = True
            txtGrsMgn.Enabled = True
            gbSecond.Enabled = True

        End If

        If (Trim(txtQutNo.Text) = "" And txtQutNo.Enabled = True) Then
            If txtQutNo.Enabled And txtQutNo.Visible Then
                txtQutNo.Focus()
                MsgBox("Please input Quotation No.")
                Exit Function
            End If
        End If

        txtQutNo.Text = txtQutNo.Text.ToUpper()

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNHDR '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_QUOTNHDR, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUOTNHDR :" & rtnStr)
            Exit Function
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 And txtQutNo.Enabled = True Then
            MsgBox("No Record Found!")
            If txtQutNo.Enabled And txtQutNo.Visible Then
                txtQutNo.Focus()
                Exit Function
            End If
        End If

        For i As Integer = 0 To rs_QUOTNHDR.Tables("RESULT").Columns.Count - 1
            rs_QUOTNHDR.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_SYUSRRIGHT_Check '" & cboCoCde.Text & "','" & gsUsrID & "','" & txtQutNo.Text & "','" & sMODULE & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYUSRRIGHT_Check, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_SYUSRRIGHT_Check :" & rtnStr)
            Exit Function
        End If

        If rs_SYUSRRIGHT_Check.Tables("RESULT").Rows.Count = 0 Then
            MsgBox("You have no Right access this document.")
            Exit Function
        Else
            Call display_Header()
            Call setStatus(cModeUpd)
            sMode = cModeUpd
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_QUOTNDTL, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUOTNDTL :" & rtnStr)
            Exit Function
        End If

        For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Columns.Count - 1
            rs_QUOTNDTL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        OldItemRecord = False

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            OldItemRecord = False
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1

                If Len(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts").ToString()) >= 3 Then
                    If (rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts").ToString().Substring(0, 3) = "OLD") Then
                        OldItemRecord = True
                        Exit For
                    End If
                End If
            Next

            'If OldItemRecord = True Then
            '    cmdReset.Enabled = Enq_right_local
            'Else
            '    cmdReset.Enabled = False
            'End If

            'A-Active,W,E
            Call set_qutsts()


            Dim curqutseq As Integer
            curqutseq = rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("qud_qutseq")
            Call display_Detail(curqutseq)

            Call display_qud_qutitmsts()
            Call display_qud_IM_period()

            'gsCompany = Trim(cboCoCde.Text)
            'Call Update_gs_Value(gsCompany)

            'gspStr = "sp_select_QUPRCEMT '" & cboCoCde.Text & "','" & txtQutNo.Text & "',''"
            'rtnLong = execute_SQLStatement(gspStr, rs_QUPRCEMT, rtnStr)

            'If rtnLong <> RC_SUCCESS Then
            '    MsgBox("Error on loading txtQutNoKeyPress sp_select_QUPRCEMT :" & rtnStr)
            '    Exit Function
            'End If

            'For i As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Columns.Count - 1
            '    rs_QUPRCEMT.Tables("RESULT").Columns(i).ReadOnly = False
            'Next i

            dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView

            Call display_dgOthDtl("A")

            'cmdBackD.Enabled = False

            'If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            '    cmdNextD.Enabled = False
            'Else
            '    cmdNextD.Enabled = True
            'End If
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUCPTBKD '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_QUCPTBKD, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUCPTBKD :" & rtnStr)
            Exit Function
        End If

        For i As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Columns.Count - 1
            rs_QUCPTBKD.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
            If IsNumeric(txtSeq.Text) Then
                sFilter = "qcb_qutseq = " & txtSeq.Text
            Else
                sFilter = "qcb_qutseq = 0"
            End If

            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
            dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
            Call display_Component()
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUASSINF '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_QUASSINF, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUASSINF :" & rtnStr)
            Exit Function
        End If

        For i As Integer = 0 To rs_QUASSINF.Tables("RESULT").Columns.Count - 1
            rs_QUASSINF.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_QUASSINF.Tables("RESULT").Rows.Count > 0 Then
            If IsNumeric(txtSeq.Text) Then
                sFilter = "qai_qutseq = " & txtSeq.Text
            Else
                sFilter = "qai_qutseq = 0"
            End If


            rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter
            If rs_QUASSINF.Tables("RESULT").DefaultView.Count = 0 Then
                cmdAss.Enabled = False
            Else
                cmdAss.Enabled = True
            End If
        End If


        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUDTLSHP '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_QUDTLSHP, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUDTLSHP :" & rtnStr)
            Exit Function
        End If

        For i As Integer = 0 To rs_QUDTLSHP.Tables("RESULT").Columns.Count - 1
            rs_QUDTLSHP.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_QUDTLSHP.Tables("RESULT").Rows.Count > 0 Then
            If IsNumeric(txtSeq.Text) Then
                sFilter = "qds_qutseq = " & txtSeq.Text
            Else
                sFilter = "qds_qutseq = 0"
            End If

            rs_QUDTLSHP.Tables("RESULT").DefaultView.RowFilter = sFilter
            If rs_QUDTLSHP.Tables("RESULT").DefaultView.Count = 0 Then
                btnTOMutShp.Enabled = False
            Else
                btnTOMutShp.Enabled = True
            End If
        End If

        '''20140321
        gspStr = "sp_select_TOORDDTL '" & cboCoCde.Text & "','" & "T" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_TOORDDTL2, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtQutNoKeyPress sp_select_QUOTNDTL :" & rtnStr)
            Exit Function
        End If


        If DateDiff("d", rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_credat"), "09/09/2003") > 0 Then
            sMode = cModeRead
            Call formInit(cModeRead)
        Else
            If Enq_right_local = True Then
                sMode = cModeUpd
                Call formInit(cModeUpd)
            Else
                sMode = cModeRead
                Call formInit(cModeRead)
            End If

        End If

        txtQutNoKeyPress = True
        cmdPrcEmt.Enabled = True

        cmdItmNoConv.Enabled = True
        cmdItmNoConvVen.Enabled = True

    End Function

    Private Sub cmdExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdExit.Click
        If Recordstatus = True Then
            cmdClear_Click(sender, e)
        End If
        Me.Close()
    End Sub

    Private Sub cmdClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClear.Click
        Dim tmpqutno As String
        Dim tmpcocde As String

        tmpqutno = txtQutNo.Text
        tmpcocde = cboCoCde.Text

        Call cmdClearClick()


        txtQutNo.Text = tmpqutno
        cboCoCde.Text = tmpcocde

        txtQutNo.Focus()





    End Sub
    Private Sub cmdClearClick()
        Dim YesNoCancel As Integer

        If Recordstatus = True Then
            If Add_flag = True Or Insert_flag = True Then
                YesNoCancel = MsgBox("Record is newly created.  Do you want to save before clear the screen?", MsgBoxStyle.YesNoCancel)
            Else
                YesNoCancel = MsgBox("Record has been modified.  Do you want to save before clear the screen?", MsgBoxStyle.YesNoCancel)
            End If

            If YesNoCancel = vbYes Then
                '*** To check the input item no which is empty
                If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
                    MsgBox("Please input Item No.")
                    Exit Sub
                End If

                If rs_IMBASINF.Tables.Count = 0 And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True Or txtItmNoVen.Enabled = True) Then
                    btcQUM00001.SelectedIndex = 1
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                        " - Item not found" + Chr(13) + Chr(10) + _
                        " - It is a BOM Item" + Chr(13) + Chr(10) + _
                        " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                        " - It is held by the system" + Chr(13) + Chr(10) + _
                        " - Vendor is not available", vbExclamation, "Warning cl")
                    Exit Sub
                End If

                If cmdSave.Enabled And invalid_Detail() = False Then
                    '*** Check Item Exist ?
                    If txtItmNo.Text <> "" And (txtItmNo.Enabled = True Or txtItmNoTmp.Enabled = True Or txtItmNoVen.Enabled = True) Then
                        If not_exist_ITEM() = True Then
                            MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                            " - Item not found" + Chr(13) + Chr(10) + _
                            " - It is a BOM Item" + Chr(13) + Chr(10) + _
                            " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                            " - It is held by the system" + Chr(13) + Chr(10) + _
                            " - Vendor is not available", vbExclamation, "Warning cl2")
                            Exit Sub
                        End If
                    End If

                    Call fill_QUOTNDTL()
                    Call cmdSaveClick()

                    If save_ok = True Then
                        Call setStatus(cModeClear)
                        sMode = cModeClear
                    Else
                        Exit Sub
                    End If
                Else
                    If Enq_right_local = False Then
                        MsgBox("You have no right to Save this document.")
                        Call setStatus(cModeClear)
                        sMode = cModeClear
                    End If
                End If

                '20131115 avoid ini for all cases    
                sMode = cModeInit
                Call formInit(cModeInit)

            ElseIf YesNoCancel = vbNo Then
                Call setStatus(cModeClear)
                sMode = cModeClear
            ElseIf YesNoCancel = vbCancel Then
                Exit Sub
            End If
        Else
            Call setStatus(cModeClear)
            sMode = cModeClear
            If txtQutNo.Enabled And txtQutNo.Visible Then
                txtQutNo.Focus()
            End If
        End If
    End Sub

    Private Sub cboCoCde_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCoCde.Click
        Call cboCoCdeClick()
    End Sub

    Private Sub cboCoCdeClick()
        txtCoNam.Text = ChangeCompany(cboCoCde.Text, Me.Name)
    End Sub

    Private Sub cboCoCde_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboCoCde.KeyUp
        Call auto_search_combo(cboCoCde, e.KeyCode)
        Dim orgPos As Integer
        orgPos = cboCoCde.SelectedIndex
        If orgPos = -1 Then
            orgPos = 0
        End If
        cboCoCde.SelectedIndex = orgPos
        txtCoNam.Text = ChangeCompany(cboCoCde.SelectedItem, Me.Name)
    End Sub

    Private Sub cboCoCde_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCoCde.LostFocus
        Call cboCoCdeClick()
    End Sub

    Private Sub cboCus1No_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus1No.GotFocus
        cus1no_bef = cboCus1No.Text
    End Sub

    Private Sub cboCus1No_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCus1No.SelectedIndexChanged
        Call cboCus1NoClick()
        Recordstatus = True
    End Sub

    Private Sub cboCus1No_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCus1No.KeyPress
        If e.KeyChar = Chr(13) Then
            Call cboCus1NoClick()
        End If
    End Sub

    Private Sub cboCus1No_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboCus1No.KeyUp
        If cboCus1No.Text.Length > 0 Then
            Call auto_search_combo(cboCus1No, e.KeyCode)
        End If
    End Sub

    Private Sub cboCus1No_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCus1No.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCus1No.Items.Count
        If cboCus1No.Text <> "" And cboCus1No.Enabled = True And cboCus1No.Items.Count > 0 Then
            For Y = 0 To i - 1
                If Trim(cboCus1No.Text) = Trim(cboCus1No.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Primary Customer - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                e.Cancel = True

                cboCus1No.Text = ""
                cboCus1No.Focus()

            Else
                txtRmk.Enabled = True
                txtDeptH.Enabled = True
                cboYear.Enabled = True
                cboSeason.Enabled = True
                txtDesc.Enabled = True

                gbPri.Enabled = True
                cboCus1Cp.Enabled = True

                gbSales.Enabled = True
                cboSalRep.Enabled = True

                release_TabControl()
            End If
        End If
    End Sub

    Private Sub cboCus2No_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus2No.GotFocus
        cus2no_bef = cboCus2No.Text
    End Sub

    Private Sub cboCus2No_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCus2No.KeyPress
        If e.KeyChar = Chr(13) Then
            Call cboCus2NoClick()
        End If
    End Sub

    Private Sub cboCus2No_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboCus2No.KeyUp
        If cboCus2No.Text.Length > 0 Then
            Call auto_search_combo(cboCus2No, e.KeyCode)
        End If
    End Sub

    Private Sub cboCus2No_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus2No.LostFocus
        If cboCus2No.Text <> cus2no_bef Then
            Call cboCus2NoClick()
        ElseIf cboCus2No.Text = "" Then

        End If

        If cboCus2Cp.Text.Trim <> "" Then
            gbSec.Enabled = True
            cboCus2Cp.Enabled = True

        End If
        txtDeptH.Select()
    End Sub

    Private Sub cboCus2No_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus2No.SelectedIndexChanged
        Call cboCus2NoClick()
        Recordstatus = True
    End Sub

    Private Sub cboCus2No_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCus2No.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCus2No.Items.Count
        If cboCus2No.Text <> "" And cboCus2No.Enabled = True And cboCus2No.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboCus2No.Text = cboCus2No.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Secondary Customer - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                e.Cancel = True
                cboCus2No.Text = ""
                cboCus2No.Focus()

            Else

                ''??
                'txtCus2Ad.Text = ""
                'txtCus2St.Text = ""
                'txtCus2Cy.Text = ""
                'txtCus2Zp.Text = ""
                'cboCus2Cp.Text = ""
                '                cboCus2Cp.Enabled = False
                optActive.Checked = False
                optPassive.Checked = False
                ''    optGM.Enabled = False
                '    optGM.Checked = False '??
                ''  optMU.Enabled = False
                '   optMU.Checked = False '??
                ''txtGrsMgn.Enabled = False
                '  txtGrsMgn.Text = "" '??

                cboCus2Cp.Enabled = True
            End If
        End If
    End Sub

    Private Sub cboCus1Cp_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCus1Cp.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCus1Cp.Items.Count
        If cboCus1Cp.Text <> "" And cboCus1Cp.Enabled = True And cboCus1Cp.Items.Count > 0 Then
            For Y = 0 To i - 1
                If Trim(cboCus1Cp.Text) = Trim(cboCus1Cp.Items(Y).ToString) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Primary Customer - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboCus1Cp_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus1Cp.SelectedIndexChanged
        If rs_QUOTNHDR.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If cboCus1Cp.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboCus1Cp.Text

                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cp") Then
                    Recordstatus = True
                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus1cp") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub cboCusAgt_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCusAgt.Click
        Recordstatus = True
    End Sub

    Private Sub cboCusAgt_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCusAgt.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCusAgt.Items.Count
        If cboCusAgt.Text <> "" And cboCusAgt.Enabled = True And cboCusAgt.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboCusAgt.Text = cboCusAgt.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Agent - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboCusAgt_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCusAgt.SelectedIndexChanged
        Recordstatus = True
    End Sub

    Private Sub txtMU_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtMU.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtMU_keypress = True
            flag_no_update_mu(sReadingIndexQ) = False
        End If

    End Sub

    Private Sub txtMU_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMU.KeyPress
        If Not (Convert.ToInt32(e.KeyChar)  = Keys.Delete Or e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If txtMU.Text.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
            '    e.KeyChar = ""
            'End If
        End If
        flag_txtMU_keypress = True
        flag_no_update_mu(sReadingIndexQ) = False

    End Sub

    Private Sub txtMU_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtMU.KeyUp

    End Sub

    Private Sub txtMU_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMU.TextChanged
        If flag_txtMU_keypress = True Then
            flag_txtMU_keypress = False

            Dim qutseq As Integer

            If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                Exit Sub
            End If

            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtMU.Text.Trim) Then
                txtMU.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = txtMU.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)
            txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
            txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtSmpPrc.Text = round(Val(txtSmpPrc.Text), 4)


            ''            If flag_txtPCPrc_keypress <> True Then
            'Dim umftr As Decimal

            'If Not IsNumeric(txtUMFtr.Text) Then
            '    umftr = 1
            'Else
            '    umftr = txtUMFtr.Text
            'End If

            'If Val(txtUMFtr.Text) = 0 Then
            '    umftr = 1
            'End If

            'txtPCPrc.Text = Format(txtCus1Dp.Text / umftr, "###,###,##0.0000")
            'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5.Trim
            ''End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If



            Recordstatus = True
            Call check_mu(sReadingIndexQ)


        End If

    End Sub

    Private Sub txtPckCstAmt_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtPckCstAmt.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtPckCstAmt_keypress = True
        End If
    End Sub

    Private Sub txtPckCstAmt_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPckCstAmt.KeyPress
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If txtPckCstAmt.Text.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
            '    e.KeyChar = ""
            'End If
        End If
        flag_txtPckCstAmt_keypress = True
    End Sub

    Private Sub txtPckCstAmt_LocationChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPckCstAmt.LocationChanged

    End Sub

    Private Sub txtPckCstAmt_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPckCstAmt.TextChanged
        If flag_txtPckCstAmt_keypress = True Then
            flag_txtPckCstAmt_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtPckCstAmt.Text.Trim) Then
                txtPckCstAmt.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = txtPckCstAmt.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)
            txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
            txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
            txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtSmpPrc.Text = round(txtSmpPrc.Text, 4)


            ' If flag_txtPCPrc_keypress <> True Then
            'Dim umftr As Decimal
            'If Not IsNumeric(txtUMFtr.Text) Then
            '    umftr = 1
            'Else
            '    umftr = txtUMFtr.Text
            'End If

            'If Val(txtUMFtr.Text) = 0 Then
            '    umftr = 1
            'End If

            'txtPCPrc.Text = Format(txtCus1Dp.Text / umftr, "###,###,##0.0000")
            'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5.Trim
            'End If


            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            Recordstatus = True

        End If
        ''Call check_mu(sReadingIndexQ)

    End Sub

    Private Sub txtItmCommAmt_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtItmCommAmt.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtItmCommAmt_keypress = True
        End If
    End Sub

    Private Sub txtItmCommAmt_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtItmCommAmt.KeyPress
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If txtItmCommAmt.Text.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
            '    e.KeyChar = ""
            'End If
        End If
        flag_txtItmCommAmt_keypress = True
    End Sub

    Private Sub txtItmCommAmt_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtItmCommAmt.TextChanged
        If flag_txtItmCommAmt_keypress = True Then
            flag_txtItmCommAmt_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtItmCommAmt.Text.Trim) Then
                txtItmCommAmt.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = txtItmCommAmt.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)
            txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
            txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
            txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtSmpPrc.Text = round(Val(txtSmpPrc.Text), 4)

            ''If flag_txtPCPrc_keypress <> True Then
            'Dim umftr As Decimal
            'If Not IsNumeric(txtUMFtr.Text) Then
            '    umftr = 1
            'Else
            '    umftr = txtUMFtr.Text
            'End If

            'If Val(txtUMFtr.Text) = 0 Then
            '    umftr = 1
            'End If

            'txtPCPrc.Text = Format(txtCus1Dp.Text / umftr, "###,###,##0.0000")
            'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5.Trim
            ''End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            Recordstatus = True

        End If
        ''Call check_mu(sReadingIndexQ)

    End Sub

    Private Sub cmdPrcEmt_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrcEmt.Click
        Recordstatus = True

        display_gbPandelCstEmt(txtSeq.Text)

        gbPanelCstEmt.Location = New Point(74, 12)

        gbPanelCstEmt.Visible = True
        gbPanelCstEmt.Enabled = True
        cmdPanPrcEmtUpdate.Enabled = True
        cmdPanPrcEmtQuit.Enabled = True
        gbCstEmt1P.Enabled = True
        gbCstEmt2P.Enabled = True

        If Not (sMode = cModeAdd Or sMode = cModeUpd) Then
            txtMUP.Enabled = False
            txtPckCst1P.Enabled = False
            txtItmComm1P.Enabled = False
            txtCus1DpP.Enabled = False
            cmdPanPrcEmtUpdate.Enabled = False
        Else
            txtMUP.Enabled = True
            txtPckCst1P.Enabled = True
            txtItmComm1P.Enabled = True
            '''20140228
            ''' 
            If chkPC.Checked = True Then
                txtCus1DpP.Enabled = False
            Else
                txtCus1DpP.Enabled = True
            End If

            cmdPanPrcEmtUpdate.Enabled = True
        End If


        gbPanelCstEmt.BringToFront()

        txtMUP_Text = txtMUP.Text
        txtPckCst1P_Text = txtPckCst1P.Text
        txtItmComm1P_Text = txtItmComm1P.Text
        txtCus1DpP_Text = txtCus1DpP.Text
        txtPCPrcP_Text = txtPCPrcP.Text

        txtQutItmSts_Text = txtQutItmSts.Text
        txtQutSts_Text = txtQutSts.Text
        dtl_txtQutItmSts = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
        dtl_qud_apprve = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve")

        hdr_txtQutSts = rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString()



        Call freeze_TabControl(-1)
    End Sub

    Private Sub txtMUP_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtMUP.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtMUP_keypress = True
            flag_no_update_mu(sReadingIndexQ) = False
        End If

    End Sub

    Private Sub txtMUP_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMUP.KeyPress
        flag_txtMUP_keypress = True
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If e.KeyChar.ToString() = "." Then
            '    'e.KeyChar = ""
            '    flag_txtMUP_keypress = False
            'End If
        End If
        flag_no_update_mu(sReadingIndexQ) = False

    End Sub

    Private Sub txtMUP_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMUP.LostFocus
        'If Not IsNumeric(txtMUP.Text.Trim) Then
        '    txtMUP.Text = "0"
        '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = 0
        '    MsgBox("Mark up value should be numeric!")
        '    txtMUP.Focus()

        'Else
        '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = txtMUP.Text
        'End If

    End Sub


    Private Sub txtMUP_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMUP.TextChanged
        If flag_txtMUP_keypress = True Then
            'flag_txtMUP_keypress = False

            ''bug ***!
            If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                Exit Sub
            End If

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtMUP.Text.Trim) Then
                txtMUP.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = txtMUP.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)

            txtCus1DpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")

            '''0811 
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            '''08111
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            '20130731 Marco
            display_gbPandelCstEmt(qutseq)

            Recordstatus = True
            Call check_mu(sReadingIndexQ)

        End If

    End Sub

    Private Sub txtPckCst1P_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtPckCst1P.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtPckCst1P_keypress = True
        End If

    End Sub

    Private Sub txtPckCst1P_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPckCst1P.KeyPress
        flag_txtPckCst1P_keypress = True
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If e.KeyChar.ToString() = "." Then
            '    'e.KeyChar = ""
            '    flag_txtPckCst1P_keypress = False
            'End If
        End If

    End Sub

    Private Sub txtPckCst1P_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPckCst1P.LostFocus
        If Not IsNumeric(txtPckCst1P.Text.Trim) Then
            txtPckCst1P.Text = "0"
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = 0
            MsgBox("Packing cost value should be numeric!")
            txtPckCst1P.Focus()

        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = txtPckCst1P.Text
        End If

    End Sub


    Private Sub txtPckCst1P_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPckCst1P.TextChanged
        If flag_txtPckCst1P_keypress = True Then
            'flag_txtPckCst1P_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtPckCst1P.Text.Trim) Then
                txtPckCst1P.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = txtPckCst1P.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)
            txtCus1SpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
            txtCus1DpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")

            '''0811
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            '''08111
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            display_gbPandelCstEmt(qutseq)


            Recordstatus = True
        End If
    End Sub

    Private Sub txtItmComm1P_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtItmComm1P.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtItmComm1P_keypress = True
        End If

    End Sub

    Private Sub txtItmComm1P_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtItmComm1P.KeyPress
        flag_txtItmComm1P_keypress = True

        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If e.KeyChar.ToString() = "." Then
            '    '                e.KeyChar = ""
            '    flag_txtItmComm1P_keypress = False

            'End If
        End If
    End Sub

    Private Sub txtItmComm1P_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmComm1P.LostFocus
        If Not IsNumeric(txtItmComm1P.Text.Trim) Then
            txtItmComm1P.Text = "0"
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = 0
            MsgBox("Commission value should be numeric!")
            txtItmComm1P.Focus()

        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = txtItmComm1P.Text
        End If

    End Sub

    Private Sub txtItmComm1P_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtItmComm1P.TextChanged
        If flag_txtItmComm1P_keypress = True Then
            'flag_txtItmComm1P_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtItmComm1P.Text.Trim) Then
                txtItmComm1P.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = txtItmComm1P.Text
            End If

            Call calculate_gbPandelCstEmt(qutseq)
            txtCus1SpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
            txtCus1DpP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")

            '''0811
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            '''0811
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            '20130731 Marco
            display_gbPandelCstEmt(qutseq)



            Recordstatus = True
        End If
    End Sub

    Private Sub cmdPanPrcEmtUpdate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanPrcEmtUpdate.Click
        Call update_gbPandelCstEmt(txtSeqP.Text)
        bIsShowPanels = False
        gbPanelCstEmt.SendToBack()
        gbPanelCstEmt.Visible = False

        '20130731 Marco
        txtCus1Sp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp").ToString), "###,###,##0.0000")
        txtCus1Dp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp").ToString), "###,###,##0.0000")
        txtSmpPrc.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpprc").ToString), "###,###,##0.0000")
        txtSmpPrc.Text = round(Val(txtSmpPrc.Text), 4)

        txtMU.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_mu").ToString), "###,###,##0.0000")
        txtPckCstAmt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper").ToString), "###,###,##0.0000")
        txtItmCommAmt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper").ToString), "###,###,##0.0000")
        lblMUMin.Text = "(Min " + Format(round(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mumin"), 2), "###,###,##0.00") + "%)"


        '''III
        txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_Cus1Dp") = txtCus1DpP.Text.Trim
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_Cus1Dp") = txtCus1DpP.Text.Trim

        Dim umftr As Decimal
        If Not IsNumeric(txtUMFtr.Text) Then
            umftr = 1
        Else
            umftr = txtUMFtr.Text
        End If

        If Val(txtUMFtr.Text) = 0 Then
            umftr = 1
        End If

        '''20140212
        umftr = get_umftr()



        ''
        either_cus1dp_or_cus2dp = txtCus1DpP.Text
        flag_txtCus1Dp_keypress = True

        If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
            If Not IsNumeric(txtCus2Dp.Text) Then
                txtCus2Dp.Text = txtCus1DpP.Text
            End If
            If optGM.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
                flag_txtCus1Dp_keypress = False
            ElseIf optMU.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
                flag_txtCus1Dp_keypress = False
            End If
        End If

     
        txtPCPrc.Text = either_cus1dp_or_cus2dp / umftr
        txtPCPrcP_Text_round_5 = either_cus1dp_or_cus2dp / umftr

        txtPCPrcP.Text = round(txtPCPrcP.Text, cus1_rounding)

        If Val(txtPCPrcP.Text) > 0 Then
            txtPCPrc.Text = txtPCPrcP.Text
            txtPCPrcP_Text_round_5 = txtPCPrcP_Text_round_5
        Else
            txtPCPrcP.Text = txtPCPrc.Text
            txtPCPrcP_Text_round_5 = txtPCPrc_Text_round_5
        End If


        ''
        If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
            If optGM.Checked = True Then
                ''
                txtCus2Dp.Text = Val(txtPCPrcP.Text) * umftr
                
                txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus2dp") = txtCus2Dp.Text.Trim

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrcP_Text_round_5
            ElseIf optMU.Checked = True Then
                ''
                txtCus2Dp.Text = txtPCPrcP_Text_round_5 * umftr
                
                txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus2dp") = txtCus2Dp.Text.Trim

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrcP_Text_round_5
            Else
                txtCus1DpP.Text = txtPCPrcP_Text_round_5 * umftr
                
                txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)
                txtCus1Dp.Text = txtCus1DpP.Text

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1DpP.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1DpP.Text.Trim

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrcP_Text_round_5
            End If
        Else
            txtCus1DpP.Text = txtPCPrcP_Text_round_5 * umftr
            
            txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)
            txtCus1Dp.Text = txtCus1DpP.Text

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1DpP.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1DpP.Text.Trim

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrcP_Text_round_5
        End If




        '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1DpP.Text.Trim





        Call release_TabControl()
    End Sub

    Private Sub cmdPanPrcEmtQuit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanPrcEmtQuit.Click
        gbPanelCstEmt.SendToBack()
        gbPanelCstEmt.Visible = False

        '''20140129  reset value when "quit" click

        'for reset other values such as txtCus2Dp.Text,PCPRC 
        '20140212
        'flag_txtCus1Dp_keypress = True
        '        txtCus1Dp.Text = txtCus1Dp.Text

        flag_txtCus1Dp_keypress = False
        txtMUP.Text = txtMUP_Text
        txtPckCst1P.Text = txtPckCst1P_Text
        txtItmComm1P.Text = txtItmComm1P_Text
        txtCus1DpP.Text = txtCus1DpP_Text
        txtPCPrcP.Text = txtPCPrcP_Text
        txtPCPrcP_Text_round_5 = txtPCPrcP_Text

        txtMU.Text = txtMUP.Text
        txtPckCstAmt.Text = txtPckCst1P.Text
        txtItmCommAmt.Text = txtItmComm1P.Text
        txtCus1Dp.Text = txtCus1DpP.Text
        txtPCPrc.Text = txtPCPrcP.Text
        txtPCPrc_Text_round_5 = txtPCPrcP_Text_round_5


        txtQutItmSts.Text = txtQutItmSts_Text
        txtQutSts.Text = txtQutSts_Text
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = dtl_txtQutItmSts
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = dtl_txtQutItmSts
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = dtl_qud_apprve


        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu") = Val(txtMU.Text)
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = Val(txtPckCstAmt.Text)
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = Val(txtItmCommAmt.Text)
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = Val(txtCus1Dp.Text)
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_PCPRC") = txtPCPrc_Text_round_5


        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
        End If




        Call release_TabControl()
    End Sub

    Private Sub cmdCptBkd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdCptBkd.Click
        PanelCptBkd.Location = New Point(400, 250)

        If sMode = cModeAdd Or sMode = cModeUpd Then
            cmdPanCptBkdIns.Enabled = True
        Else
            cmdPanCptBkdIns.Enabled = False
        End If

        bIsShowPanels = True
        PanelCptBkd.Visible = True
        PanelCptBkd.BringToFront()
    End Sub

    Private Sub cmdPanCptBkdIns_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanCptBkdIns.Click
        Dim qutseq As String
        qutseq = txtSeq.Text

        Dim rowcount As Integer
        rowcount = rs_QUCPTBKD.Tables("RESULT").Rows.Count

        Dim drCB() As DataRow = rs_QUCPTBKD.Tables("RESULT").Select("qcb_qutseq = " & qutseq & " and qcb_cstpct = 0")

        If drCB.Length = 0 Then

            rs_QUCPTBKD.Tables("RESULT").Rows.Add()
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("DEL") = ""
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_cocde") = cboCoCde.Text
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_qutno") = txtQutNo.Text
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_itmno") = txtItmNo.Text
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_cptseq") = 0
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_cpt") = 0
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_curcde") = IIf(Trim(txtCurCde2.Text) = "", "", Trim(txtCurCde2.Text))
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_cst") = 0
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_cstpct") = 0
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_pct") = 0
            rs_QUCPTBKD.Tables("RESULT").Rows(rowcount).Item("qcb_creusr") = "~*NEW*~"

            dgMatBkd.DataSource = Nothing

            Dim sFilter As String
            sFilter = "qcb_qutseq = " & qutseq
            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
            dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView

            Recordstatus = True
            Call display_Component()
        End If
    End Sub

    Private Sub display_Component()
        Dim intCol As Integer

        intCol = 0

        With dgMatBkd
            .Columns(intCol).HeaderText = "Del"
            .Columns(intCol).Width = 30
            .Columns(intCol).Visible = True
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).HeaderText = "Material"
            .Columns(intCol).Width = 130
            .Columns(intCol).ReadOnly = False
            .Columns(intCol).Visible = True
            intCol = intCol + 1
            .Columns(intCol).HeaderText = "Curr."
            .Columns(intCol).ReadOnly = True
            .Columns(intCol).Width = 40
            .Columns(intCol).Visible = True
            intCol = intCol + 1
            .Columns(intCol).HeaderText = "Cost$"
            .Columns(intCol).ReadOnly = True
            .Columns(intCol).Width = 70
            .Columns(intCol).Visible = True
            intCol = intCol + 1
            .Columns(intCol).HeaderText = "Cost%"
            .Columns(intCol).ReadOnly = False
            .Columns(intCol).Width = 70
            .Columns(intCol).Visible = True
            intCol = intCol + 1
            .Columns(intCol).HeaderText = "WGT%"
            .Columns(intCol).ReadOnly = False
            .Columns(intCol).Width = 70
            .Columns(intCol).Visible = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
            .Columns(intCol).Visible = False
            .Columns(intCol).Width = 0
            .Columns(intCol).ReadOnly = True
            intCol = intCol + 1
        End With
    End Sub

    Private Sub cmdPanCptBkdQuit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanCptBkdQuit.Click
        '*** Check percentage of component breakdown
        Dim dblTtlCstPct As Double
        Dim dblTtlPct As Double
        Dim flgHasCptBkd As Boolean

        flgHasCptBkd = False
        dblTtlCstPct = 0
        dblTtlPct = 0


        Dim qutseq As String
        qutseq = txtSeq.Text

        Dim drCB() As DataRow = rs_QUCPTBKD.Tables("RESULT").Select("qcb_qutseq = " & qutseq)

        If drCB.Length > 0 Then
            For index As Integer = 0 To drCB.Length - 1
                If drCB(index).Item("Del").ToString <> "Y" Then
                    dblTtlCstPct = dblTtlCstPct + CDbl(IIf(IsDBNull(drCB(index).Item("qcb_cstpct")) = True, 0, drCB(index).Item("qcb_cstpct")))
                    dblTtlPct = dblTtlPct + CDbl(IIf(IsDBNull(drCB(index).Item("qcb_pct")) = True, 0, drCB(index).Item("qcb_pct")))
                    flgHasCptBkd = True
                End If
            Next

            '''20131217 avoid 0%
            For index As Integer = 0 To drCB.Length - 1
                If drCB(index).Item("Del").ToString <> "Y" Then
                    If CDbl(IIf(IsDBNull(drCB(index).Item("qcb_pct")) = True, 0, drCB(index).Item("qcb_pct"))) = 0 Or _
                    CDbl(IIf(IsDBNull(drCB(index).Item("qcb_cstpct")) = True, 0, drCB(index).Item("qcb_cstpct"))) = 0 Then
                        dgMatBkd.Focus()
                        MsgBox("Either one Cost or Weight Percentage must larger than 0", vbOKOnly, "Component Breakdown")
                        Exit Sub
                    End If
                End If
            Next

            If dblTtlCstPct = 0 And dblTtlPct = 0 Then
                dgMatBkd.Focus()
                MsgBox("Either one Cost or Percentage must larger than 0", vbOKOnly, "Component Breakdown")
                Exit Sub
            End If

            If dblTtlCstPct <> 100 And dblTtlCstPct <> 0 And flgHasCptBkd = True Then
                dgMatBkd.Focus()
                MsgBox("The total of Cost Percentage is not equal to 0 or 100.", vbOKOnly, "Component Breakdown")
                Exit Sub
            End If

            If dblTtlPct <> 100 And dblTtlPct <> 0 And flgHasCptBkd = True Then
                dgMatBkd.Focus()
                MsgBox("The total of Weight Percentage is not equal to 0 or 100.", vbOKOnly, "Component Breakdown")
                Exit Sub
            End If
        End If

        bIsShowPanels = False
        PanelCptBkd.SendToBack()
        PanelCptBkd.Visible = False
    End Sub

    Private Sub btnTOMutShp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTOMutShp.Click
        PanelMutShp.Location = New Point(300, 200)

        If sMode = cModeAdd Or sMode = cModeUpd Then
            cmdPanMutShpIns.Enabled = True
        Else
            cmdPanMutShpIns.Enabled = False
        End If

        bIsShowPanels = True
        PanelMutShp.Visible = True

        Dim sFilter As String
        sFilter = "qds_qutseq = " & txtSeq.Text
        rs_QUDTLSHP.Tables("RESULT").DefaultView.RowFilter = sFilter

        dgMutShp.DataSource = rs_QUDTLSHP.Tables("RESULT").DefaultView
        Call display_MutShp()

        PanelMutShp.BringToFront()
    End Sub

    Private Sub cmdPanMutShpIns_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanMutShpIns.Click
        Dim qutseq As String
        qutseq = txtSeq.Text

        Dim rowcount As Integer
        rowcount = rs_QUDTLSHP.Tables("RESULT").Rows.Count

        Dim drCB() As DataRow = rs_QUDTLSHP.Tables("RESULT").Select("qds_qutseq = " & qutseq & " and qds_shpqty = 0")

        If drCB.Length = 0 Then

            rs_QUDTLSHP.Tables("RESULT").Rows.Add()

            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_cocde") = cboCoCde.Text
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_qutno") = txtQutNo.Text
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_qutseq") = txtSeq.Text

            Dim drCB2() As DataRow = rs_QUDTLSHP.Tables("RESULT").Select("qds_qutseq = " & qutseq)
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_shpseq") = drCB2.Length

            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_shpqty") = 0
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_ftyshpstr") = "01/01/1900"
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_ftyshpend") = "01/01/1900"
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_custshpstr") = "01/01/1900"
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_custshpend") = "01/01/1900"
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_pckunt") = "PC"
            rs_QUDTLSHP.Tables("RESULT").Rows(rowcount).Item("qds_creusr") = "~*ADD*~"

            dgMutShp.DataSource = Nothing

            Dim sFilter As String
            sFilter = "qds_qutseq = " & qutseq
            rs_QUDTLSHP.Tables("RESULT").DefaultView.RowFilter = sFilter
            dgMutShp.DataSource = rs_QUDTLSHP.Tables("RESULT").DefaultView

            Recordstatus = True
            Call display_MutShp()
        End If
    End Sub

    Private Sub cmdPanMutShpQuit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanMutShpQuit.Click
        'check valid data

        bIsShowPanels = False
        PanelMutShp.SendToBack()
        PanelMutShp.Visible = False
    End Sub

    Private Sub display_MutShp()
        If rs_QUDTLSHP.Tables.Count = 0 Then
            Exit Sub
        End If

        dgMutShp.DataSource = rs_QUDTLSHP.Tables("RESULT").DefaultView

        dgMutShp.RowHeadersWidth = 18
        dgMutShp.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.DisableResizing
        dgMutShp.ColumnHeadersHeight = 18
        dgMutShp.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing
        dgMutShp.AllowUserToResizeColumns = True
        dgMutShp.AllowUserToResizeRows = False
        dgMutShp.RowTemplate.Height = 18

        Dim i As Integer

        For i = 0 To rs_QUDTLSHP.Tables("RESULT").Columns.Count - 1
            rs_QUDTLSHP.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        For i = 0 To dgMutShp.Columns.Count - 1
            dgMutShp.Columns(i).ReadOnly = False
        Next i

        i = 0
        dgMutShp.Columns(i).HeaderText = "Del"
        dgMutShp.Columns(i).Width = 30
        dgMutShp.Columns(i).ReadOnly = True
        i = i + 1 '1 cocde
        dgMutShp.Columns(i).HeaderText = "Co. Code"
        dgMutShp.Columns(i).Visible = True
        i = i + 1 '2 qutno
        dgMutShp.Columns(i).HeaderText = "Qut #"
        dgMutShp.Columns(i).Visible = True
        i = i + 1 '3 'seq
        dgMutShp.Columns(i).HeaderText = "Seq"
        dgMutShp.Columns(i).Width = 30
        dgMutShp.Columns(i).ReadOnly = True
        i = i + 1 '4 'ship seq
        dgMutShp.Columns(i).HeaderText = "Ship Seq"
        dgMutShp.Columns(i).Width = 30
        dgMutShp.Columns(i).ReadOnly = True
        i = i + 1 '5
        dgMutShp.Columns(i).HeaderText = "Shp Qty"
        dgMutShp.Columns(i).Width = 60
        i = i + 1 '6
        dgMutShp.Columns(i).HeaderText = "Fty Shp Str"
        dgMutShp.Columns(i).Width = 75
        '        dgMutShp.Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
        i = i + 1 '7
        dgMutShp.Columns(i).HeaderText = "Fty Shp End"
        dgMutShp.Columns(i).Width = 75
        '       dgMutShp.Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
        i = i + 1 '8
        dgMutShp.Columns(i).HeaderText = "Cus Shp Str"
        dgMutShp.Columns(i).Width = 75
        '      dgMutShp.Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
        i = i + 1 '9
        dgMutShp.Columns(i).HeaderText = "Cus Shp End"
        dgMutShp.Columns(i).Width = 75
        '     dgMutShp.Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
        i = i + 1 '10
        dgMutShp.Columns(i).HeaderText = "UM"
        dgMutShp.Columns(i).Width = 30
        i = i + 1 '11
        dgMutShp.Columns(i).Visible = False
        i = i + 1 '12
        dgMutShp.Columns(i).Visible = False
        i = i + 1 '13
        dgMutShp.Columns(i).Visible = False
        i = i + 1 '14
        dgMutShp.Columns(i).Visible = False
        i = i + 1 '15
        dgMutShp.Columns(i).Visible = False
    End Sub

    Private Sub fillParameter()
        '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_PC '" & cboCoCde.Text & "','" & gsUsrID & "','" & sMODULE & "','Primary'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_P, rtnStr)
        gspStr = ""

        '''''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillParameter sp_select_CUBASINF_PC :" & rtnStr)
            Exit Sub
        End If

        If rs_CUBASINF_P.Tables("RESULT").Rows.Count > 0 Then
            cboCus1No.Items.Clear()
            cboCus1No.Text = ""

            If Add_flag = True Then
                dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno >= '50000'")
            End If

            If Not dr Is Nothing Then
                If dr.Length > 0 Then
                    For index As Integer = 0 To dr.Length - 1
                        cboCus1No.Items.Add(dr(index)("cbi_cusno") + " - " + dr(index)("cbi_cussna"))
                    Next index
                End If
            End If
        Else
            MsgBox("There is no function, please contact EDP or System Administrator.")
            Exit Sub
        End If

        '*** Customer Group
        '''''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUGRPINF ''"
        rtnLong = execute_SQLStatement(gspStr, rs_CUGRPINF, rtnStr)
        gspStr = ""

        '''''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillParameter sp_select_CUGRPINF :" & rtnStr)
            Exit Sub
        End If

        If rs_CUGRPINF.Tables("RESULT").Rows.Count = 0 Then
            MsgBox("There is no Customer Group Information, please contact EDP or System Administrator.")
            Exit Sub
        End If

        '*** HSTU/Tariff #
        '''''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_P '" & cboCoCde.Text & "','HSTU'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYHRMCDE, rtnStr)
        gspStr = ""

        '''''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillParameter sp_select_CUBASINF_P:" & rtnStr)
            Exit Sub
        End If

        If rs_SYHRMCDE.Tables("RESULT").Rows.Count > 0 Then
            cboHrmCde.Items.Clear()
            cboHrmCde.Text = ""
            cboHrmCde.Items.Add("")
            For index As Integer = 0 To rs_SYHRMCDE.Tables("RESULT").Rows.Count - 1
                cboHrmCde.Items.Add(rs_SYHRMCDE.Tables("RESULT").Rows(index)("yhc_hrmcde") + " - " + _
                                    rs_SYHRMCDE.Tables("RESULT").Rows(index)("yhc_hrmdsc") + _
                                    IIf(rs_SYHRMCDE.Tables("RESULT").Rows(index)("yhc_tarzon").ToString = "U", " (HSTU # for USA)", " (Tariff # for Europe)"))
            Next index
        Else
            MsgBox("There is no function, please contact EDP or System Administrator.")
            Exit Sub
        End If

        '*** Construction Method
        '''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_P '" & cboCoCde.Text & "','Construction'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CM, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillParameter sp_select_CUBASINF_P Construction:" & rtnStr)
            Exit Sub
        End If

        If rs_CUBASINF_CM.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
            MsgBox("There is no function, please contact EDP or System Administrator.")
            Exit Sub
        End If

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_list_VNBASINF_QUM00001 ''"
        rtnLong = execute_SQLStatement(gspStr, rs_VNBASINF, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading txtItmNoVen_KeyPress sp_list_VNBASINF_QUM00001 :" & rtnStr)
            Exit Sub
        End If

        Dim tmpstr As String
        If rs_VNBASINF.Tables("RESULT").Rows.Count > 0 Then
            cboTOFty.Items.Add("")

            cboDV.Items.Add("")
            cboVenNo.Items.Add("")
            cboCusVen.Items.Add("")
            cboTV.Items.Add("")
            cboFA.Items.Add("")

            For index As Integer = 0 To rs_VNBASINF.Tables("RESULT").Rows.Count - 1
                tmpstr = rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna")

                cboTOFty.Items.Add(tmpstr)

                cboDV.Items.Add(tmpstr)
                cboVenNo.Items.Add(tmpstr)
                cboCusVen.Items.Add(tmpstr)
                cboTV.Items.Add(tmpstr)
                cboFA.Items.Add(tmpstr)

                '               If rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_ventyp") = "E" Then
                '                    cboItmNoVen.Items.Add(Reverse_hyphen_one_two(tmpstr))
                'End If
            Next


            rs_VNBASINF.Tables("RESULT").DefaultView.Sort = " vbi_vensna asc"
            For index As Integer = 0 To rs_VNBASINF.Tables("RESULT").DefaultView.Count - 1
                If rs_VNBASINF.Tables("RESULT").DefaultView(index)("vbi_ventyp").ToString = "E" Then
                    cboItmNoVen.Items.Add(rs_VNBASINF.Tables("RESULT").DefaultView(index)("vbi_vensna").ToString & " - " & rs_VNBASINF.Tables("RESULT").DefaultView(index)("vbi_venno").ToString)
                End If
            Next


        End If

        'tranterm
        gspStr = "sp_list_SYSETINF ''"
        rtnLong = execute_SQLStatement(gspStr, rs_SYSETINF, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading QUM00001  sp_list_SYSETINF :" & rtnStr)
            Exit Sub
        End If

        '''III
        '        format_cboPanCPTranTerm()
        format_cboUM()
        '       format_cboHKPRCTerm()
        '      format_cboFTYPRCTerm()


        '' Cursor = Cursors.Default

    End Sub

    Private Sub cmdBackD_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdBackD.Click

        ' If sMode = cModeAdd Or sMode = cModeUpd Or Recordstatus = False Then
        '20130908 for anita
        If sMode = cModeAdd Or sMode = cModeUpd Or sMode = cModeRead Then

            If check_leave_QuotationDetail() = True Then
                Call fill_QUOTNDTL()
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                '''0811
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
                End If

                If sReadingIndexQ = 0 Then
                    sReadingIndexQ = 0
                Else
                    sReadingIndexQ = sReadingIndexQ - 1
                End If

                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                Dim qutseq As Integer
                qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

                Call display_Detail(qutseq)
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "Y" Then
                    Exit Sub
                End If

                Call ShowFooterBar(True)
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    If txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "" Then
                        reset_detail_control("Detail_Init", "All")
                    Else
                        '''0811
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update", "RealItem")
                            End If
                        Else
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update_Info", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update_Info", "RealItem")
                            End If
                        End If
                    End If
                    cboPcking.Enabled = False
                End If
            End If
        End If

        Exit Sub


        '*** Check Combo in list or not ?
        If not_in_Combo_HDR() = True Then
            Exit Sub
        End If

        If not_in_Combo_DTL() = True Then
            Exit Sub
        End If

        '*** Check Item Exist ?
        If txtItmNoVen.Text = "" Then
            If txtItmNo.Text <> "" And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True) Then
                If not_exist_ITEM() = True Then
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                    " - Item not found" + Chr(13) + Chr(10) + _
                    " - It is a BOM Item" + Chr(13) + Chr(10) + _
                    " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                    " - It is held by the system" + Chr(13) + Chr(10) + _
                    " - Vendor is not available", vbExclamation, "Warning b")
                    If txtItmNoReal.Text <> "" Then
                        If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                            txtItmNoReal.Focus()
                        End If
                    Else
                        If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                            txtItmNoTmp.Focus()
                        End If
                    End If
                    Exit Sub
                End If
            End If
        End If

        '*** Check Dupliate Packing
        If check_dup_Packing() = True Then
            btcQUM00001.SelectedIndex = 1

            If Not setNewItemFormat(txtItmNo.Text) Then
                MsgBox("The Packing & Color are already exists.")
                cboColCde.Text = ""
                txtColCde.Text = ""
                txtColDsc.Text = ""
            End If

            cboPcking.Text = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            '*** Phase 2 comment it
            'txtHstRef.Text = ""
            'txtQutDat.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            '*** Phase 2
            txtCBM.Text = ""

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   ' factory price term
            '*** Phase 2
            cboTranTrm.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset original MOQ/MOA
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtPckItr.Text = ""
            'txtDiscnt.Text = "0"
            txtCus1Sp.Text = "0"
            txtCus1Dp.Text = "0"
            'txtDiscntP.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus1DpP.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus2Dp.Text = "0"

            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            '*** Reset CIH Currency and Price
            txtCIHprc.Text = ""
            txtCIHcur.Text = ""
            txtPeriod.Text = ""
            txtSmpPrc.Text = ""
            txtSmpUnt.Text = ""

            Call ABUASST(txtItmNo.Text, "HIDE")
            Call ABUASST(txtItmNo.Text, "HIDEPRC")

            txtInrdin.Text = "0"
            txtInrwin.Text = "0"
            txtInrhin.Text = "0"
            txtMtrdin.Text = "0"
            txtMtrwin.Text = "0"
            txtMtrhin.Text = "0"

            txtInrdcm.Text = "0"
            txtInrwcm.Text = "0"
            txtInrhcm.Text = "0"
            txtMtrdcm.Text = "0"
            txtMtrwcm.Text = "0"
            txtMtrhcm.Text = "0"

            txtGrswgt.Text = "0"
            txtNetwgt.Text = "0"

            '*** Phase 2
            'If rbItmNoReal.Checked Then
            '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then txtItmNoReal.Focus()
            '    txtItmNoReal.SelectAll()
            'ElseIf txtItmNoTmp.Text <> "" Then
            '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then txtItmNoTmp.Focus()
            '    txtItmNoTmp.SelectAll()
            'Else
            '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then txtItmNoVen.Focus()
            '    txtItmNoVen.SelectAll()
            'End If
            Exit Sub
        End If

        If invalid_Detail() = True Then
            '*** Phase 2 comment it
            'If IsEmptySpecPck = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please fill in Special Packaging Desc.")
            '    If txtSpecpck.Enabled = True Then
            '        txtSpecpck.Focus()
            '    End If
            '    IsEmptySpecPck = False
            'End If

            'If IsEmptyDuty = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please select HSTU / Tariff #.", vbOKOnly, "ELC Duty Rate")
            '    IsEmptyDuty = False
            'End If
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
            Call check_update_Detail()

            Call fill_QUOTNDTL()

            no_Display_Detail = True
            sReadingIndexQ = sReadingIndexQ - 1
            no_Display_Detail = False

            'Call display_Detail()

            dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
            '        Call display_dgOthDtl("A")
            Call display_dgOthDtl("A")

            cmdNextD.Enabled = True
            If sReadingIndexQ = 0 Then
                cmdBackD.Enabled = False
            Else
                cmdBackD.Enabled = True
            End If

            '*** Phase 2 comment it
            'lblCptBkd.ForeColor = Color.Black
            'flggrdMatbkd = False

            '*** Phase 2
            'If rbItmNoReal.Checked Then
            '    cboColCde.Enabled = False
            '    cboPcking.Enabled = False
            '    If txtItmNoReal.Enabled Then
            '        txtItmNoReal.Focus()
            '        txtItmNoReal.SelectAll()
            '    End If
            'ElseIf txtItmNoTmp.Text <> "" Then
            '    cboColCde.Enabled = False
            '    cboPcking.Enabled = False
            '    If txtItmNoTmp.Enabled Then
            '        txtItmNoTmp.Focus()
            '        txtItmNoTmp.SelectAll()
            '    End If
            'Else
            '    cboItmNoVen.Enabled = False
            '    txtColCde.Enabled = False
            '    cboUM.Enabled = False
            '    txtInrQty.Enabled = False
            '    txtMtrQty.Enabled = False
            '    txtCft.Enabled = False
            '    txtCBM.Enabled = False
            '    cboDtlPrcTrm.Enabled = False
            '    cboFtyPrcTrm.Enabled = False
            '    cboTranTrm.Enabled = False
            '    If txtItmNoVen.Enabled Then
            '        txtItmNoVen.Focus()
            '        txtItmNoVen.SelectAll()
            '    End If
            'End If
        End If

        '*** Phase 2 comment it
        'Call SetHeaderBarValue(True)
        flag_cmdInsRow_Click = False
    End Sub

    Private Sub cmdNextD_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdNextD.Click


        ' If sMode = cModeAdd Or sMode = cModeUpd Or Recordstatus = False Then
        '20130908 for anita
        If sMode = cModeAdd Or sMode = cModeUpd Or sMode = cModeRead Then

            If check_leave_QuotationDetail() = True Then
                Call fill_QUOTNDTL()
                '''0811
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
                End If

                If sReadingIndexQ = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 Then
                    sReadingIndexQ = sReadingIndexQ
                Else
                    sReadingIndexQ = sReadingIndexQ + 1
                End If

                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If


                Dim qutseq As Integer
                qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

                Call display_Detail(qutseq)
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "Y" Then
                    Exit Sub
                End If

                Call ShowFooterBar(True)
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    If txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "" Then
                        reset_detail_control("Detail_Init", "All")
                    Else
                        '''0811
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update", "RealItem")
                            End If
                        Else
                            If txtItmNoVen.Text <> "" Then
                                reset_detail_control("Detail_Update_Info", "ItemNotInIM")
                            Else
                                reset_detail_control("Detail_Update_Info", "RealItem")
                            End If
                        End If
                    End If
                    cboPcking.Enabled = False
                End If
            End If
        End If



        Exit Sub

        '*** Check Combo in list or not ?
        If not_in_Combo_HDR() = True Then
            Exit Sub
        End If

        If not_in_Combo_DTL() = True Then
            Exit Sub
        End If

        '*** Check Item Exist ?
        If txtItmNoVen.Text = "" Then
            If txtItmNo.Text <> "" And (txtItmNo.Enabled = True Or txtItmNoTmp.Enabled = True Or txtItmNoVen.Enabled = True) Then
                If not_exist_ITEM() = True Then
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                    " - Item not found" + Chr(13) + Chr(10) + _
                    " - It is a BOM Item" + Chr(13) + Chr(10) + _
                    " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                    " - It is held by the system" + Chr(13) + Chr(10) + _
                    " - Vendor is not available", vbExclamation, "Warning n")
                    'add for debug
                    'If rbItmNoReal.Checked = True Then
                    '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                    '        txtItmNoReal.Focus()
                    '    End If
                    'Else
                    '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                    '        txtItmNoTmp.Focus()
                    '    End If
                    'End If
                    Exit Sub
                End If
            End If
        End If

        '*** Check Dupliate Packing
        If check_dup_Packing() = True Then
            btcQUM00001.SelectedIndex = 1

            If Not setNewItemFormat(txtItmNo.Text) Then
                MsgBox("The Packing & Color are already exists.")
                cboColCde.Text = ""
                txtColCde.Text = ""
                txtColDsc.Text = ""
            End If

            cboPcking.Text = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            '*** Phase 2 comment it
            'txtHstRef.Text = ""
            'txtQutDat.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            '*** Phase 2
            txtCBM.Text = ""

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   ' factory price term
            '*** Phase 2
            cboTranTrm.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset Original MOQ/MOA
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtPckItr.Text = ""
            'txtDiscnt.Text = "0"
            txtCus1Sp.Text = "0"
            txtCus1Dp.Text = "0"
            'txtDiscntP.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus1DpP.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus2Dp.Text = "0"

            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            '*** Reset CIH Currency and Price
            txtCIHprc.Text = ""
            txtCIHcur.Text = ""
            txtPeriod.Text = ""
            txtSmpPrc.Text = ""
            txtSmpUnt.Text = ""

            Call ABUASST(txtItmNo.Text, "HIDE")
            Call ABUASST(txtItmNo.Text, "HIDEPRC")

            txtInrdin.Text = "0"
            txtInrwin.Text = "0"
            txtInrhin.Text = "0"
            txtMtrdin.Text = "0"
            txtMtrwin.Text = "0"
            txtMtrhin.Text = "0"

            txtInrdcm.Text = "0"
            txtInrwcm.Text = "0"
            txtInrhcm.Text = "0"
            txtMtrdcm.Text = "0"
            txtMtrwcm.Text = "0"
            txtMtrhcm.Text = "0"

            txtGrswgt.Text = "0"
            txtNetwgt.Text = "0"

            '*** Phase 2
            'If rbItmNoReal.Checked Then
            '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then txtItmNoReal.Focus()
            '    txtItmNoReal.SelectAll()
            'ElseIf txtItmNoTmp.Text <> "" Then
            '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then txtItmNoTmp.Focus()
            '    txtItmNoTmp.SelectAll()
            'Else
            '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then txtItmNoVen.Focus()
            '    txtItmNoVen.SelectAll()
            'End If
            Exit Sub
        End If

        If invalid_Detail() = True Then
            '*** Phase 2 comment it
            'If IsEmptySpecPck = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please fill in Special Packaging Desc.")
            '    If txtSpecpck.Enabled = True Then
            '        txtSpecpck.Focus()
            '    End If
            '    IsEmptySpecPck = False
            'End If

            'If IsEmptyDuty = True Then
            '    btcQUM00001.SelectedIndex = 2
            '    MsgBox("Please select HSTU / Tariff #.", vbOKOnly, "ELC Duty Rate")
            '    IsEmptyDuty = False
            'End If
            Exit Sub
        End If

        If sReadingIndexQ < rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 Then
            Call check_update_Detail()

            Call fill_QUOTNDTL()

            no_Display_Detail = True
            sReadingIndexQ = sReadingIndexQ + 1
            no_Display_Detail = False

            'Call display_Detail()

            dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
            Call display_dgOthDtl("A")


            cmdBackD.Enabled = True
            If sReadingIndexQ = rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 Then
                cmdNextD.Enabled = False
            Else
                cmdNextD.Enabled = True
            End If

            '*** Phase 2 comment it
            'lblCptBkd.ForeColor = Color.Black
            'flggrdMatbkd = False

            '*** Phase 2
            'If rbItmNoReal.Checked Then
            If txtItmNoReal.Text <> "" Then
                cboColCde.Enabled = False
                cboPcking.Enabled = False
                If txtItmNoReal.Enabled Then
                    txtItmNoReal.Focus()
                    txtItmNoReal.SelectAll()
                End If
                'ElseIf txtItmNoTmp.Text <> "" Then
            ElseIf txtItmNoTmp.Text <> "" Then
                cboColCde.Enabled = False
                cboPcking.Enabled = False
                If txtItmNoTmp.Enabled Then
                    txtItmNoTmp.Focus()
                    txtItmNoTmp.SelectAll()
                End If
            Else
                cboItmNoVen.Enabled = False
                txtColCde.Enabled = False
                cboUM.Enabled = False
                txtInrQty.Enabled = False
                txtMtrQty.Enabled = False
                txtCft.Enabled = False
                txtCBM.Enabled = False
                cboDtlPrcTrm.Enabled = False
                cboFtyPrcTrm.Enabled = False
                cboTranTrm.Enabled = False
                If txtItmNoVen.Enabled Then
                    txtItmNoVen.Focus()
                    txtItmNoVen.SelectAll()
                End If
            End If
        End If
        flag_cmdInsRow_Click = False


        '*** Phase 2 comment it
        'Call SetHeaderBarValue(True)
    End Sub

    Private Sub txtItmNoReal_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoReal.GotFocus
        txtItmNoReal.SelectAll()
        Alias_itm = False
    End Sub

    Private Sub txtItmNoReal_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoReal.TextChanged
        txtItmNo.Text = txtItmNoReal.Text
        txtItmNoTmp.Enabled = False
        txtItmNoVen.Enabled = False
        cboItmNoVen.Enabled = False ''Call txtItmNoReal_Change()
        Call txtItmNo_Change()
        If Trim(txtItmNoReal.Text) <> "" Then
            txtItmNoVen.Text = ""
            cboItmNoVen.Text = ""
        End If
    End Sub

    Private Sub txtItmNoReal_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtItmNoReal.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtItmNoReal.Text = UCase(Trim(txtItmNoReal.Text))
            txtItmNo.Text = txtItmNoReal.Text

            If txtItmNoReal.Text <> "" Then
                Call txtItmNoReal_Change()

                Call txtItmNo_Press()
                Call fill_QUOTNDTL()
            End If
        End If
    End Sub

    Private Sub txtItmNoTmp_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoTmp.GotFocus
        txtItmNoTmp.SelectAll()
        Alias_itm = False
    End Sub

    Private Sub txtItmNoTmp_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoTmp.TextChanged
        '' 
        If txtItmNoReal.Text.Trim <> "" Then
            Exit Sub
        End If

        txtItmNo.Text = txtItmNoTmp.Text
        txtItmNoReal.Enabled = False
        txtItmNoVen.Enabled = False
        cboItmNoVen.Enabled = False



        Call txtItmNo_Change()

        If Trim(txtItmNoTmp.Text) <> "" Then
            txtItmNoVen.Text = ""
            cboItmNoVen.Text = ""
        End If

    End Sub

    Private Sub txtItmNoTmp_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtItmNoTmp.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtItmNoTmp.Text = UCase(Trim(txtItmNoTmp.Text))
            txtItmNo.Text = txtItmNoTmp.Text

            If txtItmNoTmp.Text <> "" And check_tempItemNo() = False Then
                Call txtItmNoTmp_Change()

                Call txtItmNo_Press()
                Call fill_QUOTNDTL()
            End If
        End If
    End Sub

    Private Function check_tempItemNo() As Boolean
        check_tempItemNo = False

        bIsShowPanels = True

        Dim cus1no As String
        Dim cus2no As String

        If Trim(cboCus1No.Text) = "" Then
            cus1no = ""
        Else
            cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If Trim(cboCus2No.Text) = "" Then
            cus2no = ""
        Else
            cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q '','" & txtItmNoTmp.Text.Trim & "','" & cus1no & "','" & cus2no & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Function
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            dgPanItmNoSelect.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView
            Call ShowGrdIMTMP_S()
            PanelItmNoSelect.Visible = True
            PanelItmNoSelect.BringToFront()

            cmdItmNoConv.Enabled = True
            cmdItmNoConvVen.Enabled = False
            check_tempItemNo = True
        Else
            check_tempItemNo = False
        End If
    End Function

    Private Sub txtItmNoVen_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoVen.GotFocus
        txtItmNoVen.SelectAll()
        Alias_itm = False
    End Sub

    Private Sub txtItmNoVen_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtItmNoVen.TextChanged
        txtItmNo.Text = txtItmNoVen.Text
        txtItmNoReal.Enabled = False
        txtItmNoTmp.Enabled = False
        Call txtItmNo_Change()

        If txtItmNoVen.Text <> "" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmno") = txtItmNoVen.Text
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnoven") = txtItmNoVen.Text
        End If
    End Sub

    Private Sub txtItmNoVen_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtItmNoVen.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtItmNoVen.Text = UCase(Trim(txtItmNoVen.Text))
            txtItmNo.Text = txtItmNoVen.Text

            If txtItmNoVen.Text <> "" Then
                cboItmNoVen.Enabled = True
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmno") = txtItmNoVen.Text
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnoven") = txtItmNoVen.Text
            End If
        End If

        Exit Sub




        cboItmNoVen.Enabled = True


        '*** Phase 2
        'rbItmNoVen.Checked = True
        txtColCde.Visible = True
        'txtPcking.Visible = True
        cboUM.Visible = True
        txtInrQty.Visible = True
        txtMtrQty.Visible = True
        txtCft.Visible = True
        txtCBM.Visible = True
        cboFtyPrcTrm.Visible = True
        cboDtlPrcTrm.Visible = True
        cboTranTrm.Visible = True

        If e.KeyChar.Equals(Chr(13)) Then
            txtItmNoVen.Text = UCase(Trim(txtItmNoVen.Text))

            '*** Phase 2
            txtItmNo.Text = txtItmNoVen.Text

            If txtItmNoVen.Text <> "" Then
                cboItmNoVen.Enabled = True

                If rs_VNBASINF.Tables("RESULT").Rows.Count > 0 Then
                    cboItmNoVen.Items.Add("")
                    cboCusVen.Items.Add("")

                    cboDV.Items.Add("")
                    cboTV.Items.Add("")
                    cboFA.Items.Add("")

                    cboVenNo.Items.Add("")

                    For index As Integer = 0 To rs_VNBASINF.Tables("RESULT").Rows.Count - 1
                        If Not (rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") And _
                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno").ToString <> "1882" Then
                            cboItmNoVen.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                            rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            cboCusVen.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            cboDV.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            cboTV.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            cboFA.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                                rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            'cboItmNoVen.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                            '                    rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))
                            cboVenNo.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                                                            rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna"))

                        End If
                    Next
                End If
            End If
        End If

        pth = ""

        optImageY.Checked = False
        optImageN.Checked = True
        cmdImage.Enabled = False
    End Sub

    Private Sub cboItmNoVen_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboItmNoVen.KeyUp
        auto_search_combo(cboItmNoVen, e.KeyCode)
    End Sub

    Private Sub cboItmNoVen_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboItmNoVen.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then

            gbColor.Enabled = True
            txtColCde.Enabled = True
            txtColCde.Visible = True
        End If
    End Sub

    Private Sub cboItmNoVen_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboItmNoVen.SelectedIndexChanged
        Dim venno As String
        If Replace(cboItmNoVen.Text, "-", "") = cboItmNoVen.Text Then
            MsgBox("Please select vendor from the drop down list!")
            cboItmNoVen.Focus()
            Exit Sub
        Else
            venno = Trim(Split(Reverse_hyphen_one_two(cboItmNoVen.Text), "-")(0))
        End If

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmnovenno") = cboItmNoVen.Text


        dr = rs_VNBASINF.Tables("RESULT").Select("vbi_venno = '" & venno & "'")

        If dr.Length = 1 Then
            txtFCurCde.Text = dr(0).Item("vbi_curcde")
        Else
            txtFCurCde.Text = "HKD"
        End If

        If Trim(cboItmNoVen.Text) <> "" Then

            txtItmNoReal.Enabled = False
            txtItmNoTmp.Enabled = False

        End If



    End Sub

    Private Sub cboItmNoVen_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboItmNoVen.LostFocus
        Call txtItmNoVen_Change()
    End Sub

    Private Sub cboItmNoVen_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboItmNoVen.textChanged

    End Sub

    Private Sub cboItmNoVen_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboItmNoVen.Validating

    End Sub

    Private Sub cboUM_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboUM.KeyUp
        auto_search_combo(cboUM, e.KeyCode)
    End Sub

    Private Sub cboUM_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboUM.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            cboUM.Text = UCase(Trim(cboUM.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And cboUM.Text <> "" Then
            txtInrQty.Focus()
        End If
    End Sub

    Private Sub cboUM_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboUM.Validating
        Dim tmpstr As String
        tmpstr = cboUM.Text

        If cboUM.Items.IndexOf(tmpstr) = -1 Then
            MsgBox("UM - Data is Invalid, please enter a valid UM.")
            e.Cancel = True
        End If
    End Sub

    Private Sub cboUM_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboUM.SelectedIndexChanged
        If cboUM.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    tmpstr = cboUM.Text
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_untcde") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_untcde") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrQty_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtInrQty.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtInrQty.Text = UCase(Trim(txtInrQty.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtInrQty.Text <> "" Then
            txtMtrQty.Focus()
        End If
    End Sub

    Private Sub txtInrQty_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtInrQty.Validating
        If txtInrQty.Text.Trim = "" Or Not IsNumeric(txtInrQty.Text) Then
            MsgBox("Inner - Data is Invalid, please enter a valid Inner Quantity.")
            e.Cancel = True
            txtInrQty.SelectAll()
        End If

        If Val(txtInrQty.Text) > Val(txtMtrQty.Text) And Val(txtMtrQty.Text) > 0 Then
            MsgBox("Inner quantity should be less than Master quantity!")
            e.Cancel = True
            txtInrQty.SelectAll()
        End If


        If sMode = cModeAdd Or sMode = cModeUpd Then
            Dim tmpstr As String
            tmpstr = txtInrQty.Text
            If IsNumeric(tmpstr) Then
                If mtr_times_inr() = False Then
                    MsgBox("Master quantity must be the times of Inner quantity!")
                    e.Cancel = True
                    txtInrQty.SelectAll()
                End If
            End If
        End If


    End Sub

    Private Sub txtInrQty_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrQty.TextChanged
        If txtInrQty.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrQty.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrqty")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrqty") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrqty") = tmpstr
                    End If

                End If
            End If
        End If
    End Sub

    Private Sub txtMtrQty_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMtrQty.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtMtrQty.Text = UCase(Trim(txtMtrQty.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtMtrQty.Text <> "" Then
            txtCft.Focus()
        End If
    End Sub

    Private Sub txtMtrQty_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtMtrQty.Validating
        If txtMtrQty.Text.Trim = "" Or Not IsNumeric(txtMtrQty.Text) Then
            MsgBox("Master - Data is Invalid, please enter a valid Master Quantity.")
            e.Cancel = True
            txtMtrQty.SelectAll()
        End If


        If Val(txtInrQty.Text) > Val(txtMtrQty.Text) Then
            MsgBox("Inner quantity should be less than Master quantity!")
            e.Cancel = True
            txtMtrQty.SelectAll()
        End If

        If sMode = cModeAdd Or sMode = cModeUpd Then
            Dim tmpstr As String
            tmpstr = txtMtrQty.Text

            If IsNumeric(tmpstr) Then
                If mtr_times_inr() = False Then
                    MsgBox("Master quantity must be the times of Inner quantity!")
                    e.Cancel = True
                    txtMtrQty.SelectAll()
                End If
            End If
        End If

    End Sub

    Private Sub txtMtrQty_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrQty.TextChanged
        If txtMtrQty.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrQty.Text


                ''bug 
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrqty")) Then

                    If Val(tmpstr) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrqty")) Then

                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrqty") = Val(tmpstr)
                    End If

                End If

            End If
        End If
    End Sub

    Private Sub txtCft_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCft.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtCft.Text = UCase(Trim(txtCft.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtCft.Text <> "" Then
            cboFtyPrcTrm.Focus()
        End If
    End Sub

    Private Sub txtCft_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtCft.Validating
        If txtCft.Text.Trim = "" Or Not IsNumeric(txtCft.Text) Then
            MsgBox("CFT - Data is Invalid, please enter a valid CFT.")
            e.Cancel = True
            txtCft.SelectAll()
        End If
    End Sub

    Private Sub txtCft_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCft.TextChanged
        If sender.focused = True Then
            Dim cbm_value As Decimal
            If IsNumeric(txtCft.Text) Then
                cbm_value = txtCft.Text * CFT_CBM
                txtCBM.Text = cbm_value
            End If
        End If

        If txtCft.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCft.Text
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cft")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cft") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cft") = tmpstr
                    End If

                End If
            End If
        End If
    End Sub

    Private Sub txtCBM_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCBM.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtCBM.Text = UCase(Trim(txtCBM.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtCBM.Text <> "" Then
            cboFtyPrcTrm.Focus()
        End If
    End Sub

    Private Sub txtCBM_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtCBM.Validating
        If txtCBM.Text.Trim = "" Or Not IsNumeric(txtCBM.Text) Then
            MsgBox("CBM - Data is Invalid, please enter a valid CBM.")
            e.Cancel = True
            txtCBM.SelectAll()
        End If
    End Sub

    Private Sub txtCBM_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCBM.TextChanged
        If sender.focused = True Then
            Dim cft_value As Decimal
            If IsNumeric(txtCBM.Text) Then
                cft_value = txtCBM.Text * CBM_CFT
                txtCft.Text = cft_value
            End If
        End If

        If txtCBM.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCBM.Text
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cbm")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cbm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cbm") = tmpstr
                    End If

                End If
            End If
        End If

    End Sub

    Private Sub cboFtyPrcTrm_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboFtyPrcTrm.KeyUp
        auto_search_combo(cboFtyPrcTrm, e.KeyCode)
    End Sub

    Private Sub cboFtyPrcTrm_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboFtyPrcTrm.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            cboFtyPrcTrm.Text = UCase(Trim(cboFtyPrcTrm.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And cboFtyPrcTrm.Text <> "" Then
            cboDtlPrcTrm.Focus()
        End If
    End Sub

    Private Sub cboFtyPrcTrm_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboFtyPrcTrm.Validating


        If cboFtyPrcTrm.Text.Trim = "" Then
            MsgBox("Fty Term - Data is Invalid, please enter a valid Factory Price Term.")
            e.Cancel = True
        End If
    End Sub

    Private Sub cboFtyPrcTrm_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboFtyPrcTrm.SelectedIndexChanged
        If cboFtyPrcTrm.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboFtyPrcTrm.Text
                ''bug 
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyprctrm")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyprctrm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyprctrm") = tmpstr
                    End If

                End If
            End If
        End If
    End Sub

    Private Sub cboDtlPrcTrm_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboDtlPrcTrm.KeyUp
        auto_search_combo(cboDtlPrcTrm, e.KeyCode)
    End Sub

    Private Sub cboDtlPrcTrm_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboDtlPrcTrm.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            cboDtlPrcTrm.Text = UCase(Trim(cboDtlPrcTrm.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And cboDtlPrcTrm.Text <> "" Then
            cboTranTrm.Focus()
        End If
    End Sub

    Private Sub cboDtlPrcTrm_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboDtlPrcTrm.Validating
        If cboDtlPrcTrm.Text.Trim = "" Then
            MsgBox("HK Term - Data is Invalid, please enter a valid HK Price Term.")
            e.Cancel = True
        End If
    End Sub

    Private Sub cboDtlPrcTrm_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDtlPrcTrm.SelectedIndexChanged
        If cboDtlPrcTrm.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboDtlPrcTrm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_prctrm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_prctrm") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub cboTranTrm_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboTranTrm.KeyUp
        auto_search_combo(cboTranTrm, e.KeyCode)
    End Sub

    Private Sub cboTranTrm_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboTranTrm.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            cboTranTrm.Text = UCase(Trim(cboTranTrm.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And cboTranTrm.Text <> "" Then
            txtFCurCde.Visible = True
            txtFCurCde.Enabled = False
            txtFtyPrc.Visible = True
            txtFtyPrc.Enabled = True
            txtFtyPrc.Focus()
        End If
    End Sub

    Private Sub cboTranTrm_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboTranTrm.Validating
        If cboTranTrm.Text.Trim = "" Then
            MsgBox("Tran Term - Data is Invalid, please enter a valid Transport Term.")
            e.Cancel = True
        End If
    End Sub

    Private Sub cboTranTrm_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboTranTrm.SelectedIndexChanged
        If cboTranTrm.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboTranTrm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_trantrm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_trantrm") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub


    Private Sub txtFtyPrc_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtFtyPrc.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtFtyPrc.Text = UCase(Trim(txtFtyPrc.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtFtyPrc.Text <> "" Then
            ''txtFtyCst.Text = UCase(Trim(txtFtyPrc.Text))

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_fcurcde") = txtFCurCde.Text
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftycst") = Val(txtFtyCst.Text)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyprc") = Val(txtFtyPrc.Text)

            Dim cus1no As String
            Dim cus2no As String
            Dim venno As String

            If Trim(cboCus1No.Text) = "" Then
                cus1no = ""
            Else
                cus1no = Trim(Split(cboCus1No.Text, "-")(0))
            End If

            If Trim(cboCus2No.Text) = "" Then
                cus2no = ""
            Else
                cus2no = Trim(Split(cboCus2No.Text, "-")(0))
            End If

            If Trim(cboItmNoVen.text) = "" Then
                venno = ""
            Else
                If Replace(cboItmNoVen.Text, "-", "") = cboItmNoVen.Text Then
                    venno = Trim(Split(cboItmNoVen.Text, "-")(0))
                    MsgBox("Please select vendor from drop down list!")
                    Exit Sub
                Else
                    venno = Trim(Split(cboItmNoVen.Text, "-")(1))
                End If

            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCALFML_QUM00001 '" & cus1no & "','" & cus2no & "','" & venno & "','" & txtFCurCde.Text.Trim & "','" & Val(txtFtyPrc.Text) & "'"

            rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading CalItmNoVenBasPrc sp_select_IMCALFML_QUM00001 :" & rtnStr)
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Cannot find a formula for calculate the basic price.")
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
                txtFtyPrc.Text = Format(Val(txtFtyPrc.Text), "########0.0000")
                txtFtyCst.Text = Format(Val(txtFtyCst.Text), "########0.0000")

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") = 0 Then
                    txtQutItmSts.Text = "I - Inactive"
                End If

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
                    If txtCurCde2.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString & "'")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), "########0.0000")
                End If
            End If

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no") = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no") = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat") = "1900-01-01"
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat") = "1900-01-01"

            Call updateMOQMOA()

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno") = venno
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dv") = venno
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven") = venno
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tv") = venno
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyaud") = venno

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstA") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstB") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstC") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstD") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstTran") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstPack") = 0

            If get_QUPRCEMT_CU(txtSeq.Text, Split(cboCus1No.Text, "-")(0).Trim, Split(cboCus2No.Text, "-")(0).Trim, "E", txtItmCat.Text.Trim, Split(cboItmNoVen.Text.Trim, "-")(1).Trim, cboDtlPrcTrm.Text, cboTranTrm.Text) = True Then
                Call calculate_gbPandelCstEmt(txtSeq.Text)

                Call display_Detail(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq"))
                Call reset_detail_control("Detail_Update", "ItemNotInIM")

                flag_no_update_mu(sReadingIndexQ) = False
                Call check_mu(sReadingIndexQ)

            Else
                '20131212   
                'Call reset_QUOTNDTL()
                'Call reset_detail_control("Detail_Init", "All")
                'Call reset_detail_data("Detail_Init", "All")


                Exit Sub
            End If
        End If
    End Sub

    Private Sub txtFtyPrc_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtFtyPrc.Validating
        If txtFtyPrc.Text.Trim = "" Or Not IsNumeric(txtFtyPrc.Text) Then
            MsgBox("Fty Price - Data is Invalid, please enter a valid Factory Price.")
            e.Cancel = True
            txtFtyPrc.SelectAll()
        End If
    End Sub







    Private Sub cmdCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdCopy.Click
        If (Trim(Split(txtQutSts.Text, "-")(0)) = "W") Then
            MsgBox("Quotation in Wait for Approve status is not available for copy", vbInformation, "Information")
            Exit Sub
        End If

        If Recordstatus = True Then
            MsgBox("Quotation in edit mode. Not available for copy", vbInformation, "Information")
            Exit Sub
        End If

        pub_copy_cbocono2 = cboCoCde.Text

        copyQut = New frmCopyQut
        copyQut.ma = Me

        qut = New frmQut
        qut.ma = Me

        copyQut.ShowDialog()

        sMode = cModeCopy
        Call formInit(cModeUpd)
        ''20130729

        Call cmdClearClick()

        sMode = cModeInit
        Call formInit(cModeInit)

        txtQutNo.Text = pub_copy_qutno
        cboCoCde.Text = pub_copy_cbocono
        If pub_copy_cbocono = "" Then
            cboCoCde.Text = pub_copy_cbocono2
        End If



    End Sub

















    'Text change to initiate recordstatus = true and creuser to ~*UPD*~

    Private Sub txtDept_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtDept.TextChanged
        If txtDept.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtDept.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_dept")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_dept") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_dept") = tmpstr
                    End If
                End If

            End If
        End If
    End Sub

    Private Sub txtItmDsc_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmDsc.GotFocus
        txtItmDsc.Width = 409
        txtItmDsc.Height = 194
        txtItmDsc.BringToFront()

        txtItmDsc.Location = New Point(52, 3)
        'Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtItmDsc_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtItmDsc.TextChanged
        If txtItmDsc.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtItmDsc.Text
                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmdsc")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmdsc") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmdsc") = tmpstr
                    End If

                End If

            End If
        End If
    End Sub

    Private Sub cboCusals_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCusals.TextChanged
        If cboCusals.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboCusals.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusstyno") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusstyno") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtCusItm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCusItm.TextChanged
        If txtCusItm.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCusItm.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusitm") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusitm") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtColDsc_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtColDsc.TextChanged
        If txtColDsc.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtColDsc.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_coldsc") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_coldsc") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtGrswgt_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtGrswgt.TextChanged
        If txtGrswgt.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtGrswgt.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_grswgt") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_grswgt") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtNetwgt_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtNetwgt.TextChanged
        If txtNetwgt.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtNetwgt.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_netwgt") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_netwgt") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrdin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrdin.TextChanged
        If IsNumeric(txtInrdin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrdin.Text
                ''bug
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrdin") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrdin") = tmpstr
                        Call cal_cbm_cft("i_in", txtInrdin.Text, txtInrwin.Text, txtInrhin.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrwin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrwin.TextChanged
        If IsNumeric(txtInrwin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrwin.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrwin") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrwin") = tmpstr

                        Call cal_cbm_cft("i_in", txtInrdin.Text, txtInrwin.Text, txtInrhin.Text)
                    

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrhin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrhin.TextChanged
        If IsNumeric(txtInrhin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrhin.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhin")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhin") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhin") = tmpstr
                        Call cal_cbm_cft("i_in", txtInrdin.Text, txtInrwin.Text, txtInrhin.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrdcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrdcm.TextChanged
        If IsNumeric(txtInrdcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrdcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrdcm")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrdcm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrdcm") = tmpstr
                        Call cal_cbm_cft("i_cm", txtInrdcm.Text, txtInrwcm.Text, txtInrhcm.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrwcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrwcm.TextChanged
        If IsNumeric(txtInrwcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrwcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrwcm")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrwcm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrwcm") = tmpstr
                        Call cal_cbm_cft("i_cm", txtInrdcm.Text, txtInrwcm.Text, txtInrhcm.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtInrhcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInrhcm.TextChanged
        If IsNumeric(txtInrhcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtInrhcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhcm")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhcm") Then

                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_inrhcm") = tmpstr
                        Call cal_cbm_cft("i_cm", txtInrdcm.Text, txtInrwcm.Text, txtInrhcm.Text)


                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrdin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrdin.TextChanged
        If IsNumeric(txtMtrdin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrdin.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrdin")) Then
                        If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrdin") Then
                            Recordstatus = True
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                            End If
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrdin") = tmpstr
                            Call cal_cbm_cft("m_in", txtMtrdin.Text, txtMtrwin.Text, txtMtrhin.Text)

                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrwin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrwin.TextChanged
        If IsNumeric(txtMtrwin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrwin.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrwin")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrwin") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrwin") = tmpstr
                        Call cal_cbm_cft("m_in", txtMtrdin.Text, txtMtrwin.Text, txtMtrhin.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrhin_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrhin.TextChanged
        If IsNumeric(txtMtrhin.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrhin.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrhin") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrhin") = tmpstr
                        Call cal_cbm_cft("m_in", txtMtrdin.Text, txtMtrwin.Text, txtMtrhin.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrdcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrdcm.TextChanged
        If IsNumeric(txtMtrdcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrdcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrdcm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrdcm") = tmpstr
                        Call cal_cbm_cft("m_cm", txtMtrdcm.Text, txtMtrwcm.Text, txtMtrhcm.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrwcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrwcm.TextChanged
        If IsNumeric(txtMtrwcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrwcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrwcm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrwcm") = tmpstr
                        Call cal_cbm_cft("m_cm", txtMtrdcm.Text, txtMtrwcm.Text, txtMtrhcm.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtMtrhcm_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMtrhcm.TextChanged
        If IsNumeric(txtMtrhcm.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMtrhcm.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrhcm") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_mtrhcm") = tmpstr
                        Call cal_cbm_cft("m_cm", txtMtrdcm.Text, txtMtrwcm.Text, txtMtrhcm.Text)

                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtPckItr_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPckItr.TextChanged
        If txtPckItr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtPckItr.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pckitr") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pckitr") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtIMRmk_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtIMRmk.TextChanged
        If txtIMRmk.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtIMRmk.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_imrmk")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_imrmk") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_imrmk") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtNote_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)	Handles txtNote.TextChanged
        If txtNote.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtNote.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_note") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_note") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtColCde_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtColCde.GotFocus
        '''20140325
        flag_txtColCde_GotFocus = True

    End Sub

    Private Sub txtColCde_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtColCde.LostFocus
        '''III
        reset_detail_control("Detail_Update", "ItemNotInIM")

    End Sub

    Private Sub txtColCde_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtColCde.TextChanged
        If txtColCde.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtColCde.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_colcde")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_colcde") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_colcde") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtCosMth_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCosMth.TextChanged
        If txtCosMth.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCosMth.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cosmth") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cosmth") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtTOOrdQty_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtTOOrdQty.TextChanged
        If txtTOOrdQty.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtTOOrdQty.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_toqty") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_toqty") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtTORemark_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtTORemark.TextChanged
        If txtTORemark.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtTORemark.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_tormk") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_tormk") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub cboTOFty_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboTOFty.SelectedIndexChanged
        If cboTOFty.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboTOFty.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_buyer") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_buyer") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtCusUsd_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCusUsd.TextChanged
        If txtCusUsd.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCusUsd.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cususd") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cususd") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub cboCusUsdCurr_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCusUsdCurr.SelectedIndexChanged
        If cboCusUsdCurr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboCusUsdCurr.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cususdcur") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cususdcur") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub cboCusCadCurr_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCusCadCurr.SelectedIndexChanged
        If cboCusCadCurr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    tmpstr = cboCusCadCurr.Text
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cuscadcur") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cuscadcur") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtCusCad_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCusCad.TextChanged
        If txtCusCad.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtCusCad.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cuscad") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cuscad") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtDTLFtyShpDateStr_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateStr.GotFocus
        flag_txtHDRFtyShpDateStr_GotFocus = True
    End Sub

    Private Sub txtDTLFtyShpDateStr_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateStr.LostFocus

    End Sub

    Private Sub txtDTLFtyShpDateStr_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateStr.TextChanged
        '''2014
        If btcQUM00001.SelectedIndex <> 1 Then
            Exit Sub
        End If

        If flag_txtDTLFtyShpDateStr_GotFocus = True Then
            flag_txtDTLFtyShpDateStr_GotFocus = False
            If Trim(txtDTLFtyShpDateStr.Text) = "/  /" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr") = "01/01/1900"
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                End If
            End If
        End If


        If txtDTLFtyShpDateStr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String

                tmpstr = txtDTLFtyShpDateStr.Text.Trim
                '''special handle 20140122
                If tmpstr = "11/19/00" Then
                    tmpstr = "01/01/1900"
                End If
                If tmpstr = "11/19/2000" Then
                    tmpstr = "01/01/1900"
                End If
                If IsDate(tmpstr) Then
                    If DateDiff("d", tmpstr, "11/19/2000") = 0 Then
                        tmpstr = "01/01/1900"
                    End If
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr") Then
                                Recordstatus = True
                                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr") = tmpstr
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtDTLFtyShpDateEnd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateEnd.GotFocus
        flag_txtDTlFtyShpDateEnd_GotFocus = True

    End Sub

    Private Sub txtDTLFtyShpDateEnd_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateEnd.LostFocus
        'Cu shipstartdate
        '1
        If IsDate(txtDTLFtyShpDateStr.Text.Trim) And IsDate(txtDTLFtyShpDateEnd.Text.Trim) Then

            txtDTLCustShpDateStr.Text = txtDTLFtyShpDateStr.Text

            If txtDTLCustShpDateStr.Text <> "" Then
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    Dim tmpstr As String
                    tmpstr = txtDTLCustShpDateStr.Text
                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr")) Then
                            If IsDate(tmpstr) Then
                                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpstr") Then
                                    Recordstatus = True
                                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                    End If
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr") = tmpstr
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            'Cu shipenddate
            '2
            txtDTLCustShpDateEnd.Text = txtDTLFtyShpDateEnd.Text

            If txtDTLCustShpDateEnd.Text <> "" Then
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    Dim tmpstr As String
                    tmpstr = txtDTLCustShpDateEnd.Text
                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend")) Then
                            If IsDate(tmpstr) Then
                                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend") Then
                                    Recordstatus = True
                                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                    End If
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend") = tmpstr
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        End If

    End Sub

    Private Sub txtDTLFtyShpDateEnd_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtDTLFtyShpDateEnd.TextChanged
        '''2014
        If btcQUM00001.SelectedIndex <> 1 Then
            Exit Sub
        End If

        Dim tmpstr As String
        If txtDTLFtyShpDateEnd.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                tmpstr = txtDTLFtyShpDateEnd.Text.Trim
                '''special handle 20140122
                If tmpstr = "11/19/00" Then
                    tmpstr = "01/01/1900"
                End If
                If tmpstr = "11/19/2000" Then
                    tmpstr = "01/01/1900"
                End If
                If IsDate(tmpstr) Then
                    If DateDiff("d", tmpstr, "11/19/2000") =0 Then
                        tmpstr = "01/01/1900"
                    End If
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend")) Then
                        If   isdate(tmpstr) Then
                            If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend") Then
                                Recordstatus = True
                                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend") = tmpstr
                            End If
                        End If
                    End If
                End If
            End If
        End If

    End Sub

    Private Sub txtDTLCustShpDateStr_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLCustShpDateStr.GotFocus
        flag_txtDTLCustShpDateStr_GotFocus = True

    End Sub

    Private Sub txtDTLCustShpDateStr_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtDTLCustShpDateStr.TextChanged

        '''2014
        If btcQUM00001.SelectedIndex <> 1 Then
            Exit Sub
        End If


        If flag_txtDTLCustShpDateStr_GotFocus = True Then
            flag_txtDTLCustShpDateStr_GotFocus = False
            If Trim(txtDTLCustShpDateStr.Text) = "/  /" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr") = "01/01/1900"
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                End If
            End If
        End If



        'If txtDTLCustShpDateStr.Text.Trim = "" And _
        '1 = 1 Then
        '    2=2

        '    Recordstatus = True
        '    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
        '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
        '    End If

        'End If


        If txtDTLCustShpDateStr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtDTLCustShpDateStr.Text.Trim
                '''special handle 20140122
                If tmpstr = "11/19/00" Then
                    tmpstr = "01/01/1900"
                End If
                If tmpstr = "11/19/2000" Then
                    tmpstr = "01/01/1900"
                End If
                If IsDate(tmpstr) Then
                    If DateDiff("d", tmpstr, "11/19/2000") = 0 Then
                        tmpstr = "01/01/1900"
                    End If
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr") Then
                                Recordstatus = True
                                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpstr") = tmpstr
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtDTLCustShpDateEnd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDTLCustShpDateEnd.GotFocus
        flag_txtDTLCustShpDateEnd_GotFocus = True

    End Sub

    Private Sub txtDTLCustShpDateEnd_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtDTLCustShpDateEnd.TextChanged
        '''2014
        If btcQUM00001.SelectedIndex <> 1 Then
            Exit Sub
        End If

        If flag_txtDTLCustShpDateEnd_GotFocus = True Then
            flag_txtDTLCustShpDateEnd_GotFocus = False
            If Trim(txtDTLCustShpDateEnd.Text) = "/  /" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend") = "01/01/1900"
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                End If
            End If
        End If

        If flag_txtDTlFtyShpDateEnd_GotFocus = True Then
            flag_txtDTlFtyShpDateEnd_GotFocus = False
            If Trim(txtDTLFtyShpDateEnd.Text) = "/  /" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyshpend") = "01/01/1900"
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                End If
            End If
        End If


        If txtDTLCustShpDateEnd.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtDTLCustShpDateEnd.Text.Trim
                '''special handle 20140122
                If tmpstr = "11/19/00" Then
                    tmpstr = "01/01/1900"
                End If
                If tmpstr = "11/19/2000" Then
                    tmpstr = "01/01/1900"
                End If
                If IsDate(tmpstr) Then
                    If DateDiff("d", tmpstr, "11/19/2000") = 0 Then
                        tmpstr = "01/01/1900"
                    End If
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend") Then
                                Recordstatus = True
                                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cushpend") = tmpstr
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End Sub








    'NOT TESTED / IMPLEMENTED FUNCTION

    Private Sub QUM00001_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        Dim YesNoCancel As Integer

        Call check_update_Detail()

        If Recordstatus = True Then
            If Add_flag = True Or Insert_flag = True Then
                YesNoCancel = MsgBox("Record is newly created   Do you want to save before exit?", Microsoft.VisualBasic.vbYesNoCancel)
            Else
                YesNoCancel = MsgBox("Record has been modified  Do you want to save before exit?", Microsoft.VisualBasic.vbYesNoCancel)
            End If

            If YesNoCancel = vbYes Then
                '*** To check the input item no which is empty
                If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
                    MsgBox("Please input Item No.")

                    If txtItmNoReal.Text <> "" Then
                        If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                            txtItmNoReal.Focus()
                        End If
                    ElseIf txtItmNoTmp.Text <> "" Then
                        If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                            txtItmNoTmp.Focus()
                        End If
                    Else
                        If txtItmNoVen.Enabled And txtItmNoVen.Visible Then
                            txtItmNoVen.Focus()
                        End If
                    End If




                    Exit Sub
                End If

                If rs_IMBASINF.Tables.Count = 0 And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True Or txtItmNoVen.Enabled = True) Then
                    btcQUM00001.SelectedIndex = 1
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                    " - Item not found" + Chr(13) + Chr(10) + _
                    " - It is a BOM Item" + Chr(13) + Chr(10) + _
                    " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                    " - It is held by the system" + Chr(13) + Chr(10) + _
                    " - Vendor is not available", vbExclamation, "Warning fu")
                    ' add for debug
                    '*** Phase 2
                    'If rbItmNoReal.Checked = True Then
                    '    txtItmNoReal.Enabled = True
                    '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                    '        txtItmNoReal.Focus()
                    '    End If
                    'ElseIf rbItmNoTmp.Checked = True Then
                    '    txtItmNoTmp.Enabled = True
                    '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                    '        txtItmNoTmp.Focus()
                    '    End If
                    'Else
                    '    txtItmNoVen.Enabled = True
                    '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then
                    '        txtItmNoVen.Focus()
                    '    End If
                    'End If
                    e.Cancel = True
                    Exit Sub
                End If

                If cmdSave.Enabled And invalid_Detail() = False Then
                    Call fill_QUOTNDTL()
                    Call cmdSaveClick()

                    If save_ok = True Then
                        Me.Close()
                    Else
                        e.Cancel = True
                        Exit Sub
                    End If
                Else
                    If Enq_right_local = False Then
                        MsgBox("You have no right to Save this document.")
                        Call setStatus(cModeClear)
                        sMode = cModeClear
                    End If
                End If
            ElseIf YesNoCancel = vbNo Then
                Call ResetDefaultDisp()
                Exit Sub
            ElseIf YesNoCancel = vbCancel Then
                e.Cancel = True
                Exit Sub
            End If
        Else
            Exit Sub
        End If
    End Sub

    Private Sub QUM00001_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyUp
        If bIsShowPanels = False Then
            If e.KeyCode = Keys.PageUp And btcQUM00001.SelectedIndex = 1 And cmdBackD.Enabled = True Then
                Call cmdBackD_Click(sender, e)
            ElseIf e.KeyCode = Keys.PageDown And btcQUM00001.SelectedIndex = 1 And cmdNextD.Enabled = True Then
                Call cmdNextD_Click(sender, e)
            End If

            If (e.Alt) Then
                If e.KeyCode = Keys.D1 Then
                    If btcQUM00001.TabPages(0).Enabled = True Then
                        btcQUM00001.SelectedIndex = 0
                    End If
                ElseIf e.KeyCode = Keys.D2 Then
                    If btcQUM00001.TabPages(1).Enabled = True Then
                        btcQUM00001.SelectedIndex = 1
                        ''??
                        'cboDtlPrcTrm.Visible = False
                        'cboFtyPrcTrm.Visible = False
                        'cboDtlPrcTrm.SendToBack()
                        'cboFtyPrcTrm.SendToBack()

                    End If
                ElseIf e.KeyCode = Keys.D3 Then
                    If btcQUM00001.TabPages(2).Enabled = True Then
                        btcQUM00001.SelectedIndex = 2
                    End If
                    'ElseIf e.KeyCode = Keys.D4 Then
                    '    If btcQUM00001.TabPages(3).Enabled = True Then
                    '        btcQUM00001.SelectedIndex = 3
                    '    End If
                    'ElseIf e.KeyCode = Keys.D5 Then
                    '    If btcQUM00001.TabPages(4).Enabled = True Then
                    '        btcQUM00001.SelectedIndex = 4
                    '    End If
                End If
            End If
        End If
    End Sub



    Private Sub cmdDelRow_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdDelRow.Click

        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If



        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
            MsgBox("This Quotation just has one detail line record only, cannot delete.")
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            If chkDelete.Checked = False Then
                chkDelete.Checked = True
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "Y"
            Else
                chkDelete.Checked = False
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "N"
            End If
        End If
        Recordstatus = True
        Call DeleteClickCheck()
    End Sub




    Private Sub cmdGenSmp_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdGenSmp.Click
        samGen = New SAM00004
        samGen.ShowDialog()
    End Sub



    Private Sub cmdUpdate_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdUpdate.Click


        If Recordstatus = True Then
            MsgBox("Please save the quotation, before updating the items!")
            Exit Sub
        End If

        If btcQUM00001.SelectedIndex = 0 Then


            'MsgBox("please update item(s) in detail tab/page!")
            btcQUM00001.SelectTab(1)

            btcQUM00001.TabPages(0).Enabled = False
            btcQUM00001.TabPages(1).Enabled = True

            btcQUM00001.Refresh()



            '    Exit Sub
        End If

        If btcQUM00001.SelectedIndex = 1 Then
            If not_in_Combo_DTL() = True Then
                Exit Sub
            End If
        End If



        Dim rs As New DataSet

        '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_list_QUOTNDTL_upditm '" & cboCoCde.Text & "','" & txtQutNo.Text & "','DTL'"
        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
        gspStr = ""

        '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdUpdate_Click sp_list_QUOTNDTL_upditm :" & rtnStr)
            Exit Sub
        End If

        If rs.Tables("RESULT").Rows.Count = 0 Then
            MsgBox("No Record Found!")
            Exit Sub
        End If

        '        btcQUM00001.SelectedIndex = 4
        btcQUM00001.SelectedIndex = 0
        flgUpdItm = True

        updItm = New frmQutUpdItm
        updItm.ma = Me

        Dim tmp_count_comma As Integer
        For index2 As Integer = 1 To Len(item_update_list)
            If Mid(item_update_list, index2, 1) = "," Then
                tmp_count_comma = tmp_count_comma + 1
            End If
        Next

        Dim temp_filter
        If Len(item_update_list) = 0 Then
            temp_filter = "9999"
        Else
            temp_filter = Microsoft.VisualBasic.Left(item_update_list, Len(item_update_list) - 1)
        End If

        sFilter = "qud_qutseq not in  (" & temp_filter & ")"
        rs.Tables("RESULT").DefaultView.RowFilter = sFilter

        If rs.Tables("RESULT").DefaultView.Count = 0 Then
            MsgBox("No items to update!")
            updItm.Hide()

            Exit Sub
        End If


        updItm.ShowDialog()
        'frmQutUpdItm.Show(vbModal)
        If gb_frmQutUpdItm_hide = True Then
            updItm.Hide()
        End If
        gb_frmQutUpdItm_hide = False

        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                sReadingIndexQ = 0
                no_Display_Detail = False
                'Call display_Detail()
                no_Display_Detail = True

                '*** Phase 2 comment it
                'Call cboCustItmCatPress()

                If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd").ToString) > 0 Then
                    txtCusUsd.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd"), "###,###,##0.0000")
                Else
                    txtCusUsd.Text = ""
                End If
                If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad").ToString) > 0 Then
                    txtCusCad.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad"), "###,###,##0.0000")
                Else
                    txtCusCad.Text = ""
                End If

                '*** Phase 2 comment it
                'Call CalculatePMU(txtCusUsd)
            End If
        End If


        Call linked_tentative()

        flgUpdItm = False

        gbPanelCstEmt.SendToBack()
        gbPanelCstEmt.Hide()



        btcQUM00001.SelectTab(1)

        btcQUM00001.TabPages(0).Enabled = True
        btcQUM00001.TabPages(1).Enabled = True
        btcQUM00001.Refresh()

    End Sub


    Private Sub cboCus2Cp_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCus2Cp.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCus2Cp.Items.Count
        If cboCus2Cp.Text <> "" And cboCus2Cp.Enabled = True And cboCus2Cp.Items.Count > 0 Then
            For Y = 0 To i - 1
                If Trim(cboCus2Cp.Text) = Trim(Replace(cboCus2Cp.Items(Y), vbCrLf, "")) Then
                'If Trim(cboCus2Cp.Text) = Trim(cboCus2Cp.Items(Y).ToString) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Secondary Customer - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboCus2Cp_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus2Cp.SelectedIndexChanged
        If cboCus2Cp.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboCus2Cp.Text
                ''bug
                If rs_QUOTNHDR.Tables("RESULT").Rows.Count > 0 Then
                    If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cp") Then
                        Recordstatus = True
                        '''0811_2
                        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cus2cp") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub txtRmk_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRmk.TextChanged
        cboCus2No.Enabled = False

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If txtRmk.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtRmk.Text

                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rmk") Then
                    Recordstatus = True

                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_rmk") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtDeptH_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDeptH.TextChanged
        cboCus2No.Enabled = False

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If txtDeptH.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtDeptH.Text
                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_dept") Then
                    Recordstatus = True
                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_dept") = tmpstr
                End If
            End If
        End If
    End Sub



    Private Sub cboYear_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboYear.KeyUp
        If cboYear.Text.Length > 0 Then
            Call auto_search_combo(cboYear, e.KeyCode)
        End If
    End Sub

    Private Sub cboYear_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboYear.SelectedIndexChanged
        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If cboYear.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboYear.Text
                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_year") Then
                    Recordstatus = True

                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If


                    '''20140313 for updating CIH of quotndtl
                    ''' 
                    If Not rs_QUOTNDTL.Tables("result") Is Nothing Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For index2 As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                If rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*UPD*~"
                                End If
                            Next
                        End If
                    End If


                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_year") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub cboYear_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboYear.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean = False

        i = cboYear.Items.Count
        If cboYear.Text <> "" And cboYear.Enabled = True And cboYear.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboYear.Text = cboYear.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Quotation Title: Year - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboSeason_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboSeason.KeyUp
        If cboSeason.Text.Length > 0 Then
            Call auto_search_combo(cboSeason, e.KeyCode)
        End If
    End Sub

    Private Sub cboSeason_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSeason.SelectedIndexChanged
        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If cboSeason.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboSeason.Text
                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_season") Then
                    Recordstatus = True

                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
		 
                    '''20140313 for updating CIH of quotndtl
                    ''' 
                    If Not rs_QUOTNDTL.Tables("result") Is Nothing Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For index2 As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                If rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(index2).Item("qud_creusr") = "~*UPD*~"
                                End If
                            Next
                        End If
                    End If

                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_season") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub cboSeason_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboSeason.Validating


        Dim tmpstr As String
        tmpstr = cboSeason.Text
        If tmpstr = "" Then
            Exit Sub
        End If

        If cboSeason.Items.IndexOf(tmpstr) = -1 Then
            MsgBox("Quotation Title : Season - Data is Invalid, please select in Drop Down List.")
            e.Cancel = True
        End If





        'Dim i As Integer
        'Dim Y As Integer
        'Dim inCombo As Boolean

        'i = cboSeason.Items.Count
        'If cboSeason.Text <> "" And cboSeason.Enabled = True And cboSeason.Items.Count > 0 Then
        '    For Y = 0 To i - 1
        '        If cboSeason.Text = cboSeason.Items(Y).ToString Then
        '            inCombo = True
        '        End If
        '    Next

        '    If inCombo = False Then
        '        MsgBox("Quotation Title : Season - Data is Invalid, please select in Drop Down List.")
        '        e.Cancel = True
        '    End If
        'End If


    End Sub

    Private Sub txtDesc_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDesc.TextChanged
        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If
        If txtDesc.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtDesc.Text
                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_desc") Then
                    Recordstatus = True

                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_desc") = tmpstr
                End If
            End If
        End If
    End Sub

    Private Sub txtDesc_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDesc.Validating
        'If txtDesc.Text.Trim = "" Then
        '    MsgBox("Quotation Title : Project cannot be empty.")
        '    e.Cancel = True
        'End If
    End Sub

    Private Sub cboSmpPrd_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSmpPrd.Click
        Recordstatus = True
    End Sub

    Private Sub cboSmpPrd_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSmpPrd.SelectedIndexChanged
        Recordstatus = True
    End Sub

    Private Sub cboSmpFgt_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSmpFgt.Click
        Recordstatus = True
    End Sub

    Private Sub cboSmpFgt_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSmpFgt.SelectedIndexChanged
        Recordstatus = True
    End Sub

    Private Sub txtDept_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDept.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub chkApprove_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkApprove.CheckedChanged

    End Sub

    Private Sub chkApproveDtl_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkApproveDtl.CheckedChanged
    


    End Sub

    Private Sub chkDelete_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkDelete.Click

        If not_to_delete_All() = True Then
            MsgBox("Cannot delete all details line records.")
            Exit Sub
        End If


        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "Y"
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "N"
        End If
        Recordstatus = True

        Call DeleteClickCheck()
    End Sub



    Private Sub cmdBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdBrowse.Click
        gsSearchKey = ""
        If txtItmNo.Text <> "" Then
            Dim frm_SYM00021 As New SYM00021(txtItmNo.Text)

            frm_SYM00021.MdiParent = Me.MdiParent

            If SYM00021_Value = 1 Then
                frm_SYM00021.Show()
                AddHandler frm_SYM00021.returnSelectedRecords, AddressOf returnSelectedRecordsHandler_Browse
            End If
        End If
    End Sub

    Private Sub txtItmDsc_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmDsc.LostFocus

        txtItmDsc.Width = 198
        txtItmDsc.Height = 44
        'txtItmDsc.BringToFront()
        txtItmDsc.Location = New Point(262, 13)

        Call checkLatestQut()    '*** Check Latest Quotation
    End Sub

    Private Sub cboCusals_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCusals.Click
        'If Trim(txtItmNo.Text) <> "" Then
        '    Call GetCusSty(Trim(txtItmNo.Text))
        'End If
    End Sub

    Private Sub cboCusals_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCusals.Validating
        'Dim i As Integer
        'Dim Y As Integer
        'Dim inCombo As Boolean = False

        'i = cboCusals.Items.Count
        'If cboCusals.Text <> "" And cboCusals.Enabled = True And cboCusals.Items.Count > 0 Then
        '    For Y = 0 To i - 1
        '        If cboCusals.Text = cboCusals.Items(Y).ToString Then
        '            inCombo = True
        '        End If
        '    Next

        '    If inCombo = False Then
        '        MsgBox("Cust. Style No. - Data is Invalid, please select in Drop Down List.")
        '        e.Cancel = True
        '    End If
        'End If
    End Sub

    Private Sub cboCusals_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboCusals.KeyUp
        'modify
        'If Trim(txtItmNo.Text) <> "" Then
        '    Call GetCusSty(Trim(txtItmNo.Text))
        'End If

        If cboCusals.Text.Length > 0 Then
            Call auto_search_combo(cboCusals, e.KeyCode)
        End If
    End Sub

    Private Sub txtCusItm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusItm.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub cboColCde_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboColCde.GotFocus
        cboColCde_got_focus = True

    End Sub

    Private Sub cboColCde_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboColCde.KeyDown
        flag_cboColCde_keypress = True

    End Sub

    Private Sub cboColCde_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboColCde.KeyPress
        flag_cboColCde_keypress = True

    End Sub

    Private Sub cboColCde_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboColCde.LostFocus
        cboColCde_got_focus = False

    End Sub

    Private Sub cboColCde_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboColCde.SelectedIndexChanged

        If flag_txtColCde_GotFocus = True Then
            flag_txtColCde_GotFocus = False
            Call cboColCdeClick()
        End If

        If cboColCde.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboColCde.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1 >= sReadingIndexQ Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_colcde") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_colcde") = tmpstr
                    End If
                End If
            End If
        End If
        '''20130909  ColorCode
        '''20140129
        '''20140207
        If cboColCde_got_focus = True Then
            Call cboPckingClick()
        End If


    End Sub

    Public Sub cboColCdeClick()
        Dim i As Integer

        '*** Phase 2 comment it
        'Call SetHeaderBarValue(True)

        If cboColCde.Text <> "" Then
            If chkPC_hdr.Checked = True And flgLoadApplyAllPC = False Then
                txtColDsc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc")
                txtUPC.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc")
            Else
                i = cboColCde.SelectedIndex
                If i >= 0 Then
                    txtColDsc.Text = rs_IMCOLINF.Tables("RESULT").Rows(i)("icf_coldsc")
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc") = rs_IMCOLINF.Tables("RESULT").Rows(i)("icf_coldsc")
                    txtUPC.Text = rs_IMCOLINF.Tables("RESULT").Rows(i)("icf_ucpcde")
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc") = rs_IMCOLINF.Tables("RESULT").Rows(i)("icf_ucpcde")

                End If
            End If
        Else
            txtColDsc.Text = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc") = ""
            txtUPC.Text = ""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc") = ""
        End If

        '*** Phase 2
        If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And _
            cboColCde.Text <> "" And _
            IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then

            '''20140121
            ''' default active but check, "W/TBC/E'        
            txtQutItmSts.Text = "A - Active"

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                If Not IsDBNull(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc"))) Then

                    If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "W" _
        And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = "N" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "W - Wait for Approval"
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If

                    If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "E" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "E - Expiry"
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If

                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "TBC" Then
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If

                End If
            End If


            'If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0" And _
            '    cboColCde.Text <> "" And _
            '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then
            'txtQutItmSts.Text = "COMPLETE"
        Else
            '*** Phase 2
            'txtQutItmSts.Text = "INCOMPLETE"
            txtQutItmSts.Text = "I - Inactive"
        End If

        Dim cus2no As String

        If cboCus2No.Text = "" Then
            cus2no = ""
        Else
            cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
        End If

        '*** Retreive from Customer Item History Summary
        If cboPcking.Text <> "" Then

            '*** Retrieve MOQ/MOA where Color Code change
            Call updateMOQMOA()

            '************************************* Ignore Company relation ****************************
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString = "NEW" Then
                '' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_CUITMSUM_Q '" & cboCoCde.Text & "','" & _
                                            Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & _
                                            cus2no & "','" & txtItmNo.Text & "','" & cboColCde.Text & "','" & cboUM.Text & "','" & _
                                            txtInrQty.Text & "','" & txtMtrQty.Text & "','" & IIf(txtUMFtr.Text = "", 1, txtUMFtr.Text) & "','" & _
                                            gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_CUITMSUM, rtnStr)
                gspStr = ""

                '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading cboColCdeClick sp_select_CUITMSUM_Q :" & rtnStr)
                    Exit Sub
                End If

                If rs_CUITMSUM.Tables("RESULT").Rows.Count > 0 Then       '***  Not Found Record
                    txtItmDsc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_itmdsc")
                    txtCusCol.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscol")
                    txtCusItm.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cusitm")
                    txtColDsc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_coldsc")
                    'txtHstRef.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_refdoc")
                    txtCusUsd.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd"))
                    txtCusCad.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad"))
                    '************************* Get Price from CIH ***************************
                    txtCIHprc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_selprc")
                    txtCIHcur.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_curcde")

                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_contopc").ToString = "Y" Then
                        chkPC.Checked = True
                    End If

                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_contopc").ToString = "Y" Then
                        Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                    End If

                    If chkPC_hdr.Checked = True And isABUAssortment(txtItmNo.Text) = True Then
                        chkPC.Checked = True
                        Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                    End If

                    txtDept.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_dept")
                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_hrmcde").ToString <> "" Then
                        cboHrmCde.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_hrmcde")
                        rs_SYHRMCDE.Tables("RESULT").Select("yhc_hrmcde = " & "'" & cboHrmCde.Text & "'")

                        If rs_SYHRMCDE.Tables("RESULT").Rows.Count > 0 Then
                            cboHrmCde.Text = rs_SYHRMCDE.Tables("RESULT").Rows(0)("yhc_hrmcde").ToString + " - " + _
                                                rs_SYHRMCDE.Tables("RESULT").Rows(0)("yhc_hrmdsc").ToString + _
                                             IIf(rs_SYHRMCDE.Tables("RESULT").Rows(0)("yhc_tarzon").ToString = "U", " (HSTU # for USA)", " (Tariff # for Europe)")
                            txtDtyRat.Text = rs_SYHRMCDE.Tables("RESULT").Rows(0)("yhc_dtyrat")
                        End If
                        txtDtyRat.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_dtyrat")
                    End If
                Else
                    txtCIHprc.Text = ""
                    txtCIHcur.Text = ""

                    If QuotCopyFlag = True Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc").ToString = "Y" Then
                            chkPC.Checked = True
                            Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                        End If
                    End If
                End If
            Else
                '****************************** Modify ITEM detail **********************
            End If
        End If
    End Sub


    Private Sub cboColCde_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboColCde.Validating
        If cboColCde.Enabled = False Then
            Dim i As Integer
            Dim Y As Integer
            Dim inCombo As Boolean

            If txtItmNo.Text <> "" Then
                '*** Phase 2
                If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And _
                    cboColCde.Text <> "" And _
                    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then
                    'If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0" And _
                    '    cboColCde.Text <> "" And _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then
                    'txtQutItmSts.Text = "COMPLETE"
                    txtQutItmSts.Text = "A - Active"
                Else
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                i = cboColCde.Items.Count
                If cboColCde.Text <> "" And cboColCde.Enabled = True And cboColCde.Items.Count > 0 Then
                    For Y = 0 To i - 1
                        If cboColCde.Text = cboColCde.Items(Y).ToString Then
                            inCombo = True
                        End If
                    Next

                    If inCombo = False And cboColCde.Enabled = True Then
                        MsgBox("Color Code - Data is Invalid, please select in Drop Down List.")
                        e.Cancel = True
                    End If
                Else
                    txtColDsc.Text = ""
                End If
            End If
        End If
    End Sub

    Private Sub txtColDsc_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtColDsc.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtCusCol_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusCol.LostFocus
        txtCusCol.Text = UCase(txtCusCol.Text)
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub cboPcking_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPcking.GotFocus
        cbopcking_got_focus = True

    End Sub

    Private Sub cboPcking_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboPcking.KeyDown
        flag_cbopacking_keypress = True
    End Sub

    Private Sub cboPcking_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboPcking.KeyPress
        flag_cbopacking_keypress = True
    End Sub

    Private Sub cboPcking_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPcking.LostFocus
        cbopcking_got_focus = False

    End Sub

    Private Sub cboPcking_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPcking.SelectedIndexChanged

        '''20140207
        If cbopcking_got_focus = True Then
            Call cboPckingClick()
        End If




        txtItmNoReal.Enabled = False
        txtItmNoTmp.Enabled = False
        txtItmNoVen.Enabled = False
        cboItmNoVen.Enabled = False

        ''''''20140122
        ' ''If no_formula_to_insert = False Then
        ' ''    Dim tmp_seq As Integer
        ' ''    tmp_seq = txtSeq.Text.Trim

        ' ''    Call fill_QUOTNDTL()
        ' ''    'gbPacking.Enabled = False
        ' ''    cboPcking.Enabled = False
        ' ''    gbPacking.Enabled = False

        ' ''    Call display_Detail(tmp_seq)

        'End If




    End Sub

    Private Sub cboPcking_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboPcking.Validating
        If cboPcking.Enabled = False Then
            Dim i As Integer
            Dim Y As Integer
            Dim inCombo As Boolean

            If txtItmNo.Text <> "" Then
                '*** Phase 2
                If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And _
                    cboColCde.Text <> "" And _
                    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then
                    'If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0" And _
                    '    cboColCde.Text <> "" And _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) > 0 Then
                    'txtQutItmSts.Text = "COMPLETE"
                    txtQutItmSts.Text = "A - Active"
                Else
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                i = cboPcking.Items.Count
                '*** Phase 2
                If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And cboPcking.Enabled = True And cboPcking.Items.Count > 0 Then
                    'If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0" And cboPcking.Enabled = True And cboPcking.Items.Count > 0 Then
                    For Y = 0 To i - 1
                        If cboPcking.Text = cboPcking.Items(Y).ToString Then
                            inCombo = True
                            Call ABUASST(txtItmNo.Text, "CHKPCK_A")
                        End If
                    Next

                    If inCombo = False And cboPcking.Enabled = True Then
                        MsgBox("Packing - Data is Invalid, please select in Drop Down List.")
                        e.Cancel = True
                        Call ABUASST(txtItmNo.Text, "HIDE")
                        Call ABUASST(txtItmNo.Text, "HIDEPRC")
                        Exit Sub
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = 0
                    'txtHstRef.Text = ""
                    txtInrQty.Text = ""
                    txtMtrQty.Text = ""
                    txtPeriod.Text = ""
                    'txtQutDat.Text = ""
                    txtCft.Text = ""
                    txtMoq.Text = ""
                    txtMoa.Text = ""
                    '*** Set Original MOQ/MOA value
                    ORI_MOQ = "0"
                    ORI_MOA = "0"
                    ORI_MOFLAG = ""
                    optMOA.Checked = False
                    optMOQ.Checked = False

                    cboUM.Text = ""
                    txtSmpPrc.Text = ""
                    'txtDiscnt.Text = "0"
                    'txtDiscntP.Text = "0"
                    txtCus1Sp.Text = "0"
                    txtCus1SpP.Text = "0"

                    cboDtlPrcTrm.Text = ""
                    cboFtyPrcTrm.Text = ""   ' factory price term
                    '*** Phase 2
                    cboTranTrm.Text = ""

                    txtCus1Dp.Text = "0"
                    txtCus1DpP.Text = "0"
                    txtCus2Sp.Text = "0"
                    txtCus2Dp.Text = "0"

                    txtFtyPrc.Text = ""
                    txtFtyCst.Text = ""
                    txtSmpUnt.Text = ""

                    Call ABUASST(txtItmNo.Text, "HIDE")
                    Call ABUASST(txtItmNo.Text, "HIDEPRC")

                    '*** Phase 2 comment it
                    'If rs_QUELCDTL.Tables.Count > 0 Then
                    '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
                    '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
                    '            Call CalculateELC()
                    '        Next
                    '    End If
                    'End If

                    '*** Phase 2 comment it
                    'Call cboCustItmCatPress()
                End If
            End If
        End If
    End Sub

    Private Sub txtInrdin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrdin.GotFocus
        txtInrdin.SelectionStart = 0
        txtInrdin.SelectionLength = Len(txtInrdin.Text)
    End Sub

    Private Sub txtInrdin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrdin.LostFocus
        If IsNumeric(txtInrdin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrdin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtInrdin.Text = "", 0, txtInrdin.Text)), txtInrdcm)
        End If
    End Sub

    Private Sub txtInrdcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrdcm.GotFocus
        txtInrdcm.SelectionStart = 0
        txtInrdcm.SelectionLength = Len(txtInrdcm.Text)
    End Sub

    Private Sub txtInrdcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrdcm.LostFocus
        If IsNumeric(txtInrdcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrdcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtInrdcm.Text = "", 0, txtInrdcm.Text)), txtInrdin)
        End If
    End Sub

    Private Sub txtInrwin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrwin.GotFocus
        txtInrwin.SelectionStart = 0
        txtInrwin.SelectionLength = Len(txtInrwin.Text)
    End Sub

    Private Sub txtInrwin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrwin.LostFocus
        If IsNumeric(txtInrwin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrwin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtInrwin.Text = "", 0, txtInrwin.Text)), txtInrwcm)
        End If
    End Sub

    Private Sub txtInrwcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrwcm.GotFocus
        txtInrwcm.SelectionStart = 0
        txtInrwcm.SelectionLength = Len(txtInrwcm.Text)
    End Sub

    Private Sub txtInrwcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrwcm.LostFocus
        If IsNumeric(txtInrwcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrwcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtInrwcm.Text = "", 0, txtInrwcm.Text)), txtInrwin)
        End If
    End Sub

    Private Sub txtInrhin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrhin.GotFocus
        txtInrhin.SelectionStart = 0
        txtInrhin.SelectionLength = Len(txtInrhin.Text)
    End Sub

    Private Sub txtInrhin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrhin.LostFocus
        If IsNumeric(txtInrhin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrhin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtInrhin.Text = "", 0, txtInrhin.Text)), txtInrhcm)
        End If
    End Sub

    Private Sub txtInrhcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrhcm.GotFocus
        txtInrhcm.SelectionStart = 0
        txtInrhcm.SelectionLength = Len(txtInrhcm.Text)
    End Sub

    Private Sub txtInrhcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtInrhcm.LostFocus
        If IsNumeric(txtInrhcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtInrhcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtInrhcm.Text = "", 0, txtInrhcm.Text)), txtInrhin)
        End If
    End Sub

    Private Sub txtMtrdin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrdin.GotFocus
        txtMtrdin.SelectionStart = 0
        txtMtrdin.SelectionLength = Len(txtMtrdin.Text)
    End Sub

    Private Sub txtMtrdin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrdin.LostFocus
        If IsNumeric(txtMtrdin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrdin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtMtrdin.Text = "", 0, txtMtrdin.Text)), txtMtrdcm)
            '*** Phase 2 comment it
            'Call CalculateELCTran()
        End If
    End Sub

    Private Sub txtMtrdcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrdcm.GotFocus
        txtMtrdcm.SelectionStart = 0
        txtMtrdcm.SelectionLength = Len(txtMtrdcm.Text)
    End Sub

    Private Sub txtMtrdcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrdcm.LostFocus
        If IsNumeric(txtMtrdcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrdcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtMtrdcm.Text = "", 0, txtMtrdcm.Text)), txtMtrdin)
        End If
    End Sub

    Private Sub txtMtrhin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrhin.GotFocus
        txtMtrhin.SelectionStart = 0
        txtMtrhin.SelectionLength = Len(txtMtrhin.Text)
    End Sub

    Private Sub txtMtrhin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrhin.LostFocus
        If IsNumeric(txtMtrhin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrhin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtMtrhin.Text = "", 0, txtMtrhin.Text)), txtMtrhcm)
            '*** Phase 2 comment it
            'Call CalculateELCTran()
        End If
    End Sub

    Private Sub txtMtrhcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrhcm.GotFocus
        txtMtrhcm.SelectionStart = 0
        txtMtrhcm.SelectionLength = Len(txtMtrhcm.Text)
    End Sub

    Private Sub txtMtrhcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrhcm.LostFocus
        If IsNumeric(txtMtrhcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrhcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtMtrhcm.Text = "", 0, txtMtrhcm.Text)), txtMtrhin)
        End If
    End Sub

    Private Sub txtMtrwin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrwin.GotFocus
        txtMtrwin.SelectionStart = 0
        txtMtrwin.SelectionLength = Len(txtMtrwin.Text)
    End Sub

    Private Sub txtMtrwin_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrwin.LostFocus
        If IsNumeric(txtMtrwin.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrwin.Focus()
        Else
            Call ConvertMtr("*", CDbl(IIf(txtMtrwin.Text = "", 0, txtMtrwin.Text)), txtMtrwcm)
            '*** Phase 2 comment it
            'Call CalculateELCTran()
        End If
    End Sub

    Private Sub txtMtrwcm_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrwcm.GotFocus
        txtMtrwcm.SelectionStart = 0
        txtMtrwcm.SelectionLength = Len(txtMtrwcm.Text)
    End Sub

    Private Sub txtMtrwcm_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMtrwcm.LostFocus
        If IsNumeric(txtMtrwcm.Text) = False Then
            MsgBox("Please input numeric value.")
            txtMtrwcm.Focus()
        Else
            Call ConvertMtr("/", CDbl(IIf(txtMtrwcm.Text = "", 0, txtMtrwcm.Text)), txtMtrwin)
        End If
    End Sub

    Private Sub txtGrswgt_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtGrswgt.GotFocus
        txtGrswgt.SelectionStart = 0
        txtGrswgt.SelectionLength = Len(txtGrswgt.Text)
    End Sub

    Private Sub txtGrswgt_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtGrswgt.KeyPress
        e.KeyChar = Chr(check_numeric_size(txtGrswgt.Text, Asc(e.KeyChar), txtGrswgt.SelectionStart, 6, 3))
    End Sub

    Private Sub txtGrswgt_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtGrswgt.LostFocus
        If Trim(txtGrswgt.Text) = "" Then
            txtGrswgt.Text = "0"
        End If

        If Trim(txtNetwgt.Text) = "" Then
            txtNetwgt.Text = "0"
        End If

        If IsNumeric(txtGrswgt.Text) = True Then
            If CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) >= 1000 Then
                MsgBox("Gross weight should be less than 1000!")
                txtGrswgt.Text = "0"
                Exit Sub
            End If

            If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) > CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) Then
                MsgBox("Gross weight should not be smaller than net weight!")
                Exit Sub
            End If
        Else
            MsgBox("Please input numeric value.")
        End If
    End Sub

    Private Sub txtNetwgt_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtNetwgt.GotFocus
        txtNetwgt.SelectionStart = 0
        txtNetwgt.SelectionLength = Len(txtNetwgt.Text)
    End Sub

    Private Sub txtNetwgt_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtNetwgt.KeyPress
        e.KeyChar = Chr(check_numeric_size(txtNetwgt.Text, Asc(e.KeyChar), txtNetwgt.SelectionStart, 6, 3))
    End Sub

    Private Sub txtNetwgt_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtNetwgt.LostFocus
        If Trim(txtGrswgt.Text) = "" Then
            txtGrswgt.Text = "0"
        End If

        If Trim(txtNetwgt.Text) = "" Then
            txtNetwgt.Text = "0"
        End If

        If IsNumeric(txtNetwgt.Text) = True Then
            If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) >= 1000 Then
                MsgBox("Net weight should not less than 1000!")
                txtNetwgt.Text = "0"
                Exit Sub
            End If

            If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) > CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) Then
                MsgBox("Gross weight should not be smaller than net weight!")
                Exit Sub
            End If
        Else
            MsgBox("Please input numeric value.")
        End If
    End Sub

    Private Sub txtPckItr_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPckItr.GotFocus
        txtPckItr.BringToFront()
        txtPckItr.Height = 149
        txtPckItr.Location = New Point(77, 67)
    End Sub

    Private Sub txtPckItr_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPckItr.LostFocus
        txtPckItr.Height = 49
        txtPckItr.Location = New Point(77, 167)
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtIMRmk_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtIMRmk.GotFocus
        txtIMRmk.BringToFront()
        txtIMRmk.Height = 135
        txtIMRmk.Location = New Point(80, 349)
    End Sub

    Private Sub txtIMRmk_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtIMRmk.LostFocus
        txtIMRmk.Height = 35
        txtIMRmk.Location = New Point(80, 449)
    End Sub

    Private Sub txtNote_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs)
        txtNote.BringToFront()
        txtNote.Height = 120
        txtNote.Location = New Point(80, 386)
    End Sub

    Private Sub txtNote_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs)
        txtNote.Height = 20
        txtNote.Location = New Point(80, 486)
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtCusQty_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusQty.GotFocus
        txtCusQty.SelectAll()
    End Sub

    Private Sub txtCusQty_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCusQty.KeyPress
        If (InStr("0123456789", Chr(Asc(e.KeyChar))) = 0) And (e.KeyChar > Chr(31) Or e.KeyChar < Chr(0)) Then
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtCusQty_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusQty.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtCusQty_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusQty.TextChanged
        txtSmpQty.Text = Val(txtStkQty.Text) + Val(txtCusQty.Text)
    End Sub

    Private Sub txtStkQty_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtStkQty.GotFocus
        txtStkQty.SelectAll()
    End Sub

    Private Sub txtStkQty_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtStkQty.KeyPress
        If (InStr("0123456789", Chr(Asc(e.KeyChar))) = 0) And (e.KeyChar > Chr(31) Or e.KeyChar < Chr(0)) Then
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtStkQty_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtStkQty.LostFocus
        Call checkLatestQut()   ' Check Latest Quotation
    End Sub

    Private Sub txtStkQty_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtStkQty.TextChanged
        txtSmpQty.Text = Val(txtStkQty.Text) + Val(txtCusQty.Text)
    End Sub

    Private Sub txtSmpQty_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtSmpQty.KeyPress
        If (InStr("0123456789", Chr(Asc(e.KeyChar))) = 0) And (e.KeyChar > Chr(31) Or e.KeyChar < Chr(0)) Then
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub optMOA_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles optMOA.Click
        Call setMOQMOA()
        Call checkLatestQut()    '*** Check Latest Quotation
    End Sub

    Private Sub optMOQ_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles optMOQ.Click
        Call setMOQMOA()
        Call checkLatestQut()    '*** Check Latest Quotation
    End Sub

    Private Sub txtMoq_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMoq.KeyPress
        If e.KeyChar = Chr(8) Then Exit Sub
        If e.KeyChar >= Chr(48) And e.KeyChar <= Chr(57) Then Exit Sub
        e.KeyChar = Chr(0)
    End Sub

    Private Sub txtMoq_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMoq.LostFocus
        Dim moq As Long

        moq = CLng(IIf(txtMoq.Text = "", 0, txtMoq.Text))

        If txtMoq.Text = "" Then moq = 0

        If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq")) Or _
            moq <> Val(IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq"))) Then

            Call retrieveMOQMOA()

            If gsUsrRank > 3 Then
                If moq < Val(org_IM_MOQ_tmp) Then
                    MsgBox("MOQ Cannot Less Than Company Defined Value (" & org_IM_MOQ_tmp & " CTN).", vbExclamation)
                    If txtMoq.Enabled = True And txtMoq.Visible = True Then
                        txtMoq.Text = org_IM_MOQ_tmp
                        txtMoq.SelectionStart = 0
                        txtMoq.SelectionLength = Len(txtMoq.Text)
                        txtMoq.Focus()
                    End If
                    Exit Sub
                End If
            Else
                If org_asscnt <> 0 Then
                    If moq < CLng(Val(org_IM_MOQ_tmp) / org_asscnt) Then
                        MsgBox("MOQ Cannot Less Than Company Defined Value (" & CLng(Val(org_IM_MOQ_tmp) / org_asscnt) & " CTN).", vbExclamation)
                        If txtMoq.Enabled = True And txtMoq.Visible = True Then
                            txtMoq.Text = org_IM_MOQ_tmp
                            txtMoq.SelectionStart = 0
                            txtMoq.SelectionLength = Len(txtMoq.Text)
                            txtMoq.Focus()
                        End If
                        Exit Sub
                    End If
                End If
            End If

            If bolLatestQut = False And org_QUTNO_tmp <> "" And org_QUTNO_tmp <> txtQutNo.Text And _
                IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode")) <> "NEW" Then
                MsgBox("The latest quotation no. of this item (" & txtItmNo.Text & ") is " & org_QUTNO_tmp & "!", vbInformation)
                bolLatestQut = True
            End If
        End If
    End Sub

    Private Sub txtmoq_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMoq.TextChanged
        Call txtMOQTextChanged()
    End Sub

    Private Sub txtMOQTextChanged()
        If Trim(txtMoq.Text) <> "" And Trim(txtCus1Dp.Text) <> "" And Trim(txtMtrQty.Text) <> "" Then
            If Trim(lblCurrMOQ.Text) <> "" Then
                If Trim(Split(lblCurrMOQ.Text, "=")(0)) = "CTN" Then
                    txtAmountMOQ.Text = Format(CLng(IIf(txtMoq.Text = "", 0, txtMoq.Text)) * CDbl(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * CLng(IIf(txtMtrQty.Text = "", 0, txtMtrQty.Text)), "###,###,##0.0000")
                Else
                    txtAmountMOQ.Text = Format(CLng(IIf(txtMoq.Text = "", 0, txtMoq.Text)) * CDbl(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * 1, "###,###,##0.0000")
                End If
            End If
        Else
            txtAmountMOQ.Text = ""
        End If


        If IsNumeric(txtMoq.Text) Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtMoq.Text
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_moq")) Then
                        Exit Sub
                    End If

                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_moq") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_moq") = tmpstr
                    End If
                End If
            End If
        End If



    End Sub

    Private Sub txtMoa_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMoa.KeyPress
        If e.KeyChar = Chr(8) Then Exit Sub
        e.KeyChar = Chr(IIf(e.KeyChar = Chr(46), 0, Asc(e.KeyChar)))
        e.KeyChar = Chr(check_numeric_size(txtMoa.Text, Asc(e.KeyChar), txtMoa.SelectionStart, 9, 0))
    End Sub

    Private Sub txtMoa_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMoa.LostFocus
        Dim moa As Long

        If Microsoft.VisualBasic.Left(txtMoa.Text, 1) = "," Then
            txtMoa.Text = Microsoft.VisualBasic.Right(txtMoa.Text, Len(txtMoa.Text) - 1)
        End If
        If Microsoft.VisualBasic.Right(txtMoa.Text, 1) = "," Then
            txtMoa.Text = Microsoft.VisualBasic.Left(txtMoa.Text, Len(txtMoa.Text) - 1)
        End If

        If txtMoa.Text = "" Then
            moa = 0
        Else
            moa = CLng(IIf(txtMoa.Text = "", 0, txtMoa.Text))
        End If

        '*** Show Most updated Quotation Detail record
        If IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa")) Or _
            moa <> Val(IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa"))) Then
            Call retrieveMOQMOA()

            If gsUsrRank > 3 Then
                If moa < Val(org_IM_MOA_tmp) Then
                    MsgBox("MOA Cannot Less Than Company Defined Amount (" & txtCurCde1.Text & " $" & org_IM_MOA_tmp & ").", vbExclamation)
                    If txtMoa.Enabled = True And txtMoa.Visible = True Then
                        txtMoa.Text = Format(CDec(Val(org_IM_MOA_tmp)), "###,###,##0")
                        txtMoa.SelectionStart = 0
                        txtMoa.SelectionLength = Len(txtMoa.Text)
                        txtMoa.Focus()
                    End If
                    Exit Sub
                End If
            Else
                If moa < round(Val(org_IM_MOA_tmp) / org_asscnt, 0) Then
                    MsgBox("MOA Cannot Less Than Company Defined Amount (" & txtCurCde1.Text & " $" & org_IM_MOA_tmp & ").", vbExclamation)
                    If txtMoa.Enabled = True And txtMoa.Visible = True Then
                        txtMoa.Text = Format(CDec(Val(org_IM_MOA_tmp)), "###,###,##0")
                        txtMoa.SelectionStart = 0
                        txtMoa.SelectionLength = Len(txtMoa.Text)
                        txtMoa.Focus()
                    End If
                    Exit Sub
                End If
            End If
            If bolLatestQut = False And org_QUTNO_tmp <> "" And org_QUTNO_tmp <> txtQutNo.Text And _
                IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode")) <> "NEW" Then
                MsgBox("The latest quotation no. is " & org_QUTNO_tmp & "!", vbInformation)
                bolLatestQut = True
            End If
        End If
        txtMoa.Text = Format(CDec(txtMoa.Text), "###,###,##0")
    End Sub

    Private Sub optGM_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles optGM.Click
        Call txtGrsMgn_TextChanged(sender, e)
    End Sub

    Private Sub optMU_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles optMU.Click
        Call txtGrsMgn_TextChanged(sender, e)
    End Sub

    Private Sub txtGrsMgn_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtGrsMgn.GotFocus
        txtGrsMgn.SelectAll()
    End Sub

    Private Sub txtGrsMgn_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtGrsMgn.KeyPress
        'If e.KeyChar > Chr(0) Then
        '    e.KeyChar = Chr(check_numeric_size(txtCus1Dp.Text, Asc(e.KeyChar), txtGrsMgn.SelectionStart, 3, 3))
        'Else
        '    e.KeyChar = Chr(0)
        'End If
    End Sub

    Private Sub txtGrsMgn_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtGrsMgn.TextChanged
        If txtGrsMgn.Text = "." Then
            txtGrsMgn.Text = "0."
            txtGrsMgn.SelectionStart = 3
        End If

        If txtGrsMgn.Text <> "" And txtGrsMgn.Enabled = True Then
            If optGM.Checked = True Then
                If Val(txtGrsMgn.Text) >= 100 Then
                    MsgBox("Gross Margin cannot large than or equal to 100%.")
                    txtGrsMgn.Enabled = True
                    If txtGrsMgn.Enabled And txtGrsMgn.Visible Then txtGrsMgn.Focus()
                    Exit Sub
                End If
            Else
                If Val(txtGrsMgn.Text) > 100 Then
                    MsgBox("Mark Up cannot large than 100%.")
                    txtGrsMgn.Enabled = True
                    If txtGrsMgn.Enabled And txtGrsMgn.Visible Then txtGrsMgn.Focus()
                    Exit Sub
                End If
            End If
        End If

        '20130909
        If txtInvRndP.Text = "" Then
            txtInvRndP.Text = "4"
        End If

        If cus1_rounding <> 4 Then
            txtInvRndP.Text = cus1_rounding.ToString
        End If

        If txtCus1Sp.Text <> "" Then

            If optGM.Checked = True Then
                'txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")

                ''iif 
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If


                If chkPC.Checked = True Then
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) / (1 - Val(txtGrsMgn.Text) / 100)) *get_umftr(), "###,###,##0.0000")
                    If txtPCPrc.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text) *get_umftr(), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text) *get_umftr(), "###,###,##0.0000")
                    End If

                Else
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")
                    If txtCus1Dp.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    End If
                End If
            Else
                'txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                End If

                If chkPC.Checked = True Then
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) * (1 + Val(txtGrsMgn.Text) / 100)) *get_umftr(), "###,###,##0.0000")

                    ''bug 20130729
                    If txtPCPrc.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(IsNumeric(txtGrsMgn.Text), txtGrsMgn.Text, 0)) / 100), IIf(IsNumeric(txtInvRndP.Text), txtInvRndP.Text, 0)) * IIf(IsNumeric(get_umftr()), get_umftr(), 0), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) * (1 + Val(IIf(IsNumeric(txtGrsMgn.Text), txtGrsMgn.Text, 0)) / 100), IIf(IsNumeric(txtInvRndP.Text), txtInvRndP.Text, 0)) * IIf(IsNumeric(get_umftr()), get_umftr(), 0), "###,###,##0.0000")
                    End If
                Else
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")
                    If txtCus1Dp.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    End If
                End If
            End If

        End If

        ''
        Dim qutseq As Integer
        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            Exit Sub
        End If

        '''20140226
        ''' 
        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
        End If

        qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

        Call calculate_gbPandelCstEmt(qutseq)


        '*** Phase 2 comment it
        'If rs_QUELCDTL.Tables.Count > 0 Then
        '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
        '            Call CalculateELC()
        '        Next
        '    End If
        'End If

        '*** Phase 2 comment it
        'Call cboCustItmCatPress()
        Call CalculateMatBkd()
        '*** Phase 2 comment it
        'Call CalculateELCTran()

        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtDiscnt_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscnt.GotFocus
        Discount_Flag = True
        txtDiscnt.SelectAll()
    End Sub

    Private Sub txtDiscnt_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtDiscnt.KeyPress
        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtCusUsd.Text, Asc(e.KeyChar), txtDiscnt.SelectionStart, 3, 3))
        Else
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtDiscnt_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscnt.LostFocus
        Discount_Flag = False
        If IsNumeric(txtDiscnt.Text) = False Then
            txtDiscnt.Text = "0"
        End If
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtDiscnt_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscnt.TextChanged
        If IsNumeric(txtCus1Sp.Text) = True And txtDiscnt.Enabled = True And _
            IsNumeric(txtDiscnt.Text) = True And Discount_Flag = True Then
            Call Cal_Dis_Prc(txtCus1Sp.Text, txtDiscnt.Text, 0)
        ElseIf IsNumeric(txtDiscnt.Text) = False Then
            txtCus1Dp.Text = txtCus1Sp.Text
            Call Cal_DTL_Price()
        End If
    End Sub

    Private Sub txtDiscntP_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscntP.GotFocus
        Discount_Flag = True
        txtDiscntP.SelectAll()
    End Sub

    Private Sub txtDiscntP_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtDiscntP.KeyPress
        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtDiscntP.Text, Asc(e.KeyChar), txtDiscntP.SelectionStart, 3, 3))
        Else
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtDiscntP_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscntP.LostFocus
        Discount_Flag = False
        If IsNumeric(txtDiscntP.Text) = False Then
            txtDiscntP.Text = "0"
        End If
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtDiscntP_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDiscntP.TextChanged
        'If IsNumeric(txtCus1SpP.Text) = True And txtDiscntP.Enabled = True And _
        '    IsNumeric(txtDiscntP.Text) = True And Discount_Flag = True Then
        '    'txtCus1DpP.Text = Format(round2(CDbl(Val(txtCus1SpP.Text)) * (1 - CDbl(Val(txtDiscntP.Text) / 100))), "###,###,##0.0000")
        '    txtCus1DpP.Text = Format(round(CDbl(Val(txtCus1SpP.Text)) * (1 - CDbl(Val(txtDiscntP.Text) / 100)), txtInvRndP.Text), "###,###,##0.0000")
        '    'Call Cal_Dis_Prc(txtCus1SpP.Text, txtDiscntP.Text, 0)
        'ElseIf IsNumeric(txtDiscntP.Text) = False Then
        '    txtCus1DpP.Text = txtCus1SpP.Text
        '    'Call Cal_DTL_Price()
        'End If
    End Sub

    Private Sub txtQutNo_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtQutNo.GotFocus
        txtQutNo.SelectAll()
    End Sub

    Private Sub txtQutNo_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtQutNo.KeyPress

        Cursor = Cursors.WaitCursor
        For i As Integer = 0 To 2999
            flag_no_update_mu(i) = True
        Next

        'flag_no_update_mu(sReadingIndexQ) = True

        If e.KeyChar = Chr(13) And cmdFind.Enabled = True Then
            'txtQutNo.Text = UCase(Trim(txtQutNo.Text))
            'Call txtQutNoKeyPress()
            Call cmdFind_Click(sender, e)
        End If

        cmdUpdate.Enabled = True
        cmdRenew.Enabled = True

        cmdItmNoConv.Enabled = True
        cmdItmNoConvVen.Enabled = True


        '''III
        ''' 
        gbShipdate.Enabled = True

        txtHDRFtyShpDateStr.Enabled = True
        txtHDRFtyShpDateEnd.Enabled = True
        txtHDRCustShpDateStr.Enabled = True
        txtHDRCustShpDateEnd.Enabled = True


        Call format_cboThreeTerms()


        Cursor = Cursors.Default

    End Sub










    Private Sub txtCus1Dp_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1Dp.GotFocus
        txtCus1Dp.SelectAll()
    End Sub


    Private Sub txtCus1Dp_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCus1Dp.KeyPress
        'Marco 20130731
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If txtCus1Dp.Text.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
            '    e.KeyChar = ""
            'End If
        End If
        flag_txtCus1Dp_keypress = True
        flag_no_update_mu(sReadingIndexQ) = False

    End Sub
    Private Sub txtCus1Dp_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtCus1Dp.Validating
        'If sFocusedOn = "txtCus1Dp" Then
        '    If Trim(txtCus1Dp.Text) = "" Then
        '        txtCus1Dp.Text = 0
        '    End If

        '    If rs_IMVENINF.Tables.Count > 0 Then
        '        If txtCus1Dp.Text <> "" And CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < CDec(IIf(txtBasPrc.Text = "", 0, txtBasPrc.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '            MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '        End If
        '    End If

        '    If IIf(IsDBNull(txtSubTtlPercChgP.Text), 0, Val(txtSubTtlPercChgP.Text)) - IIf(IsDBNull(txtMU.Text), 0, Val(txtMU.Text)) > Val(txtCushCostBufPercP.Text) Then
        '        txtCus1DpP.ForeColor = Color.Red
        '        txtCus1Dp.ForeColor = Color.Red
        '    Else
        '        txtCus1DpP.ForeColor = Color.Black
        '        txtCus1Dp.ForeColor = Color.Black
        '    End If

        '    Call check_approval(CDbl(Val(txtMU.Text)))

        '    Call checkLatestQut()    ' Check Latest Quotation

        '    Call PrcEmtCopyFromDetail()
        '    Call CalPrcEmt()
        '    Call Insert_rs_QUPRCEMT()
        '    Call Update_rs_QUPRCEMT()
        '    Call PrcEmtCopyToDetail()
        '    Call CalCus2Prc()

        '    sFocusedOn = ""
        'End If
    End Sub

    Private Sub txtCus1Dp_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1Dp.TextChanged
        '20130731 Marco
        If flag_txtCus1Dp_keypress = True Then
            flag_txtCus1Dp_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtCus1Dp.Text.Trim) Then
                txtCus1Dp.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = 0
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text
            End If

            '20131017
            If cboCus2No.Text <> "" Then
                If optGM.Checked = True Then
                    If txtCus1Sp.Text = "" Then
                        txtCus2Sp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    Else
                        txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    End If

                    If txtCus1Dp.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                    End If
                Else
                    If txtCus1Sp.Text = "" Then
                        txtCus2Sp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    Else
                        txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    End If

                    If txtCus1Dp.Text = "" Then
                        txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    Else
                        txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                    End If
                End If
            End If


            Call calculate_gbPandelCstEmt_adjprc(qutseq)
            txtMU.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")
            txtMUPrice.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_muprc")
            txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtSmpPrc.Text = round(Val(txtSmpPrc.Text), 4)

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If
            ''20130902

            '20131017
            


            If IsNumeric(txtCus1Dp.Text) = True And txtUMFtr.Text <> "" Then
                ' txtCus1Dp.Text = Format(txtPCPrc.Text *get_umftr(), "###,###,##0.0000")
                If flag_txtPCPrc_keypress <> True Then
                    Dim umftr As Decimal
                    If Not IsNumeric(txtUMFtr.Text) Then
                        umftr = 1
                    Else
                        umftr = txtUMFtr.Text
                    End If

                    If Val(txtUMFtr.Text) = 0 Then
                        umftr = 1
                    End If
                    '''20140212
                    umftr = get_umftr()


                    either_cus1dp_or_cus2dp = txtCus1Dp.Text
                    If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                        If optGM.Checked = True Then
                            either_cus1dp_or_cus2dp = txtCus2Dp.Text
                        ElseIf optMU.Checked = True Then
                            either_cus1dp_or_cus2dp = txtCus2Dp.Text
                        End If
                    End If



                    txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
                    txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")

                    txtPCPrc.Text = round(txtPCPrc.Text, cus1_rounding)
                    txtPCPrcP.Text = txtPCPrc.Text
                    txtPCPrcP_Text_round_5 = txtPCPrc_Text_round_5

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5

                End If

            End If



            Recordstatus = True

            Call check_mu(sReadingIndexQ)

        End If



    End Sub

    Private Sub txtCus1DpP_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1DpP.GotFocus
        txtCus1DpP.SelectAll()
    End Sub

    Private Sub txtCus1DpP_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCus1DpP.KeyPress
        'Marco 20130731
        If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
            e.KeyChar = ""
        Else
            'If txtCus1DpP.Text.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
            '    e.KeyChar = ""
            'End If
        End If
        flag_txtCus1DpP_keypress = True
        flag_no_update_mu(sReadingIndexQ) = False

    End Sub

    Private Sub txtCus1DpP_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtCus1DpP.Validating
        'If sFocusedOn = "txtCus1DpP" Then
        '    If Trim(txtCus1DpP.Text) = "" Then
        '        txtCus1DpP.Text = 0
        '    End If

        '    If rs_IMVENINF.Tables.Count > 0 Then
        '        If txtCus1DpP.Text <> "" And CDec(IIf(txtCus1DpP.Text = "", 0, txtCus1DpP.Text)) < CDec(IIf(txtBasPrcP.Text = "", 0, txtBasPrcP.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '            MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '        End If
        '    End If

        '    If IIf(IsDBNull(txtSubTtlPercChgP.Text), 0, Val(txtSubTtlPercChgP.Text)) - IIf(IsDBNull(txtMUP.Text), 0, Val(txtMUP.Text)) > Val(txtCushCostBufPercP.Text) Then
        '        txtCus1DpP.ForeColor = Color.Red
        '        txtCus1Dp.ForeColor = Color.Red
        '    Else
        '        txtCus1DpP.ForeColor = Color.Black
        '        txtCus1Dp.ForeColor = Color.Black
        '    End If

        '    Call check_approval(CDbl(Val(txtMUP.Text)))

        '    Call checkLatestQut()    ' Check Latest Quotation
        '    sFocusedOn = ""
        'End If
    End Sub

    Private Sub txtCus1DpP_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1DpP.TextChanged
        'Marco 20130731
        '20130731 Marco
        If flag_txtCus1DpP_keypress = True Then
            'flag_txtCus1DpP_keypress = False

            Dim qutseq As Integer
            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

            If Not IsNumeric(txtCus1DpP.Text.Trim) Then
                txtCus1DpP.Text = "0"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = 0
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = 0
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1DpP.Text
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1DpP.Text
            End If

            Call calculate_gbPandelCstEmt_adjprc(qutseq)
            txtMUP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")
            txtMinMUPriceP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_muminprc")
            txtMUPriceP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_muprc")

            If IsNumeric(txtCus1Dp.Text) = True And txtUMFtr.Text <> "" Then
                ' txtCus1Dp.Text = Format(txtPCPrc.Text *get_umftr(), "###,###,##0.0000")

                Dim umftr As Decimal
                If Not IsNumeric(txtUMFtr.Text) Then
                    umftr = 1
                Else
                    umftr = txtUMFtr.Text
                End If

                If Val(txtUMFtr.Text) = 0 Then
                    umftr = 1
                End If
                '''20140212
                umftr = get_umftr()


                '20131017
                If cboCus2No.Text <> "" Then
                    If optGM.Checked = True Then
                        If txtCus1SpP.Text = "" Then
                            txtCus2Sp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                        Else
                            txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1SpP.Text = "", 0, txtCus1SpP.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                        End If

                        If txtCus1DpP.Text = "" Then
                            txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                        Else
                            txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1DpP.Text = "", 0, txtCus1DpP.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                        End If
                    Else
                        If txtCus1SpP.Text = "" Then
                            txtCus2Sp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                        Else
                            txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1SpP.Text = "", 0, txtCus1SpP.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                        End If

                        If txtCus1DpP.Text = "" Then
                            txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                        Else
                            txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1DpP.Text = "", 0, txtCus1DpP.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                        End If
                    End If
                End If

                either_cus1dp_or_cus2dp = txtCus1DpP.Text
                If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                    If Not IsNumeric(txtCus2Dp.Text) Then
                        txtCus2Dp.Text = txtCus1DpP.Text
                    End If
                    If optGM.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    ElseIf optMU.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    End If
                End If

                txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
                txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")

                If flag_txtPCPrcP_keypress = False Then
                    txtPCPrcP.Text = txtPCPrc.Text
                    txtPCPrcP_Text_round_5 = txtPCPrc_Text_round_5

                End If

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5
            End If



            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If

            '20130731 Marco
            display_gbPandelCstEmt(qutseq)

            Recordstatus = True
            Call check_mu(sReadingIndexQ)

        End If

    End Sub

    Private Sub chkPC_hdr_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPC_hdr.Click
        Dim strTmpSort As String
        Dim tmpTab As Integer

        'QUD_CREUSR = "~*UPD*~"

        tmpTab = btcQUM00001.SelectedIndex

        strTmpSort = ""

        If chkPC_hdr.Checked = True And flgLoadApplyAllPC = False Then
            If MsgBox("Are you sure to convert all the assortment items to PC?", vbYesNo + vbQuestion, "Convert All To PC") = vbYes Then


                btcQUM00001.SelectedIndex = 2

                If btcQUM00001.SelectedIndex <> 2 Then
                    '*** Invalid Data in Current Details
                    flgApplyAllPC = True
                    chkPC_hdr.Checked = False
                Else
                    '*** Details are Valid
                    flgApplyAllPC = False

                    'header
                    '''***)
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_conalltopc") = "Y"
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If


                    strTmpSort = rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort
                    rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort = "qud_qutseq asc"

                    If rs_QUOTNDTL.Tables("RESULT").DefaultView.Count > 0 Then
                        For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").DefaultView.Count - 1
                            If rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmno").ToString <> "" And _
                                rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmtyp").ToString = "ASS" And _
                                rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmsts").ToString = "CMP" And _
                                (rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_untcde").ToString <> "" Or _
                                 Val(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_inrqty").ToString) <> 0 Or _
                                 Val(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_mtrqty").ToString) <> 0) And _
                                rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_contopc").ToString = "" And _
                                (rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "NEW" Or _
                                 rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "UPD" Or _
                                 rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "") Then

                                If isABUAssortment(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmno").ToString) = True Then
                                    'rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_contopc") = "Y"

                                    sReadingIndexQ = index
                                    no_Display_Detail = False
                                    'Call display_Detail()

                                    chkPC.Checked = True
                                    Call chkPCClick()
                                    'Call ABUASST(txtItmNo.Text, "CALPCPRCI")

                                    rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_pcprc") = txtPCPrc_Text_round_5



                                    Recordstatus = True
                                End If
                            End If
                        Next
                    End If

                    sReadingIndexQ = 0
                    no_Display_Detail = False
                    'Call display_Detail()

                    '*** Phase 2 comment it
                    'Call SetHeaderBarValue(True)

                    If strTmpSort <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort = strTmpSort
                    End If

                    btcQUM00001.SelectedIndex = tmpTab
                End If
            Else
                flgLoadApplyAllPC = True
                chkPC_hdr.Checked = False
                flgLoadApplyAllPC = False
            End If
        ElseIf chkPC_hdr.Checked = False And flgLoadApplyAllPC = False Then


            If flgApplyAllPC = True Then
                '*** User has checked "Convert All To PC", but details is invalid, has to unchecked
                flgApplyAllPC = False
            Else
                If MsgBox("Are you sure to cancel the conversion of PC for all the assortment items?", vbYesNo + vbQuestion, "Cancel The Conversion of PC") = vbYes Then
                    '*** User has unchecked "Convert All To PC"

                    flghdrPC = True
                    btcQUM00001.SelectedIndex = 2

                    If btcQUM00001.SelectedIndex <> 2 Then
                        '*** Invalid Data in Current Details
                        flgApplyAllPC = True
                        chkPC_hdr.Checked = False
                    Else
                        '*** Details are Valid
                        flgApplyAllPC = False

                        '''***)
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_conalltopc") = "N"

                        '''0811_2
                        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                        End If

                        strTmpSort = rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort
                        rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort = "qud_qutseq asc"

                        If rs_QUOTNDTL.Tables("RESULT").DefaultView.Count > 0 Then
                            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").DefaultView.Count - 1
                                If rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmno").ToString <> "" And _
                                    rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmtyp").ToString = "ASS" And _
                                    rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmsts").ToString = "CMP" And _
                                    (rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_untcde").ToString <> "" Or _
                                     Val(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_inrqty").ToString) <> 0 Or _
                                     Val(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_mtrqty").ToString) <> 0) And _
                                    rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_contopc").ToString = "Y" And _
                                    (rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "NEW" Or _
                                     rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "UPD" Or _
                                     rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "") Then

                                    If isABUAssortment(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_itmno").ToString) = True Then
                                        'rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_contopc") = ""
                                        rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_pcprc") = 0

                                        sReadingIndexQ = index
                                        no_Display_Detail = False
                                        ' Call display_Detail()

                                        chkPC.Checked = False
                                        Call chkPCClick()

                                        'If chkPC.Visible = True Then
                                        chkPC.Enabled = True
                                        'End If

                                        If rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode").ToString = "" Then
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("mode") = "UPD"
                                        End If

                                        Recordstatus = True
                                    End If
                                End If
                            Next
                        End If
                    End If

                    sReadingIndexQ = 0
                    no_Display_Detail = False
                    'Call Display_Detail()

                    '*** Phase 2 comment it
                    'Call SetHeaderBarValue(True)

                    If strTmpSort <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").DefaultView.Sort = strTmpSort
                    End If

                    flgApplyAllPC = False
                    btcQUM00001.SelectedIndex = tmpTab
                Else
                    flgLoadApplyAllPC = True
                    chkPC_hdr.Checked = True
                    flgLoadApplyAllPC = False
                End If
                flghdrPC = False
            End If
        End If
	      '''20140211
        ''' 
        sReadingIndexQ = 0
        Call display_Detail(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")))

        btcQUM00001.SelectedIndex = 1
    End Sub

    Private Sub chkPC_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPC.Click
        Call chkPCClick()
    End Sub

    Private Sub chkPCClick()
        Recordstatus = True
        If chkPC.Checked = True Then
            rs_QUOTNDTL.Tables("RESULT").DefaultView(sReadingIndexQ)("qud_contopc") = "Y"
            '''***)

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            Call ABUASST(txtItmNo.Text, "SHOWPRC")

            If rs_QUOTNDTL.Tables("RESULT").DefaultView(sReadingIndexQ)("mode").ToString = "NEW" And cboColCde.Items.Count >= 0 Then
                Call cboColCdeClick()

                If txtPCPrc.Text = "0" Or txtPCPrc.Text = "0.0000" Or txtPCPrc.Text = "" Then
                    Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                End If
            Else
                Call ABUASST(txtItmNo.Text, "CALPCPRCI")
            End If
        Else
            rs_QUOTNDTL.Tables("RESULT").DefaultView(sReadingIndexQ)("qud_contopc") = ""
            '''***)

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            Call ABUASST(txtItmNo.Text, "HIDEPRC")
            txtPCPrc.Text = "0"
            txtPCPrc_Text_round_5 = 0

        End If

    End Sub

    Private Sub txtPCPrc_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPCPrc.GotFocus
        Call txtPCPrcGotFocus()
    End Sub

    Private Sub txtPCPrc_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPCPrc.TextChanged

        ''20130902
        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            Exit Sub
        End If


        If flag_txtPCPrc_keypress = True Then

            If IsNumeric(txtPCPrc.Text) = True And PCPrc_Flag = True And txtUMFtr.Text <> "" Then
                '''III???
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5
                '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1Dp.Text.Trim

                Dim umftr As Decimal
                If Not IsNumeric(txtUMFtr.Text) Then
                    umftr = 1
                Else
                    umftr = txtUMFtr.Text
                End If

                If Val(txtUMFtr.Text) = 0 Then
                    umftr = 1
                End If
                '''20140212
                umftr = get_umftr()


                ''
                If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                    If optGM.Checked = True Then
                        ''
                        txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                    ElseIf optMU.Checked = True Then
                        ''
                        txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                    Else
                        txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                    End If
                Else
                    txtPCPrc_Text_round_5 = Val(txtPCPrc.Text)


                    txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")

                    txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If



            End If
            flag_txtPCPrc_keypress = False

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If
        End If

        Recordstatus = True
    End Sub

    Private Sub txtPCPrc_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPCPrc.KeyPress


        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtPCPrc.Text, Asc(e.KeyChar), txtPCPrc.SelectionStart, 9, 4))
            flag_txtCus1Dp_keypress = True
            flag_txtPCPrc_keypress = True
        Else
            e.KeyChar = Chr(0)
        End If

    End Sub

    Private Sub txtPCPrc_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPCPrc.LostFocus
        Call txtPCPrcLostFocus()
    End Sub

    Private Sub txtPCPrcP_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPCPrcP.GotFocus
        PCPrcP_Flag = True

    End Sub

    Private Sub txtPCPrcP_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPCPrcP.LostFocus
        Call txtPCPrcPLostFocus()
    End Sub

    Private Sub txtPCPrcP_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPCPrcP.TextChanged
        txtPCPrcP_Text_round_5 = Val(txtPCPrcP.Text)

        ''20130902
        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            Exit Sub
        End If


        If flag_txtPCPrcP_keypress = True Then

            If IsNumeric(txtPCPrcP.Text) = True And PCPrcP_Flag = True And txtUMFtr.Text <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1DpP.Text.Trim

                Dim umftr As Decimal
                If Not IsNumeric(txtUMFtr.Text) Then
                    umftr = 1
                Else
                    umftr = txtUMFtr.Text
                End If

                If Val(txtUMFtr.Text) = 0 Then
                    umftr = 1
                End If
                '''20140212
                umftr = get_umftr()



                If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                    If optGM.Checked = True Then
                        ''

                        txtCus2Dp.Text = Format(txtPCPrcP_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)

                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus2dp") = txtCus2Dp.Text.Trim
                    ElseIf optMU.Checked = True Then
                        ''
                        txtCus2Dp.Text = Format(txtPCPrcP_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)

                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                        ' rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus2dp") = txtCus2Dp.Text.Trim
                    Else
                        txtCus1DpP.Text = Format(txtPCPrcP_Text_round_5 * umftr, "###,###,##0.0000")
                        
                        txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)

                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                    End If
                Else
                    txtCus1DpP.Text = Format(txtPCPrcP_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If





            End If
            '            flag_txtPCPrcP_keypress = False

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If
        End If

        Recordstatus = True
    End Sub

    Private Sub txtPCPrcP_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPCPrcP.KeyPress


        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtPCPrcP.Text, Asc(e.KeyChar), txtPCPrcP.SelectionStart, 9, 4))
            flag_txtCus1DpP_keypress = True
            flag_txtPCPrcP_keypress = True
        Else
            e.KeyChar = Chr(0)
        End If

    End Sub





    Private Sub cboVenNo_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboVenNo.SelectedIndexChanged

        Exit Sub

        Dim VendorType As String

        If Trim(cboVenNo.Text) <> "" Then
            If Len(Trim(Split(cboVenNo.Text, "-")(0))) > 1 And _
                Trim(Split(cboVenNo.Text, "-")(0)) <> "0005" And _
                Trim(Split(cboVenNo.Text, "-")(0)) <> "0006" And _
                Trim(Split(cboVenNo.Text, "-")(0)) <> "0007" And _
                Trim(Split(cboVenNo.Text, "-")(0)) <> "0008" And _
                Trim(Split(cboVenNo.Text, "-")(0)) <> "0009" Then
                VendorType = "E"
            Else
                VendorType = "I"
            End If

            If VendorType = "E" Then
                If gsFlgCstExt = 1 Then
                    lblFtyPrc.Visible = True
                    txtFtyPrc.Visible = True
                    txtFCurCde.Visible = True
                    txtFtyCst.Visible = True

                    lblInr.Visible = True
                    lblMtr.Visible = True
                    lblX1.Visible = True
                    lblX2.Visible = True
                    lblX5.Visible = True
                    lblX6.Visible = True

                    '                    cboFtyPrcTrm.Visible = True
                Else
                    lblFtyPrc.Visible = False
                    txtFtyPrc.Visible = False
                    txtFCurCde.Visible = False
                    txtFtyCst.Visible = False

                    lblInr.Visible = False
                    lblMtr.Visible = False
                    lblX1.Visible = False
                    lblX2.Visible = False
                    lblX5.Visible = False
                    lblX6.Visible = False

                    '                   cboFtyPrcTrm.Visible = False
                End If
            Else
                If gsFlgCst = 1 Then
                    lblFtyPrc.Visible = True
                    txtFtyPrc.Visible = True
                    txtFCurCde.Visible = True
                    txtFtyCst.Visible = True

                    lblInr.Visible = True
                    lblMtr.Visible = True
                    lblX1.Visible = True
                    lblX2.Visible = True
                    lblX5.Visible = True
                    lblX6.Visible = True

                    '                  cboFtyPrcTrm.Visible = True
                Else
                    lblFtyPrc.Visible = False
                    txtFtyPrc.Visible = False
                    txtFCurCde.Visible = False
                    txtFtyCst.Visible = False

                    lblInr.Visible = False
                    lblMtr.Visible = False
                    lblX1.Visible = False
                    lblX2.Visible = False
                    lblX5.Visible = False
                    lblX6.Visible = False

                    '                 cboFtyPrcTrm.Visible = False
                End If
            End If
        Else
            lblFtyPrc.Visible = False
            txtFtyPrc.Visible = False
            txtFCurCde.Visible = False
            txtFtyCst.Visible = False

            lblInr.Visible = False
            lblMtr.Visible = False
            lblX1.Visible = False
            lblX2.Visible = False
            lblX5.Visible = False
            lblX6.Visible = False

            '        cboFtyPrcTrm.Visible = False
        End If

        txtFCurCde.Text = get_vencur(cboVenNo.Text.Trim.ToString)

    End Sub

    Private Sub cboVenNo_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboVenNo.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboVenNo.Items.Count
        If cboVenNo.Text <> "" And cboVenNo.Enabled = True And cboVenNo.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboVenNo.Text = cboVenNo.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Vendor Code - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboCusVen_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCusVen.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboCusVen.Items.Count
        If cboCusVen.Text <> "" And cboCusVen.Enabled = True And cboCusVen.Items.Count > 0 Then
            For Y = 0 To i - 1

                If Split(cboCusVen.Text, "-")(0) = Split(cboCusVen.Items(Y).ToString.Trim, "-")(0) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                '    MsgBox("Custom Ven - Data is Invalid, please select in Drop Down List.")
                '   e.Cancel = True
            End If
        End If
    End Sub

    Private Sub cboDV_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboDV.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboDV.Items.Count
        If cboDV.Text <> "" And cboDV.Enabled = True And cboDV.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboDV.Text = cboDV.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Custom Ven - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub



    Private Sub cboTV_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboTV.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboTV.Items.Count
        If cboTV.Text <> "" And cboTV.Enabled = True And cboTV.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboTV.Text = cboTV.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Custom Ven - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub
    Private Sub cboFA_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboFA.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboFA.Items.Count
        If cboFA.Text <> "" And cboFA.Enabled = True And cboFA.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboFA.Text = cboFA.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Custom Ven - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If
    End Sub


    Private Sub cboHrmCde_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs)
        'If sender.focus = True Then
        cboHrmCdeClick()
        'End If
    End Sub

    Private Sub cboHrmCdeClick()
        If cboHrmCde.Text <> "" Then
            rs_SYHRMCDE.Tables("RESULT").Select("yhc_hrmcde = " & "'" & Microsoft.VisualBasic.Left(cboHrmCde.Text, InStr(cboHrmCde.Text, " - ") - 1) & "'")

            If rs_SYHRMCDE.Tables("RESULT").Rows.Count > 0 Then
                txtDtyRat.Text = rs_SYHRMCDE.Tables("RESULT").Rows(cboHrmCde.SelectedIndex)("yhc_dtyrat")
                '*** Phase 2 comment it
                '2013
                'Call CalculateELCDuty(CDbl(IIf(txtDtyRat.Text = "", 0, txtDtyRat.Text)))
            End If
        End If
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub cboHrmCde_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboHrmCde.KeyPress
        If e.KeyChar = Chr(13) Then
            Call cboHrmCdeClick()
        End If
    End Sub

    Private Sub cboHrmCde_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboHrmCde.KeyUp
        If cboHrmCde.Text.Length > 0 Then
            Call auto_search_combo(cboHrmCde, e.KeyCode)
        End If
    End Sub

    Private Sub cboHrmCde_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboHrmCde.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        If ValidateCombo(cboHrmCde) <> True Then
            Exit Sub
        End If

        i = cboHrmCde.Items.Count
        If cboHrmCde.Text <> "" And cboHrmCde.Enabled = True And cboHrmCde.Items.Count > 0 Then
            For Y = 0 To i - 1
                If cboHrmCde.Text = cboHrmCde.Items(Y).ToString Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                    If cboHrmCde.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde").ToString Then
                        txtDtyRat.Text = ""
                        If InStr(cboHrmCde.Text, " - ") > 0 Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde") = Microsoft.VisualBasic.Left(cboHrmCde.Text, InStr(cboHrmCde.Text, " - ") - 1)
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde") = cboHrmCde.Text
                        End If
                    End If
                End If
                '                txtDtyRat.Enabled = True
                'If txtDtyRat.Enabled And txtDtyRat.Visible Then txtDtyRat.Focus()
            Else
                'txtDtyRat.Enabled = False
            End If
        Else
            '            txtDtyRat.Enabled = False
            txtDtyRat.Text = ""

            '*** Phase 2 comment it
            'Call CalculateELCDuty(CDbl(0))
        End If
    End Sub

    Private Sub txtDtyRat_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDtyRat.GotFocus
        'txtDtyRat.SelectAll()
    End Sub

    Private Sub txtDtyRat_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtDtyRat.KeyPress
        'If e.KeyChar > Chr(0) Then
        '    e.KeyChar = Chr(check_numeric_size(txtCusUsd.Text, Asc(e.KeyChar), txtDtyRat.SelectionStart, 3, 3))
        'Else
        '    e.KeyChar = Chr(0)
        'End If
    End Sub

    Private Sub txtDtyRat_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDtyRat.LostFocus
        'If Val(txtDtyRat.Text) > 100 And txtDtyRat.Enabled = True Then
        '    MsgBox("Duty Rate cannot large than 100%.")
        '    '            txtDtyRat.Enabled = True
        '    If txtDtyRat.Enabled And txtDtyRat.Visible Then txtDtyRat.Focus()
        '    Exit Sub
        'End If
        'Call checkLatestQut()    ' Check Latest Quotation
    End Sub

    Private Sub txtCusUsd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusUsd.GotFocus
        txtCusUsd.SelectAll()
    End Sub

    Private Sub txtCusUsd_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCusUsd.KeyPress
        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtCusUsd.Text, Asc(e.KeyChar), txtCusUsd.SelectionStart, 9, 4))

            '*** Phase 2 comment it
            'If e.KeyChar = Chr(13) Then
            '    Call CalculatePMU(txtCusUsd)
            'End If
        Else
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtCusUsd_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusUsd.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation

        If CheckRetailPrc() = False Then
            If txtCusUsd.Enabled = True And txtCusUsd.Visible = True Then txtCusUsd.Focus()
        End If

        If Trim(txtCusUsd.Text) = "" Then
            Exit Sub
        End If

        If IsNumeric(CDbl(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text))) = True Then
            '*** Phase 2 comment it
            'CalculatePMU(txtCusUsd)
        Else
            MsgBox("Please input numeric value.")
        End If
    End Sub

    Private Sub txtCusCad_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusCad.GotFocus
        txtCusUsd.SelectAll()
    End Sub

    Private Sub txtCusCad_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCusCad.KeyPress
        If e.KeyChar > Chr(0) Then
            e.KeyChar = Chr(check_numeric_size(txtCusCad.Text, Asc(e.KeyChar), txtCusCad.SelectionStart, 9, 4))
        Else
            e.KeyChar = Chr(0)
        End If
    End Sub

    Private Sub txtCusCad_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCusCad.LostFocus
        Call checkLatestQut()    ' Check Latest Quotation
    End Sub



    Private Sub cmdAss_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdAss.Click
        Dim frm As New QUM00001_1(rs_QUASSINF, txtSeq.Text, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString)

        frm.MdiParent = Me.MdiParent
        frm.Show()

        AddHandler frm.returnSelectedRecords, AddressOf returnSelectedRecordsHandler

        Recordstatus = True
    End Sub

    Private Sub cmdUpdateMO_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdUpdateMO.Click
        bolUPdate_MOQ_MOA = True

        Call updateMOQMOA(False)

        If bolUPdate_MOQ_MOA = True Then
            MsgBox("Update MOQ/MOA Complete!", vbInformation)
            bolLatestQut = True
        End If
    End Sub
    Private Sub cmdUpdItm_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdUpdItm.Click
        Dim rs As New DataSet
        Dim temp_PckCstAmt As String
        Dim temp_ItmCommAmt As String
        Dim temp_cboColCde_SelectedText As String
        Dim temp_cboPcking_SelectedText As String
        Dim tmp_count As Integer
        Dim qutseq As Integer
        Dim gspStr As String

        qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")


        If MsgBox("Are you sure to update this item?", vbQuestion + vbYesNo, "Question") = vbYes Then

            Cursor = Cursors.WaitCursor


            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_list_QUOTNDTL_upditm '" & cboCoCde.Text & "','" & txtQutNo.Text & "','DTL'"
            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cmdUpdate_Click sp_list_QUOTNDTL_upditm :" & rtnStr)
                Exit Sub
            End If

            If rs.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("The price is Up-to-date!")
                Cursor = Cursors.Default

                Exit Sub
            End If




            tmp_count = 0
            For index As Integer = 0 To rs.Tables("RESULT").Rows.Count - 1
                If rs.Tables("RESULT").DefaultView(index)("qud_qutseq").ToString = qutseq Then
                    tmp_count = tmp_count + 1
                End If
            Next
            If tmp_count = 0 Then
                MsgBox("The price is Up-to-date!")

                Cursor = Cursors.Default
                Exit Sub
            End If





            Is_Updating_item = True

            ''check & update
            'txtitmno_press
            temp_PckCstAmt = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper")
            temp_ItmCommAmt = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper")


            '''20130909 
            ''' pack & color 
            temp_cboColCde_SelectedText = cboColCde.Text
            temp_cboPcking_SelectedText = cboPcking.Text


            Call txtItmNo_Press()

            Call display_combo(temp_cboColCde_SelectedText, cboColCde)
            Call cboColCdeClick()
            Call display_combo(temp_cboPcking_SelectedText, cboPcking)
            Call cboPckingClick()

            '''20140102 UPdate sts, CIH & TO dollar
            gspStr = "sp_list_quotation_tbc"
            rtnLong = execute_SQLStatement(gspStr, rs_quotation_list_tbc, rtnStr)

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading  sp_list_quotation_tbc :" & rtnStr)
                Exit Sub
            End If

            For index As Integer = 0 To rs_quotation_list_tbc.Tables("RESULT").Rows.Count - 1

                If Trim(txtQutNo.Text) = rs_quotation_list_tbc.Tables("RESULT").Rows(index)("qud_qutno").ToString And _
                    qutseq = rs_quotation_list_tbc.Tables("RESULT").Rows(index)("qud_qutseq") Then

                    gspStr = "sp_select_QUOTNDTL_tbc '" & _
                    rs_quotation_list_tbc.Tables("RESULT").Rows(index)("qud_qutno").ToString & "'," & _
                    rs_quotation_list_tbc.Tables("RESULT").Rows(index)("qud_qutseq")

                    rtnLong = execute_SQLStatement(gspStr, rs_select_quotation_tbc, rtnStr)

                    If rtnLong <> RC_SUCCESS Then
                        MsgBox("Error on loading  rs_select_quotation_tbc:" & rtnStr)
                        Exit Sub
                    End If

                    gspStr = "sp_select_QUOTNDTL_Vendor '" & "" & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_itmno").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_untcde").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_inrqty").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_mtrqty").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_cus1no").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_cus2no").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_ftyprctrm").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_prctrm").ToString.Trim & "','" & _
                                                            rs_select_quotation_tbc.Tables("RESULT").DefaultView(0)("qud_trantrm").ToString.Trim & "','" & _
                                                            "" & "'"
                    rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF_tbc, rtnStr)
                    gspStr = ""
                    If rtnLong <> RC_SUCCESS Then
                        MsgBox("Error on loading CalculatePrc sp_select_QUOTNDTL_Vendor :" & rtnStr)
                        Exit Sub
                    End If

                    If rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_ftyprc") <> rs_IMVENINF_tbc.Tables("RESULT").Rows(0)("imu_ftyprc") Then

                        '''set TBC => CMP
                        gspStr = "sp_update_quotndtl_tbc " & "'" & rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_qutno").ToString & "'," & rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_qutseq") & ",'" & _
                    gsUsrID & "'"

                        rtnLong = execute_SQLStatement(gspStr, rs_update_quotation_tbc, rtnStr)

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading  sp_update_quotndtl_tbc :" & rtnStr)
                            Exit Sub
                        End If

                        '''update Tentative
                        ''' add 2 filde
                        gspStr = "sp_update_TOORDDTL_tbc '" & _
                            "T" & rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_qutno").ToString & "'," & _
                            rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_qutseq") & "," & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftycst") & "," & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyprc") & "," & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_basprc") & "," & _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp") & ",'" & _
                            gsUsrID & "'"

                        rtnLong = execute_SQLStatement(gspStr, rs_update_quotation_tbc, rtnStr)

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading  sp_update_TOORDDTL_tbc :" & rtnStr)
                            Exit Sub
                        End If


                        gspStr = "sp_update_TOORDHDR_tbc '" & _
    "T" & rs_select_quotation_tbc.Tables("RESULT").Rows(0)("qud_qutno").ToString & "','" & _
    gsUsrID & "'"

                        rtnLong = execute_SQLStatement(gspStr, rs_update_quotation_tbc, rtnStr)

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading  sp_list_quotation_tbc :" & rtnStr)
                            Exit Sub
                        End If



                    End If

                End If ''' same qn same seq
            Next
            '''20140102 UPdate sts, CIH & TO dollar



            '''for check duplicate packing
            Is_Updating_item = False

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper") = temp_PckCstAmt
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper") = temp_ItmCommAmt

            txtPckCstAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper")
            txtItmCommAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper")


            Call calculate_gbPandelCstEmt(qutseq)


            txtMU.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")
            lblMUMin.Text = "(Min " + Format(round(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mumin"), 2), "###,###,##0.00") + "%)"

            txtPckCstAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper")
            txtItmCommAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper")

            txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
            txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
            '''
            txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtPCPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
            txtPCPrc_Text_round_5 = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")




            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If




            'obopacking
            'save

        End If

        Cursor = Cursors.Default

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        item_update_list = item_update_list & qutseq.ToString & ","



        txtDiscnt.Enabled = True
        txtCus1Dp.Enabled = True
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
 
        gbPanelCstEmt.Hide()

        txtRvsDat.Text = Now.ToString("MM/dd/yyyy")





        MsgBox("Item Update Processed. Please 'save' the quotation before closing the screen!")




    End Sub




    ''Private Sub cmdUpdItm_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdUpdItm.Click
    ''    Dim rs As New DataSet

    ''    '' Cursor = Cursors.WaitCursor

    ''    ''check & update
    ''    'tetitmno_press
    ''    'obopacking
    ''    'save


    ''    gsCompany = Trim(cboCoCde.Text)
    ''    Call Update_gs_Value(gsCompany)

    ''    gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
    ''    rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
    ''    gspStr = ""

    ''   '' Cursor = Cursors.Default

    ''    If rtnLong <> RC_SUCCESS Then
    ''        MsgBox("Error on loading cmdUpdItm_Click sp_select_IMBASINF_Q :" & rtnStr)
    ''        Exit Sub
    ''    End If

    ''   '' Cursor = Cursors.WaitCursor

    ''    gsCompany = Trim(cboCoCde.Text)
    ''    Call Update_gs_Value(gsCompany)

    ''    gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
    ''    rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
    ''    gspStr = ""

    ''   '' Cursor = Cursors.Default

    ''    If rtnLong <> RC_SUCCESS Then
    ''        MsgBox("Error on loading cmdUpdItm_Click sp_select_IMCOLINF :" & rtnStr)
    ''        Exit Sub
    ''    End If

    ''   '' Cursor = Cursors.WaitCursor

    ''    gsCompany = Trim(cboCoCde.Text)
    ''    Call Update_gs_Value(gsCompany)

    ''    gspStr = "sp_select_IMPCKINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
    ''    rtnLong = execute_SQLStatement(gspStr, rs_IMPCKINF, rtnStr)
    ''    gspStr = ""

    ''   '' Cursor = Cursors.Default

    ''    If rtnLong <> RC_SUCCESS Then
    ''        MsgBox("Error on loading cmdUpdItm_Click sp_select_IMPCKINF_Q :" & rtnStr)
    ''        Exit Sub
    ''    End If

    ''   '' Cursor = Cursors.WaitCursor

    ''    gsCompany = Trim(cboCoCde.Text)
    ''    Call Update_gs_Value(gsCompany)

    ''    gspStr = "sp_select_IMMATBKD '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
    ''    rtnLong = execute_SQLStatement(gspStr, rs_IMMATBKD, rtnStr)
    ''    gspStr = ""

    ''   '' Cursor = Cursors.Default

    ''    If rtnLong <> RC_SUCCESS Then
    ''        MsgBox("Error on loading cmdUpdItm_Click sp_select_IMMATBKD :" & rtnStr)
    ''        Exit Sub
    ''    End If

    ''   '' Cursor = Cursors.WaitCursor

    ''    gsCompany = Trim(cboCoCde.Text)
    ''    Call Update_gs_Value(gsCompany)

    ''    gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
    ''    rtnLong = execute_SQLStatement(gspStr, rs_IMBOMASS, rtnStr)
    ''    gspStr = ""

    ''   '' Cursor = Cursors.Default

    ''    If rtnLong <> RC_SUCCESS Then
    ''        MsgBox("Error on loading cmdUpdItm_Click sp_select_IMBOMASS_Q :" & rtnStr)
    ''        Exit Sub
    ''    End If

    ''    If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
    ''        Call chkAliasItm()
    ''        MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
    ''        " - Item not found" + Chr(13) + Chr(10) + _
    ''        " - It is a BOM Item" + Chr(13) + Chr(10) + _
    ''        " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
    ''        " - It is held by the system" + Chr(13) + Chr(10) + _
    ''        " - Vendor is not available", vbExclamation, "Warning u")
    ''        ' add for debug
    ''        '*** Phase 2
    ''        'If rbItmNoReal.Checked = True Then
    ''        '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
    ''        '        txtItmNoReal.Focus()
    ''        '    End If
    ''        'ElseIf rbItmNoTmp.Checked = True Then
    ''        '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
    ''        '        txtItmNoTmp.Focus()
    ''        '    End If
    ''        'Else
    ''        '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then
    ''        '        txtItmNoVen.Focus()
    ''        '    End If
    ''        'End If
    ''        Exit Sub
    ''    Else
    ''        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmtyp") = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_typ")
    ''        cboItmSts.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmsts")

    ''        txtCosMth.Text = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth").ToString + " - " + rs_IMBASINF.Tables("RESULT").Rows(0)("ysi_dsc").ToString) = True, _
    ''                             "", rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth").ToString + " - " + rs_IMBASINF.Tables("RESULT").Rows(0)("ysi_dsc").ToString)
    ''        If txtCosMth.Text = " - " Then txtCosMth.Text = ""

    ''        cboVenNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venno")


    ''        txtSubCde.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_subcde")
    ''        '*** show custom vendor
    ''        cboCusVen.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
    ''        cboDV.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
    ''        cboTV.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
    ''        cboFA.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")

    ''        'cboItmNoVen.text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")

    ''        cboVenNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")
    ''        txtSubCde.Text = ""

    ''        txtVenItm.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")
    ''    End If

    ''    If rs_IMCOLINF.Tables("RESULT").Rows.Count = 0 Then
    ''        cboColCde.Items.Clear()
    ''        cboColCde.Text = ""
    ''        cboColCde.Enabled = False
    ''    Else
    ''        cboColCde.Enabled = True
    ''        cboColCde.Items.Clear()
    ''        cboColCde.Text = ""

    ''        For index As Integer = 0 To rs_IMCOLINF.Tables("RESULT").Rows.Count - 1
    ''            cboColCde.Items.Add(rs_IMCOLINF.Tables("RESULT").Rows(index)("icf_colcde").ToString)
    ''        Next
    ''    End If

    ''    If rs_IMPCKINF.Tables("RESULT").Rows.Count = 0 Then
    ''        cboPcking.Enabled = False
    ''    Else
    ''        cboPcking.Enabled = True
    ''        cboPcking.Items.Clear()
    ''        cboPcking.Text = ""

    ''        For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
    ''            cboPcking.Items.Add(rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString + " / " + _
    ''                                rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString + " / " + _
    ''                                rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString)
    ''        Next
    ''    End If

    ''    '*** Component Breakdown
    ''    If rs_IMMATBKD.Tables("RESULT").Rows.Count = 0 Then
    ''        dgMatBkd.DataSource = Nothing

    ''        If isnumeric(txtSeq.Text)  Then
    ''            sFilter = "qcb_qutseq = " & txtSeq.Text
    ''        Else
    ''            sFilter = ""
    ''        End If
    ''        rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter

    ''        If rs_QUCPTBKD.Tables("RESULT").DefaultView.Count > 0 Then
    ''            Dim index As Integer = rs_QUCPTBKD.Tables("RESULT").DefaultView.Count

    ''            While index > 0
    ''                If rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutno").ToString = txtQutNo.Text And _
    ''                    rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutseq").ToString = txtSeq.Text Then
    ''                    rs_QUCPTBKD.Tables("RESULT").DefaultView(0).Delete()
    ''                    index -= 1
    ''                End If
    ''            End While
    ''            rs_QUCPTBKD.Tables("RESULT").AcceptChanges()
    ''        End If
    ''    Else
    ''        dgMatBkd.DataSource = Nothing

    ''        If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
    ''            For index As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1
    ''                If rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_qutno").ToString = txtQutNo.Text And _
    ''                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_qutseq").ToString = txtSeq.Text Then
    ''                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode") = "DEL"
    ''                End If
    ''            Next
    ''        End If

    ''        For index As Integer = 0 To rs_IMMATBKD.Tables("RESULT").Rows.Count - 1
    ''            drNewRow = rs_QUCPTBKD.Tables("RESULT").NewRow
    ''            drNewRow("mode") = "NEW"
    ''            drNewRow("Del") = " "
    ''            drNewRow("upditmdtl") = " "
    ''            drNewRow("updmoqmoa") = " "
    ''            drNewRow("updassbom") = " "
    ''            drNewRow("converttopc") = " "
    ''            drNewRow("qcb_qutno") = txtQutNo.Text
    ''            drNewRow("qcb_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
    ''            drNewRow("qcb_itmno") = txtItmNo.Text
    ''            drNewRow("qcb_cptseq") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_matseq")
    ''            drNewRow("qcb_cpt") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_mat")
    ''            drNewRow("qcb_curcde") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_curcde")
    ''            drNewRow("qcb_cst") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cst")
    ''            drNewRow("qcb_cstpct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cstper")
    ''            drNewRow("qcb_pct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_wgtper")
    ''            rs_QUCPTBKD.Tables("RESULT").Rows.Add(drNewRow)
    ''        Next

    ''        If isnumeric(txtSeq.Text)  Then
    ''            sFilter = "qcb_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
    ''        Else
    ''            sFilter = ""
    ''        End If
    ''        rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter

    ''        dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
    ''        Call Display_Component()
    ''    End If

    ''    '*** aim to disable the color code list for user to select when it is a new format
    ''    If isNewItemFormat(txtItmNo.Text, True) Then
    ''        If rs_IMCOLINF.Tables("RESULT").Rows.Count > 0 Then
    ''            cboColCde.SelectedIndex = 0
    ''            cboColCde.Enabled = False
    ''        End If
    ''    Else
    ''        cboColCde.Enabled = True
    ''    End If

    ''    cboPcking.Enabled = True

    ''    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString = "" And _
    ''        Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString) = 0 And _
    ''        Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString) = 0 Then
    ''        cboPcking.Text = ""
    ''    Else
    ''        cboPcking.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString + " / " + _
    ''                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString + " / " + _
    ''                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString
    ''    End If

    ''    txtDiscnt.Enabled = True
    ''    txtCus1Dp.Enabled = True
    ''    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = ""
    ''    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    ''End Sub

 

    Private Sub dgMatBkd_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgMatBkd.CellClick
        If e.RowIndex >= 0 And e.ColumnIndex = 0 Then
            If rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("Del").ToString = " " Or _
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("Del").ToString = "" Then
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("Del") = "Y"
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("mode") = "DEL"
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_creusr") = "~*DEL*~"
            Else
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("Del") = " "
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                Recordstatus = True
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
            End If

            If rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("mode").ToString <> "NEW" Then
                rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("mode") = "UPD"
                If rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_creusr") <> "~*NEW*~" And rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_creusr") = "~*ADD*~" Then
                    rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_creusr") = "~*UPD*~"
                End If
                Recordstatus = True
            End If
        End If
    End Sub

    Private Sub dgMatBkd_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgMatBkd.CellEndEdit
        If IsNumeric(rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_pct")) = False Then
            MsgBox("Please input numeric value.")
            Exit Sub
        End If

        rs_QUCPTBKD.Tables("RESULT").Rows(e.RowIndex)("qcb_curcde") = IIf(Trim(txtCurCde2.Text) = "", "", Trim(txtCurCde2.Text))

        Call CalculateMatBkd()
    End Sub

    Private Sub dgOthDtl_CancelRowEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.QuestionEventArgs) Handles dgOthDtl.CancelRowEdit

    End Sub

    Private Sub dgOthDtl_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgOthDtl.CellClick
        Dim qutseq As Integer

        Recordstatus = True
        ''))!reset readonly
        Call setStatus_dgOthDtl(sMode)

        If e.RowIndex >= 0 Then
            isSorting = False
            dr = rs_QUOTNDTL.Tables("RESULT").Select("", "qud_qutseq")

            For index As Integer = 0 To dr.Length - 1
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("qud_qutseq") = dr(index)("qud_qutseq") Then
                    sReadingIndexQ = index
                End If
            Next
        Else
            isSorting = True
        End If

        '''***)
        If e.RowIndex >= 0 And e.ColumnIndex = 0 Then
            If dgOthDtl.Columns(e.ColumnIndex).ReadOnly = False Then
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("Del").ToString = "Y" Then
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("Del") = "N"

                    If rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") = "~*UPD*~"
                    End If

                    chkDelete.Checked = False
                Else
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("Del") = "Y"
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("qud_creusr") = "~*DEL*~"

                    chkDelete.Checked = True
                End If
                rs_QUOTNDTL.Tables("RESULT").AcceptChanges()
            End If
        End If


        If e.RowIndex >= 0 And e.ColumnIndex = 2 Then
            If dgOthDtl.Columns(e.ColumnIndex).ReadOnly = False Then
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("upditmdtl").ToString = "Y" Then
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("upditmdtl") = "N"
                Else
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("upditmdtl") = "Y"
                End If
                rs_QUOTNDTL.Tables("RESULT").AcceptChanges()
            End If
        End If

        If e.RowIndex >= 0 And e.ColumnIndex = 3 Then
            If dgOthDtl.Columns(e.ColumnIndex).ReadOnly = False Then
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updmoqmoa").ToString = "Y" Then
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updmoqmoa") = "N"
                Else
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updmoqmoa") = "Y"
                End If
                rs_QUOTNDTL.Tables("RESULT").AcceptChanges()
            End If
        End If

        '''***)
        If e.RowIndex >= 0 And e.ColumnIndex = 4 Then
            If dgOthDtl.Columns(e.ColumnIndex).ReadOnly = False Then
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updassbom").ToString = "Y" Then
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updassbom") = "N"

                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("qud_contopc") = ""
                    If rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") = "~*UPD*~"
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("updassbom") = "Y"

                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("qud_contopc") = "Y"
                    If rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(e.RowIndex).Item("qud_creusr") = "~*UPD*~"
                    End If
                End If
                rs_QUOTNDTL.Tables("RESULT").AcceptChanges()
            End If
        End If


        If e.RowIndex >= 0 And e.ColumnIndex = 5 Then
            If dgOthDtl.Columns(e.ColumnIndex).ReadOnly = False Then
                If rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("converttopc").ToString = "Y" Then
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("converttopc") = "N"
                Else
                    rs_QUOTNDTL.Tables("RESULT").DefaultView(e.RowIndex)("converttopc") = "Y"
                End If
                rs_QUOTNDTL.Tables("RESULT").AcceptChanges()
            End If
        End If

        If dgOthDtl.CurrentCell.ColumnIndex = dgOthDtl_qud_cusven Then

            comboBoxCell(dgOthDtl, "Vendor")

        End If


        ''reset detail page
        qutseq = dgOthDtl.Item(dgOthDtl_qud_qutseq, dgOthDtl.CurrentCell.RowIndex).Value

        For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            ''bug
            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq")) Then

                If qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") Then
                    sReadingIndexQ = i
                End If
            End If

        Next i

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

            '''20140304 may same itmno 
            '            If txtItmNo.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim Then
            txtItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim
            Call display_Detail(qutseq)
            ''Call txtItmNo_Press()

            'End If
        End If



        Call DeleteClickCheck()
    End Sub


   









    Private Function setNewItemFormat(ByVal strItmNo As String) As Boolean
        '*** set 11 digits of new item format when insert new row and update the record
        setNewItemFormat = False

        If isNewItemFormat(strItmNo, True) Then
            MsgBox("Item No. has been added already.", 48, "Warning")
            '*** Phase 2
            'If txtItmNoVen.Text = "" Then
            If txtItmNoVen.Text = "" Then
                'If rbItmNoReal.Checked = True Then
                If txtItmNoReal.Text <> "" Then
                    If txtItmNoReal.Enabled = True Then
                        txtItmNoReal.Text = Microsoft.VisualBasic.Left(txtItmNoReal.Text, 11)
                        cboColCde.Text = ""
                        txtColDsc.Text = ""
                    End If
                    setNewItemFormat = True
                    Exit Function
                Else
                    If txtItmNoTmp.Enabled = True Then
                        txtItmNoTmp.Text = Microsoft.VisualBasic.Left(txtItmNoTmp.Text, 11)
                        cboColCde.Text = ""
                        txtColDsc.Text = ""
                    End If
                    setNewItemFormat = True
                    Exit Function
                End If
            Else
                If txtItmNoVen.Enabled = True Then
                    txtItmNoVen.Text = Microsoft.VisualBasic.Left(txtItmNoVen.Text, 11)
                    txtColCde.Text = ""
                    txtColDsc.Text = ""
                End If
                setNewItemFormat = True
                Exit Function
            End If
        Else
            setNewItemFormat = False
            Exit Function
        End If
    End Function

    Private Function isNewItemFormat(ByVal strItem As String, Optional ByVal bolShow As Boolean = False) As Boolean
        If gsCompanyGroup = "MSG" Then
            isNewItemFormat = False
        Else
            isNewItemFormat = False
            strItem = UCase(strItem)

            If bolShow = True Then
                If Len(strItem) < 11 Then Exit Function
                If InStr(strItem, "-") > 0 Then Exit Function
                If InStr(strItem, "/") > 0 Then Exit Function
                '*** Plant CDTXV
                If Not (UCase(Mid(strItem, 3, 1)) = "A" Or _
                        UCase(Mid(strItem, 3, 1)) = "B" Or _
                        UCase(Mid(strItem, 3, 1)) = "U" Or _
                        UCase(Mid(strItem, 3, 1)) = "C" Or _
                        UCase(Mid(strItem, 3, 1)) = "D" Or _
                        UCase(Mid(strItem, 3, 1)) = "T" Or _
                        UCase(Mid(strItem, 3, 1)) = "X" Or _
                        UCase(Mid(strItem, 3, 1)) = "V") Then Exit Function

                If UCase(Mid(strItem, 7, 2)) = "AS" And _
                    Microsoft.VisualBasic.Right(strItem, 2) <> "00" And _
                    UCase(Mid(strItem, 3, 1)) <> "C" And _
                    UCase(Mid(strItem, 3, 1)) <> "D" Then Exit Function

                If UCase(Mid(strItem, 7, 2)) <> "AS" Then
                    If UCase(Mid(strItem, 3, 1)) = "U" Then
                        Exit Function
                    End If

                    If UCase(Mid(strItem, 3, 1)) = "A" Then

                    End If

                    '*** Plant CDTXV
                    If UCase(Mid(strItem, 3, 1)) = "C" Then

                    End If
                    If UCase(Mid(strItem, 3, 1)) = "D" Then

                    End If
                    If UCase(Mid(strItem, 3, 1)) = "T" Then

                    End If
                    If UCase(Mid(strItem, 3, 1)) = "V" Then

                    End If
                    If UCase(Mid(strItem, 3, 1)) = "X" Then

                    End If

                    If UCase(Mid(strItem, 3, 1)) = "B" Then
                        If (Mid(strItem, 4, 1) >= "0" And Mid(strItem, 4, 1) <= "9") Then
                            If Mid(strItem, 5, 1) >= "0" And Mid(strItem, 5, 1) <= "9" Then
                                If (Mid(strItem, 6, 1) >= "0" And Mid(strItem, 6, 1) <= "9") Then
                                    isNewItemFormat = True
                                    Exit Function
                                Else
                                    Exit Function
                                End If
                            Else
                                Exit Function
                            End If
                        End If

                        If Mid(strItem, 4, 1) >= "A" And Mid(strItem, 4, 1) <= "Z" Then
                            If Mid(strItem, 5, 1) >= "0" And Mid(strItem, 5, 1) <= "9" Then
                                If Mid(strItem, 6, 1) >= "0" And Mid(strItem, 6, 1) <= "9" Then
                                    isNewItemFormat = True
                                    Exit Function
                                Else
                                    Exit Function
                                End If
                            Else
                                Exit Function
                            End If
                        End If
                    End If
                Else
                    Exit Function
                End If
            Else
                If Len(strItem) < 11 Then Exit Function
                If InStr(strItem, "-") > 0 Then Exit Function
                If InStr(strItem, "/") > 0 Then Exit Function
                '*** Plant CDTXV
                If Not (UCase(Mid(strItem, 3, 1)) = "A" Or _
                        UCase(Mid(strItem, 3, 1)) = "B" Or _
                        UCase(Mid(strItem, 3, 1)) = "U" Or _
                        UCase(Mid(strItem, 3, 1)) = "C" Or _
                        UCase(Mid(strItem, 3, 1)) = "D" Or _
                        UCase(Mid(strItem, 3, 1)) = "T" Or _
                        UCase(Mid(strItem, 3, 1)) = "X" Or _
                        UCase(Mid(strItem, 3, 1)) = "V") Then Exit Function
            End If
            isNewItemFormat = True
        End If
    End Function

    Private Function invalid_Header() As Boolean
        '*** Validation
        If cboCus1No.Text = "" And cboCus1No.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Primary Customer must be assigned.")
            cboCus1No.Enabled = True
            If cboCus1No.Enabled And cboCus1No.Visible Then cboCus1No.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        If cboSalRep.Text = "" And cboSalRep.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Sales Rep. must be assigned.")
            cboSalRep.Enabled = True
            If cboSalRep.Enabled And cboSalRep.Visible Then cboSalRep.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        '*** Phase 2
        'If txtDeptH.Text = "" And txtDeptH.Enabled = True Then
        '    btcQUM00001.SelectedIndex = 0
        '    MsgBox("Department must be entered.")
        '    txtDeptH.Enabled = True
        '    If txtDeptH.Enabled And txtDeptH.Visible Then txtDeptH.Focus()
        '    invalid_Header = True
        '    save_ok = False
        '   '' Cursor = Cursors.Default
        '    Exit Function
        'End If

        '*** Phase 2
        If cboYear.Text = "" And cboYear.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Quotation Title - Year, must be assigned.")
            cboYear.Enabled = True
            If cboYear.Enabled And cboYear.Visible Then cboYear.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        '*** Phase 2
        If cboSeason.Text = "" And cboSeason.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Quotation Title - Season, must be assigned.")
            cboSeason.Enabled = True
            If cboSeason.Enabled And cboSeason.Visible Then cboSeason.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        '*** Phase 2
        If txtDesc.Text = "" And txtDesc.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Quotation Title - Project, must be entered.")
            txtDesc.Enabled = True
            If txtDesc.Enabled And txtDesc.Visible Then txtDesc.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        If cboSmpPrd.Text = "" And cboSmpPrd.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Sample Product Term must be assigned, please update Customer Master first.")
            cboSmpPrd.Enabled = True
            If cboSmpPrd.Enabled And cboSmpPrd.Visible Then cboSmpPrd.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If

        If cboSmpFgt.Text = "" And cboSmpFgt.Enabled = True Then
            btcQUM00001.SelectedIndex = 0
            MsgBox("Sample Freight Term must be assigned, please update Customer Master first.")
            cboSmpFgt.Enabled = True
            If cboSmpFgt.Enabled And cboSmpFgt.Visible Then cboSmpFgt.Focus()
            invalid_Header = True
            save_ok = False
           '' Cursor = Cursors.Default
            Exit Function
        End If
    End Function

    Private Function invalid_Detail() As Boolean
        If Trim(txtCus1Dp.Text) = "" Then
            txtCus1Dp.Text = 0
        End If

        '*** Phase 2 comment 2
        'If btcQUM00001.SelectedIndex = 4 Then
        '    If CheckRetailPrc() = False Then
        '        invalid_Detail = True
        '        Exit Function
        '    End If
        'End If

        'Dim blnDoMMChk As Boolean

        'blnDoMMChk = False
        'If Trim(txtQutSts.Text) = "" Then
        '    blnDoMMChk = True
        'Else
        '    If UCase(Microsoft.VisualBasic.Left(txtQutSts.Text, 1)) = "A" Or UCase(Microsoft.VisualBasic.Left(txtQutSts.Text, 1)) = "W" Then
        '        blnDoMMChk = True
        '    Else
        '        blnDoMMChk = False
        '    End If
        'End If

        'If blnDoMMChk = True Then
        '*** Phase 2 comment it
        '*** Check Existence of Special Packaging
        'If rs_QUCSTEMT.Tables.Count > 0 Then
        '    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '            If Trim(LCase(rs_QUCSTEMT.Tables("RESULT").Rows(index)("cce_cedsc").ToString)) = "special packaging cost" And _
        '                (CDbl(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_amt"))) <> 0 Or _
        '                 CDbl(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_percent"))) <> 0) Then
        '                If Trim(txtSpecpck.Text) = "" Then
        '                    invalid_Detail = True
        '                    IsEmptySpecPck = True
        '                    Exit Function
        '                End If
        '            End If
        '        Next
        '    End If
        'End If

        ''*** Check percentage of component breakdown
        'Dim dblTtlCstPct As Double
        'Dim dblTtlPct As Double
        'Dim flgHasCptBkd As Boolean

        'flgHasCptBkd = False
        'dblTtlCstPct = 0
        'dblTtlPct = 0

        'If rs_QUCPTBKD.Tables.Count > 0 Then
        '    If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1
        '            If rs_QUCPTBKD.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
        '                dblTtlCstPct = dblTtlCstPct + CDbl(IIf(IsDBNull(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")) = True, 0, rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")))
        '                dblTtlPct = dblTtlPct + CDbl(IIf(IsDBNull(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct")) = True, 0, rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct")))
        '                flgHasCptBkd = True
        '            End If
        '        Next

        '        If dblTtlCstPct <> 100 And flgHasCptBkd = True Then
        '            invalid_Detail = True
        '            btcQUM00001.SelectedIndex = 1
        '            dgMatBkd.Focus()
        '            MsgBox("The total of Cost Percentage is not equal to 100.", vbOKOnly, "Component Breakdown")
        '            Exit Function
        '        End If

        '        If dblTtlPct <> 100 And flgHasCptBkd = True Then
        '            invalid_Detail = True
        '            btcQUM00001.SelectedIndex = 1
        '            dgMatBkd.Focus()
        '            MsgBox("The total of Weight Percentage is not equal to 100.", vbOKOnly, "Component Breakdown")
        '            Exit Function
        '        End If
        '    End If
        'End If

        '*** Phase 2 comment it
        'Dim dblDp As Double

        'If Trim(txtCus2Dp.Text) = "" Then
        '    txtCus2Dp.Text = "0"
        'End If

        'If Trim(txtCus1Dp.Text) = "" Then
        '    txtCus1Dp.Text = "0"
        'End If

        'If CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) <> 0 Then
        '    dblDp = CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text))
        'Else
        '    dblDp = CDbl(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text))
        'End If

        'If rs_QUELCDTL.Tables.Count > 0 Then
        '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
        '            '*** Check Duty Rate
        '            If rs_QUELCDTL.Tables("RESULT").Rows(index)("ced_cedsc").ToString = "Duty" And Trim(cboHrmCde.Text) = "" Then
        '                IsEmptyDuty = True
        '                invalid_Detail = True
        '                Exit Function
        '            End If

        '            '*** Check Transportation Fee
        '            If Trim(txtCft.Text) = "" Then
        '                txtCft.Text = "0"
        '            End If

        '            If dblDp <> 0 And CDbl(IIf(txtCft.Text = "", 0, txtCft.Text)) > 0 And _
        '                rs_QUELCDTL.Tables("RESULT").Rows(index)("ced_cedsc").ToString = "Transportation" And _
        '                rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_amt") = 0 Then
        '                invalid_Detail = True
        '                MsgBox("The Transportation is 0.", vbOKOnly, "ELC")
        '                Exit Function
        '            End If
        '        Next
        '    End If
        'End If
        'End If

        'blnDoMMChk = False

        '*** Check CFT and Mtr (Inch)
        Dim dblTmp As Double

        If Trim(txtMtrdin.Text) = "" Then
            txtMtrdin.Text = "0"
        End If

        If Trim(txtMtrwin.Text) = "" Then
            txtMtrwin.Text = "0"
        End If

        If Trim(txtMtrhin.Text) = "" Then
            txtMtrhin.Text = "0"
        End If

        If txtMtrdin.Text <> "0" And txtMtrwin.Text <> "0" And txtMtrhin.Text <> "0" Then
            dblTmp = (CDbl(IIf(txtMtrdin.Text = "", 0, txtMtrdin.Text)) * CDbl(IIf(txtMtrwin.Text = "", 0, txtMtrwin.Text)) * CDbl(IIf(txtMtrhin.Text = "", 0, txtMtrhin.Text))) / 1728

            If Trim(txtCft.Text) = "" Then
                txtCft.Text = "0"
            End If

            If dblTmp <> 0 And CDbl(IIf(txtCft.Text = "", 0, txtCft.Text)) <> 0 Then
                dblTmp = (dblTmp - CDbl(IIf(txtCft.Text = "", 0, txtCft.Text))) / CDbl(IIf(txtCft.Text = "", 0, txtCft.Text))

                If dblTmp > 0.03 Then
                    MsgBox("Master (in) LxWxH is 3% over than CFT.")
                ElseIf dblTmp < -0.03 Then
                    MsgBox("Master (in) LxWxH is 3% less than CFT.")
                End If
            End If
        End If

        If txtItmNo.Text = "" Then
            btcQUM00001.SelectedIndex = 1

            '*** Phase 2
            'If rbItmNoReal.Checked Then
            '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
            '        txtItmNoReal.Focus()
            '    End If
            'ElseIf txtItmNoTmp.Text <> "" Then
            '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
            '        txtItmNoTmp.Focus()
            '    End If
            'Else
            '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then
            '        txtItmNoVen.Focus()
            '    End If
            'End If
            MsgBox("Please input Item No.")

            txtItmNoReal.Enabled = True
            txtItmNoTmp.Enabled = True
            txtItmNoVen.Enabled = True

            txtItmNoReal.Focus()


            invalid_Detail = True
            Exit Function
        End If

        If cboVenNo.Text = "" Then

            'temp hard code -s
            cboVenNo.Text = "華泰 - 1"
            Exit Function
            'temp hard code -e

            btcQUM00001.SelectedIndex = 1
            MsgBox("No Vendor is available for this Item. Please update Item Master first.")
            invalid_Detail = True
            Exit Function
        End If

        If CDec(IIf(txtDiscnt.Text = "", 0, txtDiscnt.Text)) > 100 Then
            '*** Phase 2
            btcQUM00001.SelectedIndex = 1
            'btcQUM00001.SelectedIndex = 2

            Discount_Flag = True
            txtDiscnt.Text = "0"
            MsgBox("Discount cannot large than 100%.")
            invalid_Detail = True
            txtDiscnt.Enabled = True
            If txtDiscnt.Enabled And txtDiscnt.Visible Then txtDiscnt.Focus()
            Exit Function
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
            btcQUM00001.SelectedIndex = 1
            MsgBox("This Quotation has no item record, cannot save.")
            invalid_Detail = True
            save_ok = False
            Exit Function
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 And chkDelete.Checked = True Then
            btcQUM00001.SelectedIndex = 1
            MsgBox("This Quotation only has one item record, cannot delete.")
            invalid_Detail = True
            save_ok = False
            Exit Function
        End If

        '*** Phase 2 comment it
        'If txtDiscnt.Text <> "" Then
        '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
        '        Call GetApprPert()
        '    End If

        '    If ((CDec(IIf(txtDiscnt.Text = "", 0, txtDiscnt.Text)) > CDbl(strApprMax)) Or (CDec(IIf(txtDiscnt.Text = "", 0, txtDiscnt.Text)) < CDbl(strApprMin))) And _
        '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" And Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "W" Then
        '        MsgBox("Discount is over " + strApprMax + "% or less " + strApprMin + "%, the whole Quotation after save will be freeze and in 'Wait for Approve' status. It needs authorized people to approve and release it.")
        '        cusdp = False
        '    End If
        'End If

        'If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp").ToString = "I" Or _
        '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp").ToString = "J" Then
        '    If txtCus1Dp.Text <> "" Then
        '        'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) And _
        '        If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")) And _
        '            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" Then
        '            MsgBox("Discounted Price is less than Basic Price, the whole Quotation after save will be freeze and in 'Wait for Approve' status. It needs authorized people to approve and release it")
        '            Exit Function
        '        End If
        '    End If
        '    '*** Check logic to check discount price less than fty price/basic price
        'ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp").ToString = "E" Then
        '    If txtCurCde2.Text <> txtFCurCde.Text And _
        '        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" And _
        '        txtFCurCde.Text <> "" Then
        '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
        '        If txtCurCde2.Text = dr(0)("ysi_cde") Then
        '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtFCurCde.Text & "'")
        '            'ftyprc = Format(roundup(Val(txtFtyPrc.Text) * dr(0)("ysi_selrat")), "########0.0000")
        '            ftyprc = Format(round(Val(txtFtyPrc.Text) * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
        '        Else
        '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
        '            'ftyprc = Format(roundup(Val(txtFtyPrc.Text) / dr(0)("ysi_selrat")), "########0.0000")
        '            ftyprc = Format(round(Val(txtFtyPrc.Text) / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
        '        End If
        '    Else
        '        ftyprc = Format(Val(txtFtyPrc.Text), "########0.0000")
        '    End If

        '    If txtCus1Dp.Text <> "" Then
        '        If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < ftyprc And _
        '            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" And _
        '            Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "W" Then
        '            MsgBox("Discounted Price is less than Factory Price, the whole Quotation after save will be freeze and in 'Wait for Approve' status. It needs authorized people to approve and release it")
        '            Exit Function
        '        End If
        '    End If
        'Else
        '    If txtCus1Dp.Text <> "" Then
        '        'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc").ToString)) And _
        '        If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc").ToString) And _
        '            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" And _
        '            Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "W" Then
        '            MsgBox("Discounted Price is less than Basic Price, the whole Quotation after save will be freeze and in 'Wait for Approve' status. It needs authorized people to approve and release it")
        '            Exit Function
        '        End If
        '    End If
        'End If

        If Trim(txtGrswgt.Text) = "" Then
            txtGrswgt.Text = "0"
        End If

        If Trim(txtNetwgt.Text) = "" Then
            txtNetwgt.Text = "0"
        End If

        If CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) >= 1000 Then
            MsgBox("Gross weight should be less than 1000!")
            txtGrswgt.Text = "0"
            invalid_Detail = True
            Exit Function
        End If

        If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) >= 1000 Then
            MsgBox("Net weight should not less than 1000!")
            txtNetwgt.Text = "0"
            invalid_Detail = True
            Exit Function
        End If

        If CDbl(IIf(txtNetwgt.Text = "", 0, txtNetwgt.Text)) > CDbl(IIf(txtGrswgt.Text = "", 0, txtGrswgt.Text)) Then
            MsgBox("Gross weight should not be smaller than net weight!")
            invalid_Detail = True
            Exit Function
        End If
    End Function

    Private Sub check_update_Detail()
        Dim tbm As String

        ''bug
        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString.Trim <> "NEW" Then
                    If txtDept.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dept").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(chkFtyTmpItm.Checked = True, "Y", "") <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftytmpitm").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    '*** Phase 2
                    If chkApproveDtl.Enabled = True Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                            If IIf(chkApproveDtl.Checked = True, "Y", "N") <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString.Trim Then
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                                Recordstatus = True
                                Exit Sub
                            End If
                        End If
                    End If

                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                        If txtItmNo.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    '*** Phase 2 comment it
                    'If chkTBM.Checked = False Then
                    '    tbm = "N"
                    'Else
                    '    tbm = "Y"
                    'End If

                    'If tbm <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tbm").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If
                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                        If txtItmDsc.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmdsc").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                        If IIf(cboCusals.Text.Trim = "", "", cboCusals.Text.Trim) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusstyno").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

                        If txtCusItm.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusitm").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    If IIf(txtUPC.Text.Trim = "", "", txtUPC.Text.Trim) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_upc").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtIMRmk.Text.Trim = "", "", txtIMRmk.Text.Trim) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_imrmk").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtNote.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_note").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboColCde.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtColDsc.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtCusCol.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscol").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboUM.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtInrQty.Text.Trim = "", 0, txtInrQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtMtrQty.Text.Trim = "", 0, txtMtrQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCft.Text.Trim = "", 0, txtCft.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    '*** check factory price term
                    If cboFtyPrcTrm.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboDtlPrcTrm.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    '*** Phase 2
                    If cboTranTrm.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtUMFtr.Text.Trim = "", 1, txtUMFtr.Text.Trim) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_conftr").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrdin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrwin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrhin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrdin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrdin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrwin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrwin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrhin.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrhin")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrdcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrwcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtInrhcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrdcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrdcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrwcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrwcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtMtrhcm.Text), "######0.####") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_Mtrhcm")), "######0.####") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtGrswgt.Text), "##0.###") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grswgt")), "##0.###") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtNetwgt.Text), "##0.###") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_netwgt")), "##0.###") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtPckItr.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckitr").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtStkQty.Text.Trim = "", 0, txtStkQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_stkqty").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCusQty.Text.Trim = "", 0, txtCusQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusqty").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtSmpUnt.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpunt").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtSmpQty.Text.Trim = "", 0, txtSmpQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpqty").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtSmpPrc.Text.Trim = "", 0, txtSmpPrc.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpprc").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    'If IIf(txtTOOrdQty.Text.Trim = "", 0, txtTOOrdQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toordqty").ToString.Trim) Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If txtTOUM.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_topckunt").ToString.Trim Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If IIf(txtTOInrQty.Text.Trim = "", 0, txtTOInrQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_toinrqty").ToString.Trim) Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If IIf(txtTOMtrQty.Text.Trim = "", 0, txtTOMtrQty.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tomtrqty").ToString.Trim) Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If txtTOCusPoNo.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tocuspono").ToString.Trim Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If dtpTORcvDat.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_torcvdat").ToString.Trim Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If dtpTO1ShipDat.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_tofirstshipdat").ToString.Trim Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    '*** Cater Original MOQ/MOA value changed
                    If IIf(ORI_MOA = "", 0, ORI_MOA) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoa").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(ORI_MOQ = "", 0, ORI_MOQ) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_orgmoq").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(optMOA.Checked = True, "A", IIf(optMOQ.Checked = True, "Q", "")) <> Trim(IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moflag").ToString.Trim), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moflag").ToString.Trim)) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtMoq.Text.Trim = "", 0, txtMoq.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Trim(Replace(lblCurrMOQ.Text.Trim, "=", "")) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moqunttyp").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtCurCde1.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_curcde").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtMoa.Text.Trim = "", 0, txtMoa.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    Dim gmmu As String = ""

                    If cboCus2No.Text <> "" Then
                        If optGM.Checked = True Then
                            gmmu = "GM"
                        Else
                            gmmu = "MU"
                        End If
                    End If

                    If gmmu <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prcsec").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtGrsMgn.Text.Trim = "", 0, txtGrsMgn.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grsmgn").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    Dim onetim As String = ""

                    If optOneTimY.Checked = True Then
                        onetim = "Y"
                    Else
                        onetim = "N"
                    End If

                    If onetim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_onetim").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtDiscnt.Text.Trim = "", 0, txtDiscnt.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_discnt").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCus1Sp.Text.Trim = "", 0, txtCus1Sp.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCus2Sp.Text.Trim = "", 0, txtCus2Sp.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCus1Dp.Text.Trim = "", 0, txtCus1Dp.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCus2Dp.Text.Trim = "", 0, txtCus2Dp.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If Format(Val(txtPCPrc.Text.Trim), "###,###,##0.0000") <> Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pcprc").ToString.Trim), "###,###,##0.0000") Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboVenNo.Text.Trim <> "" And InStr(cboVenNo.Text.Trim, " - ") > 1 Then
                        If cboVenNo.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    '*** check Custom Vendor No and Custom Sub Code
                    If cboCusVen.Text.Trim <> "" And InStr(cboCusVen.Text.Trim, " - ") > 1 Then
                        If cboCusVen.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If
                    'need check other vendor?


                    If txtCusSub.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cussub").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If txtVenItm.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venitm").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtFtyPrc.Text.Trim = "", 0, txtFtyPrc.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtFtyCst.Text.Trim = "", 0, txtFtyCst.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(chkPC.Checked = True, "Y", "") <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If InStr(cboHrmCde.Text.Trim, " - ") > 0 Then
                        If Microsoft.VisualBasic.Left(cboHrmCde.Text.Trim, InStr(cboHrmCde.Text.Trim, " - ") - 1) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    Else
                        If cboHrmCde.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde").ToString.Trim Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            Recordstatus = True
                            Exit Sub
                        End If
                    End If

                    If IIf(txtDtyRat.Text.Trim = "", 0, txtDtyRat.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dtyrat").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboCusUsdCurr.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususdcur").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCusUsd.Text.Trim = "", 0, txtCusUsd.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If cboCusUsdCurr.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscadcur").ToString.Trim Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    If IIf(txtCusCad.Text.Trim = "", 0, txtCusCad.Text.Trim) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad").ToString.Trim) Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        Recordstatus = True
                        Exit Sub
                    End If

                    '*** Phase 2 comment it
                    'If IIf(cboRndSts.Text = "", "", cboRndSts.Text) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_rndsts").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If txtHstRef.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hstref").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If txtSubCde.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_subcde").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If txtSpecpck.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_specpck").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If

                    'If IIf(cboCustItmCat.Text = "", "", cboCustItmCat.Text) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_custitmcat").ToString Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    '    Recordstatus = True
                    '    Exit Sub
                    'End If
                Else
                    Recordstatus = True
                End If
            End If
        End If
    End Sub

    Private Function not_exist_ITEM() As Boolean
        '*** To check the item no which have space only
        If Trim(txtItmNo.Text) = "" Then
            not_exist_ITEM = True
            Exit Function
        End If

        If txtItmNo.Text <> "" And txtItmNo.Enabled = True Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString = txtItmNo.Text Then

                Else
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno") = txtItmNo.Text
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
                        'txtHstRef.Text = ""
                        txtInrQty.Text = ""
                        txtMtrQty.Text = ""
                        txtPeriod.Text = ""
                        'txtQutDat.Text = ""
                        txtCft.Text = ""
                        txtMoa.Text = ""
                        txtMoq.Text = ""
                        '*** reset Original MOQ/MOA
                        ORI_MOQ = "0"
                        ORI_MOA = "0"
                        ORI_MOFLAG = ""
                        txtMoq.Text = ""
                        txtMoa.Text = ""
                        optMOQ.Checked = False
                        optMOA.Checked = False

                        cboUM.Text = ""
                        txtCus1Sp.Text = ""
                        txtCus1SpP.Text = ""

                        cboDtlPrcTrm.Text = ""
                        cboFtyPrcTrm.Text = ""
                        '*** Phase 2
                        cboTranTrm.Text = ""

                        txtCus2Sp.Text = ""
                        txtCus1Dp.Text = ""
                        txtCus1DpP.Text = ""
                        txtCus2Dp.Text = ""
                        '                        cboVenNo.Items.Clear()
                        cboVenNo.Text = ""
                        '                       cboCusVen.Items.Clear()  '*** clear Cust Ven Combo
                        cboCusVen.Text = ""
                        '                      cboDV.Items.Clear()  '*** clear Cust Ven Combo
                        cboDV.Text = ""
                        '                     cboTV.Items.Clear()  '*** clear Cust Ven Combo
                        cboTV.Text = ""
                        '                   cboFA.Items.Clear()  '*** clear Cust Ven Combo
                        cboFA.Text = ""
                        ' cboItmNoVen.Items.Clear()  '*** clear Cust Ven Combo
                        cboItmNoVen.text = ""

                        txtCusSub.Text = ""
                        txtSubCde.Text = ""
                        txtVenItm.Text = ""
                        txtFtyPrc.Text = ""
                        txtFtyCst.Text = ""
                    End If
                End If
            End If

           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading not_exist_ITEM sp_select_IMBASINF_Q :" & rtnStr)
                Exit Function
            End If

            If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
                '************************************* Check Item is Alias Item **************************
               '' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_IMBASINF_Q_A '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
                gspStr = ""

               '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading not_exist_ITEM sp_select_IMBASINF_Q_A :" & rtnStr)
                    Exit Function
                End If

                If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
                    not_exist_ITEM = True
                Else
                    If rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_itmsts") = "INC" Then
                        not_exist_ITEM = True
                    Else
                        not_exist_ITEM = False
                        Alias_itm = True

                    End If

                End If
            Else
                not_exist_ITEM = False
            End If
        End If
    End Function



    



    Private Sub SetHdrYear()
        cboYear.Items.Clear()
        cboYear.Text = ""
        cboYear.Items.Add("")
        cboYear.Items.Add(Today.Year)
        cboYear.Items.Add(Today.Year + 1)
        cboYear.Items.Add(Today.Year + 2)
        cboYear.Items.Add(Today.Year + 3)
    End Sub
   

    Private Sub SetHdrSeason()
        rs_Season.Tables.Clear()

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_SYSETINF '" & cboCoCde.Text & "','19'"
        rtnLong = execute_SQLStatement(gspStr, rs_Season, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading SetHdrSeason sp_select_SYSETINF :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        cboSeason.Items.Clear()
        cboSeason.Text = ""
        cboSeason.Items.Add("")
        If rs_Season.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_Season.Tables("RESULT").Rows.Count - 1
                cboSeason.Items.Add(rs_Season.Tables("RESULT").Rows(index)("ysi_dsc").ToString())
            Next
        End If
    End Sub

    Private Sub cboCus1NoClick()
        If cboCus1No.Text <> "" And Validate() = True Then
            cboCus2No.Items.Clear()
            cboCus2No.Text = ""
            txtCus2Ad.Text = ""
            txtCus2St.Text = ""
            txtCus2Cy.Text = ""
            txtCus2Zp.Text = ""
            cboCus2Cp.Items.Clear()
            cboCus2Cp.Text = ""
            optActive.Checked = False
            optPassive.Checked = False
            cboCusAgt.Items.Clear()
            cboCusAgt.Text = ""
            '*** Phase 2
            cboSalDiv.Items.Clear()
            cboSalDiv.Text = ""

            cboSalRep.Items.Clear()
            cboSalRep.Text = ""
            cboSmpPrd.Items.Clear()
            cboSmpPrd.Text = ""
            cboSmpFgt.Items.Clear()
            cboSmpFgt.Text = ""
            txtPrcTrm.Text = ""
            txtPayTrm.Text = ""
            txtCurCde.Text = ""
            If InStr(cboCus1No.Text, " - ") - 1 >= 0 Then
                dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "'")
            End If

            txtCus1Ad.Text = dr(0)("cci_cntadr").ToString
            txtCus1St.Text = dr(0)("cci_cntstt").ToString
            txtCus1Cy.Text = dr(0)("cci_cntcty").ToString
            txtCus1Zp.Text = dr(0)("cci_cntpst").ToString
            txtPrcTrm.Text = dr(0)("prctrm").ToString
            txtPayTrm.Text = dr(0)("paytrm").ToString
            cboSmpPrd.Text = dr(0)("smpprd").ToString
            cboSmpFgt.Text = dr(0)("smpfgt").ToString
            txtCurCde.Text = dr(0)("curcde").ToString
            txtCurCde1.Text = dr(0)("cpi_curcde").ToString
            '*** set enable of txtCurrMOQ
            txtCurrMOQ.Text = dr(0)("cpi_curcde").ToString
            txtCurCde2.Text = dr(0)("cpi_curcde").ToString
            txtCurCde3.Text = dr(0)("cpi_curcde").ToString
            txtCurCde7.Text = dr(0)("cpi_curcde").ToString
            '*** Phase 2
            lblPckCstAmt.Text = "Amt (" & txtCurCde2.Text & ")"
            lblItmCommAmt.Text = "Amt (" & txtCurCde2.Text & ")"

            txtPCPrcCur.Text = dr(0)("cpi_curcde").ToString

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count <> 0 Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("qud_curcde") = dr(0)("cpi_curcde").ToString
                End If
            End If

            Dim srname As String
            srname = dr(0).Item("cbi_srname")

            'modify
            If rs_CUBASINF_P.Tables("RESULT").Columns.Contains("cbi_cugrptyp_int") And rs_CUBASINF_P.Tables("RESULT").Columns.Contains("cbi_cugrptyp_ext") Then 'bug
                If dr(0)("cbi_cugrptyp_int").ToString.Trim <> "" Or dr(0)("cbi_cugrptyp_ext").ToString.Trim <> "" Then
                    display_combo(dr(0)("cbi_cugrptyp_int").ToString.Trim, cboCus1CgInt)
                    display_combo(dr(0)("cbi_cugrptyp_ext").ToString.Trim, cboCus1CgExt)
                End If
            Else
                cboCus1CgInt.Text = ""
                cboCus1CgExt.Text = ""
            End If

            cboCus1Cp.Items.Clear()
            cboCus1Cp.Text = ""

            '*** Contact Person for Primary Customer
            '' Cursor = Cursors.WaitCursor
            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)
            '1
            gspStr = "sp_list_CUCNTINF '','" & Replace(cboCus1No.Text, "'", "''") & "','C'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUCNTINF_C, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading QUM00001 sp_list_CUCNTINF_C :" & rtnStr)
                Exit Sub
            End If

            'If rs_CUCNTINF_C.Tables("RESULT").Rows.Count > 0 Then
            '    cboCus1Cp.Items.Add(rs_CUCNTINF_C.Tables("RESULT").Rows(0).Item("cci_cntctp").ToString.Trim)
            '    cboCus1Cp.Text = rs_CUCNTINF_C.Tables("RESULT").Rows(0).Item("cci_cntctp").ToString.Trim
            'End If

            If rs_CUCNTINF_C.Tables("RESULT").Rows.Count > 0 Then
                Dim dr() As DataRow = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'BUYR'")
                If dr.Length = 0 Then
                    dr = Nothing
                    dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'SALE'")
                    If dr.Length = 0 Then
                        dr = Nothing
                        dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'SALE'")
                        If dr.Length = 0 Then
                            dr = Nothing
                            dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'MAGT'")
                            If dr.Length = 0 Then
                                dr = Nothing
                                dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y'")
                                If dr.Length > 0 Then
                                    cboCus1Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                                    display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus1Cp)
                                End If
                            Else
                                cboCus1Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                                display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus1Cp)
                            End If
                        Else
                            cboCus1Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                            display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus1Cp)
                        End If
                    Else
                        cboCus1Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                        display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus1Cp)
                    End If
                Else
                    cboCus1Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                    display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus1Cp)
                End If
            End If


            '2
            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','Contact Person'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CP, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus1NoClick sp_select_CUBASINF_Q 1 :" & rtnStr)
                '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_CUBASINF_CP.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboCus1Cp.Enabled = False
            Else
                cboCus1Cp.Enabled = True
                'cboCus1Cp.Items.Clear()  'see1
                'cboCus1Cp.Text = ""     'see1
                For index As Integer = 0 To rs_CUBASINF_CP.Tables("RESULT").Rows.Count - 1
                    If Not (cboCus1Cp.Text = rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString.Trim) Then  'see 1
                        cboCus1Cp.Items.Add(rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString)
                    End If
                Next

                dr = rs_CUBASINF_CP.Tables("RESULT").Select("buyrY = 'BUYR - Y'")
                If dr.Length > 0 Then
                    'cboCus1Cp.Text = dr(0)("cci_cntctp")
                End If
            End If

            '*** Secondary Customer for Primary Customer
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','Secondary'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_S, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus1NoClick sp_select_CUBASINF_Q 2 :" & rtnStr)
                '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_CUBASINF_S.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboCus2No.Enabled = False
                cboCus2Cp.Enabled = False
            Else
                cboCus2No.Enabled = True
                cboCus2No.Items.Clear()
                cboCus2No.Text = ""

                If Add_flag = True Then
                    dr = rs_CUBASINF_S.Tables("RESULT").Select("csc_seccus >= 60000")
                End If

                If Not dr Is Nothing Then
                    'possible bug ?
                    'If dr.Length > 1 Then
                    If dr.Length > 0 Then
                        For index As Integer = 0 To dr.Length - 1
                            cboCus2No.Items.Add(dr(index)("csc_seccus").ToString + " - " + dr(index)("cbi_cussna").ToString)
                        Next
                    End If
                End If
            End If

            '*** Agent for Primary Customer
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','Agent'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_A, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus1NoClick sp_select_CUBASINF_Q 3 :" & rtnStr)
                '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_CUBASINF_A.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboCusAgt.Enabled = False
            Else
                cboCusAgt.Enabled = True
                cboCusAgt.Items.Clear()
                cboCusAgt.Text = ""
                For index As Integer = 0 To rs_CUBASINF_A.Tables("RESULT").Rows.Count - 1
                    cboCusAgt.Items.Add(rs_CUBASINF_A.Tables("RESULT").Rows(index)("cai_cusagt").ToString + " - " + rs_CUBASINF_A.Tables("RESULT").Rows(index)("yai_stnam").ToString)
                Next

                dr = rs_CUBASINF_A.Tables("RESULT").Select("cai_cusdef = 'Y'")
                If dr.Length > 0 Then
                    cboCusAgt.Text = dr(0)("cai_cusagt").ToString + " - " + dr(0)("yai_stnam").ToString
                End If
            End If

            dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "'")

            '*** Phase 2
            '*** Sales Division, Team, & Sales Rep. for Primary Customer
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_list_SYSALREL '" & cboCoCde.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_SYSALREL, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus1NoClick sp_list_SYSALREL :" & rtnStr)
                '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_SYSALREL.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboSalDiv.Enabled = False
                cboSalDiv.Items.Clear()
                cboSalDiv.Text = ""

                cboSalRep.Enabled = False
                cboSalRep.Items.Clear()
                cboSalRep.Text = ""
            Else
                sFilter = "ssr_saltem = " & "'" & dr(0)("cbi_saltem").ToString.Trim & "'"
                rs_SYSALREL.Tables("RESULT").DefaultView.RowFilter = sFilter
                rs_SYSALREL.Tables("RESULT").DefaultView.Sort = "ssr_saldiv, ssr_saltem"
                sFilter = ""

                If rs_SYSALREL.Tables("RESULT").DefaultView.Count = 0 Then
                    cboSalDiv.Enabled = False
                    cboSalDiv.Items.Clear()
                    cboSalDiv.Text = ""

                    cboSalRep.Enabled = False
                    cboSalRep.Items.Clear()
                    cboSalRep.Text = ""
                Else

                    cboSalDiv.Enabled = True
                    cboSalDiv.Items.Clear()
                    cboSalDiv.Text = ""

                    Dim sTmpDiv, sTmpTeam As String

                    sTmpDiv = rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_saldiv").ToString.Trim
                    sTmpTeam = rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_saltem").ToString.Trim

                    cboSalDiv.Items.Add("")
                    cboSalDiv.Items.Add("Division " & sTmpDiv & " (Team " & sTmpTeam & ")")

                    If rs_SYSALREL.Tables("RESULT").DefaultView.Count > 1 Then
                        For index As Integer = 1 To rs_SYSALREL.Tables("RESULT").DefaultView.Count - 1
                            If sTmpDiv <> rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saldiv").ToString.Trim Or _
                                sTmpTeam <> rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saltem").ToString.Trim Then

                                sTmpDiv = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saldiv").ToString.Trim
                                sTmpTeam = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_saltem").ToString.Trim

                                cboSalDiv.Items.Add("Division " & sTmpDiv & " (Team " & sTmpTeam & ")")
                            End If
                        Next

                        display_combo("Division " & sTmpDiv & " (Team " & sTmpTeam & ")", cboSalDiv)
                    End If

                    '        'Modify 2013
                    cboSalDiv.Enabled = False
                    cboSalRep.Enabled = True
                    cboSalRep.Items.Clear()
                    cboSalRep.Text = ""

                    Dim usrname As String

                    cboSalRep.Items.Add("")
                    For index As Integer = 0 To rs_SYSALREL.Tables("RESULT").DefaultView.Count - 1
                        cboSalRep.Items.Add(rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_usrnam").ToString.Trim & " (" & _
                                            rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_salrep").ToString.Trim & ")")
                        If srname = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_salrep").ToString.Trim Then
                            usrname = rs_SYSALREL.Tables("RESULT").DefaultView(index)("ssr_usrnam").ToString.Trim
                        End If
                    Next

                    sFilter = "ssr_saltem = " & "'" & dr(0)("cbi_saltem").ToString.Trim & "' and " & "ssr_default = 'Y'"
                    rs_SYSALREL.Tables("RESULT").DefaultView.RowFilter = sFilter
                    '                    sFilter = ""

                    If srname <> "" Then
                        display_combo(usrname & " (" & srname & ")", cboSalRep)
                    Else
                        If rs_SYSALREL.Tables("RESULT").DefaultView.Count > 0 Then
                            display_combo(rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_usrnam").ToString.Trim & " (" & _
                                                rs_SYSALREL.Tables("RESULT").DefaultView(0)("ssr_salrep").ToString.Trim & ")", cboSalRep)
                        End If
                    End If
                End If
            End If


            '''III
            ''' 
            gbShipdate.Enabled = True

            txtHDRFtyShpDateStr.Enabled = True
            txtHDRFtyShpDateEnd.Enabled = True
            txtHDRCustShpDateStr.Enabled = True
            txtHDRCustShpDateEnd.Enabled = True


            Call format_cboThreeTerms()

            '*** Phase 2 comment it
            '*** Sales Rep for Primary Customer
            'Cursor = Cursors.WaitCursor

            'gsCompany = Trim(cboCoCde.Text)
            'Call Update_gs_Value(gsCompany)

            'gspStr = "sp_select_CUBASINF_SR '" & cboCoCde.Text & "','" & dr(0)("cbi_salrep").ToString & "','" & gsUsrID & "'"
            'rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_SR, rtnStr)
            'gspStr = ""

            'Cursor = Cursors.Default

            'If rtnLong <> RC_SUCCESS Then
            '    MsgBox("Error on loading cboCus1NoClick sp_select_CUBASINF_SR :" & rtnStr)
            '   '' Cursor = Cursors.Default
            '    Exit Sub
            'End If

            'If rs_CUBASINF_SR.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
            '    cboSalRep.Enabled = False
            'Else
            '    cboSalRep.Enabled = True
            '    cboSalRep.Items.Clear()
            '    cboSalRep.Text = ""
            '    cboSalRep.Items.Add("")
            '    For index As Integer = 0 To rs_CUBASINF_SR.Tables("RESULT").Rows.Count - 1
            '        cboSalRep.Items.Add(rs_CUBASINF_SR.Tables("RESULT").Rows(index)("dsc").ToString)
            '    Next

            '    dr = rs_CUBASINF_SR.Tables("RESULT").Select("ysr_code1 = " & "'" & dr(0)("cbi_salrep").ToString & "'")
            '    If dr.Length > 0 Then
            '        cboSalRep.Text = dr(0)("dsc").ToString
            '    End If
            'End If

            '*** Currency Rate
            '*** For multi currency, assume IM Basic Price is USD
            strCurExRat = "0"

            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUBASINF_Curex '" & cboCoCde.Text & "','','0','','N'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CR, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus1NoClick sp_select_CUBASINF_Curex :" & rtnStr)
                '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_CUBASINF_CR.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                MsgBox("No Currency in System")
            End If

            '*** Change Customer to re-calcualte all the standard price
            If last_cust <> "" Then
                If last_cust <> cboCus1No.Text Then
                    Call reset_Detail()
                End If
            End If
            last_cust = cboCus1No.Text
        End If

        'rounding
        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUBASINF_rounding '" & cboCoCde.Text & "','" & cboCus1No.Text.Split(" - ")(0) & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_rounding, rtnStr)

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Display_Header rs_CUBASINF_rounding:" & rtnStr)
            'Exit Sub
        End If
        ''
        cus1_rounding = 4
        If rs_CUBASINF_rounding.Tables("RESULT").Rows.Count > 0 Then
            cus1_rounding = rs_CUBASINF_rounding.Tables("RESULT").Rows(0)("cbi_rounding")

        End If

    End Sub

    Private Sub cboCus2NoClick()
        If cboCus2No.Text <> "" And Validate() = True Then
            Recordstatus = True

            optGM.Enabled = True
            optMU.Enabled = True
            txtGrsMgn.Enabled = True
            gbSecond.Enabled = True


            dr = rs_CUBASINF_S.Tables("RESULT").Select("csc_seccus = " & "'" & Trim(Split(cboCus2No.Text, "-")(0)) & "'")
            'dr = rs_CUBASINF_S.Tables("RESULT").Select("csc_seccus = " & "'" & Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1) & "'")

            txtCus2Ad.Text = dr(0)("cci_cntadr")
            txtCus2St.Text = dr(0)("cci_cntstt")
            txtCus2Cy.Text = dr(0)("cci_cntcty")
            txtCus2Zp.Text = dr(0)("cci_cntpst")

            If dr(0)("csc_cusrel").ToString = "A" Then
                optActive.Checked = True
                optPassive.Checked = False
            ElseIf dr(0)("csc_cusrel").ToString = "P" Then
                optActive.Checked = False
                optPassive.Checked = True
            End If

            optGM.Enabled = True
            optMU.Enabled = True
            txtGrsMgn.Enabled = True
            gbSecond.Enabled = True

            If dr(0)("cpi_prcsec").ToString = "GM" Then
                optGM.Checked = True
                optMU.Checked = False
            Else
                optGM.Checked = False
                optMU.Checked = True
            End If

            txtGrsMgn.Text = dr(0)("cpi_grsmgn")

            cboCus2Cp.Items.Clear()
            cboCus2Cp.Text = ""

            '*** Contact Person for Secondary Customer
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            '1
            gspStr = "sp_list_CUCNTINF '','" & Replace(cboCus2No.Text, "'", "''") & "','C'"
            rtnLong = execute_SQLStatement(gspStr, rs_CUCNTINF_C, rtnStr)
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading QUM00001 sp_list_CUCNTINF  :" & rtnStr)
                Exit Sub
            End If

            'If rs_CUCNTINF_C.Tables("RESULT").Rows.Count > 0 Then
            '    cboCus2Cp.Items.Add(rs_CUCNTINF_C.Tables("RESULT").Rows(0).Item("cci_cntctp").ToString.Trim)
            '    cboCus2Cp.Text = rs_CUCNTINF_C.Tables("RESULT").Rows(0).Item("cci_cntctp").ToString.Trim
            'End If

            If rs_CUCNTINF_C.Tables("RESULT").Rows.Count > 0 Then
                Dim dr() As DataRow = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'BUYR'")
                If dr.Length = 0 Then
                    dr = Nothing
                    dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'SALE'")
                    If dr.Length = 0 Then
                        dr = Nothing
                        dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'SALE'")
                        If dr.Length = 0 Then
                            dr = Nothing
                            dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y' and cci_cnttyp = 'MAGT'")
                            If dr.Length = 0 Then
                                dr = Nothing
                                dr = rs_CUCNTINF_C.Tables("RESULT").Select("cci_cntdef = 'Y'")
                                If dr.Length > 0 Then
                                    cboCus2Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                                    display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus2Cp)
                                End If
                            Else
                                cboCus2Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                                display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus2Cp)
                            End If
                        Else
                            cboCus2Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                            display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus2Cp)
                        End If
                    Else
                        cboCus2Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                        display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus2Cp)
                    End If
                Else
                    cboCus2Cp.Items.Add(dr(0).Item("cci_cntctp").ToString.Trim)
                    display_combo(dr(0).Item("cci_cntctp").ToString.Trim, cboCus2Cp)
                End If
            End If

            '2

            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & _
                                        Trim(Split(cboCus2No.Text, "-")(0)) & "','Contact Person'"


            'gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & _
            '                            Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1) & "','Contact Person'"


            rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_CP, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboCus2No_Click sp_select_CUBASINF_Q :" & rtnStr)
                Exit Sub
            End If

            If rs_CUBASINF_CP.Tables("RESULT").Rows.Count = 0 Then       '***  Not Found Record
                cboCus2Cp.Enabled = False
            Else
                cboCus2Cp.Enabled = True
                'cboCus2Cp.Items.Clear()
                'cboCus2Cp.Text = ""

                If rs_CUBASINF_CP.Tables("RESULT").Rows.Count > 0 Then
                    For index As Integer = 0 To rs_CUBASINF_CP.Tables("RESULT").Rows.Count - 1

                        If Not (cboCus2Cp.Text = rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString.Trim) Then  'see 1
                            cboCus2Cp.Items.Add(rs_CUBASINF_CP.Tables("RESULT").Rows(index)("cci_cntctp").ToString)
                        End If

                    Next
                End If

                dr = rs_CUBASINF_CP.Tables("RESULT").Select("buyrY = 'BUYR - Y'")
                If dr.Length > 0 Then
                    'cboCus2Cp.Text = dr(0)("cci_cntctp")
                End If



            End If

        Else
            txtCus2Ad.Text = ""
            txtCus2St.Text = ""
            txtCus2Cy.Text = ""
            txtCus2Zp.Text = ""
            cboCus2Cp.Text = ""
            cboCus2Cp.Enabled = False

            optGM.Enabled = False
            optMU.Enabled = False
            txtGrsMgn.Enabled = False
            If cboCus2No.Text <> "" Then
                optGM.Enabled = True
                optMU.Enabled = True
                txtGrsMgn.Enabled = True
                gbSecond.Enabled = True

            End If


        End If


        If last_cust_sec <> cboCus2No.Text Then
            Call reset_Detail()
        End If
        last_cust_sec = cboCus2No.Text
    End Sub


    Private Sub txtItmNoVen_Change()
        'cur#
        bIsShowPanels = True

        '''' Cursor = Cursors.WaitCursor

        Dim cus1no As String
        Dim cus2no As String

        If Trim(cboCus1No.Text) = "" Then
            cus1no = ""
        Else
            cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If Trim(cboCus2No.Text) = "" Then
            cus2no = ""
        Else
            cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

        Dim tmp_cboItmNoVen As String
        tmp_cboItmNoVen = cboItmNoVen.text.Trim()
        If InStr(tmp_cboItmNoVen, " - ") - 1 >= 0 Then
            tmp_cboItmNoVen = Trim(Split(cboItmNoVen.text, "-")(1))
        End If

        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMVENINF_Q '','" & txtItmNoVen.Text.Trim & "','" & tmp_cboItmNoVen & "','" & cus1no & "','" & cus2no & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i


        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            dgPanItmNoSelect.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView
            Call ShowGrdIMTMP_S()
            '            PanelItmNoSelect.Visible = True
            '           PanelItmNoSelect.BringToFront()
            PanelItmNoSelect.Visible = True
            PanelItmNoSelect.BringToFront()

            cmdItmNoConvVen.Enabled = True
            cmdItmNoConv.Enabled = False
        Else
            cmdItmNoConvVen.Enabled = False


        End If

















        '20130617
        'gspStr = "sp_select_IMTMPREL_ConToReal '" & txtItmNoTmp.Text & "'"
        'rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL_ConToReal, rtnStr)
        'gspStr = ""

        'Cursor = Cursors.Default

        'If rtnLong <> RC_SUCCESS Then
        '    MsgBox("Error on loading  sp_select_IMTMPREL_ConToReal :" & rtnStr)
        '   '''' Cursor = Cursors.Default
        '    Exit Sub
        'End If

        'If rs_IMTMPREL_ConToReal.Tables("RESULT").Rows.Count > 0 Then
        '    'dr = rs_IMTMPREL_ConToReal.Tables("RESULT").Select("ipi_pckunt = '" & Split(cboPcking.Text, " / ")(0) & "' and ipi_inrqty = " & Split(cboPcking.Text, " / ")(1) & " and ipi_mtrqty = " & Split(cboPcking.Text, " / ")(2))
        '    'If dr(0)("ipi_conftr").ToString <> "" Then
        '    '    txtUMFtr.Text = dr(0)("ipi_conftr").ToString()
        '    '    Call ABUASST(txtItmNo.Text, "SHOW")
        '    'End If

        'End If




    End Sub



    Private Sub ABUASST(ByVal itmNo As String, ByVal Action As String)
        Select Case Action
            Case "SHOW"
                txtUMFtr.Visible = True
                lblUMFtr.Visible = True
                chkPC.Visible = True
                chkPC.Enabled = True
                If chkPC_hdr.Checked = True Then
                    chkPC.Enabled = False
                Else
                    chkPC.Enabled = True
                End If

            Case "HIDE"
                txtUMFtr.Visible = False
                chkPC.Visible = True
                chkPC.Enabled = True
                lblUMFtr.Visible = False
                txtUMFtr.Text = ""
                chkPC.Visible = False
                chkPC.Enabled = False
            Case "SHOWPRC"
                lblPCPrc.Visible = True
                txtPCPrcCur.Visible = True
                txtPCPrc.Visible = True

                '''III
                lblPCPrcP.Visible = True
                txtPCPrcCurP.Visible = True
                txtPCPrcP.Visible = True
                txtPCPrcP.Enabled = True


                txtPCPrcCur.Enabled = False
                txtPCPrc.Enabled = True
                txtCus1Dp.Enabled = False
            Case "HIDEPRC"
                lblPCPrc.Visible = False
                txtPCPrcCur.Visible = False
                txtPCPrc.Visible = False

                '''III
                lblPCPrcP.Visible = False
                txtPCPrcCurP.Visible = False
                txtPCPrcP.Visible = False
                txtPCPrcP.Text = "0"
                txtPCPrcP_Text_round_5 = 0


                txtPCPrcCur.Enabled = False
                txtPCPrc.Enabled = False
                txtCus1Dp.Enabled = True
                txtPCPrc.Text = "0"
                txtPCPrc_Text_round_5 = 0

            Case "CHKPCK_A"
                If isABUAssortment(itmNo) = True Then
                    If rs_IMPCKINF.Tables("RESULT").Rows.Count > 0 Then
                        dr = rs_IMPCKINF.Tables("RESULT").Select("ipi_pckunt = '" & Split(cboPcking.Text, " / ")(0) & "' and ipi_inrqty = " & Split(cboPcking.Text, " / ")(1) & " and ipi_mtrqty = " & Split(cboPcking.Text, " / ")(2))
                        If dr.Length > 0 Then

                            If dr(0)("ipi_conftr").ToString <> "" Then
                                txtUMFtr.Text = dr(0)("ipi_conftr").ToString()
                                Call ABUASST(txtItmNo.Text, "SHOW")
                            End If
                        End If

                    End If
                End If
            Case "CALPCPRCI"
                    '''***)
                    ''txtUMFtr.Text = rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qud_conftr")
                    txtCus1Sp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp").ToString), "###,###,##0.0000")
                    txtCus1Dp.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp").ToString), "###,###,##0.0000")
                    txtDiscnt.Text = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_discnt").ToString), "##0.###")
                    '''***)
                    If Val(txtCus1Sp.Text) <> 0 And txtUMFtr.Text <> "" Then
                        Call txtPCPrcGotFocus()

                        Dim umftr As Decimal
                        If Not IsNumeric(txtUMFtr.Text) Then
                            umftr = 1
                        Else
                            umftr = txtUMFtr.Text
                        End If

                        If Val(txtUMFtr.Text) = 0 Then
                            umftr = 1
                        End If
                    '''20140212
                    umftr = get_umftr()

                        '''20130909 seems not correct
                        ' ''If txtDiscnt.Text <> "" And IsNumeric(txtDiscnt.Text) = True Then
                        ' ''    If Val(txtDiscnt.Text) = 0 Then
                        ' ''        txtPCPrc.Text = Format(txtCus1Sp.Text / umftr, "###,###,##0.0000")
                        ' ''    Else
                        ' ''        txtPCPrc.Text = Format(txtCus1Dp.Text / umftr, "###,###,##0.0000")
                        ' ''    End If
                        ' ''Else
                        ' ''    txtPCPrc.Text = Format(txtCus1Sp.Text / umftr, "###,###,##0.0000")
                        ' ''End If

                    either_cus1dp_or_cus2dp = txtCus1Dp.Text
                    If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                        If Not IsNumeric(txtCus2Dp.Text) Then
                            txtCus2Dp.Text = txtCus1Dp.Text
                        End If
                        If optGM.Checked = True Then
                            either_cus1dp_or_cus2dp = txtCus2Dp.Text
                        ElseIf optMU.Checked = True Then
                            either_cus1dp_or_cus2dp = txtCus2Dp.Text
                        End If
                    End If
                    txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
                    txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")

                    txtPCPrc.Text = round(txtPCPrc.Text, cus1_rounding)

                    txtPCPrcP.Text = txtPCPrc.Text
                    txtPCPrcP_Text_round_5 = txtPCPrc_Text_round_5

                    rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qud_pcprc") = txtPCPrc_Text_round_5

                    Call txtPCPrcLostFocus()

                    ''
                    If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                        If optGM.Checked = True Then
                            ''
                            txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                            
                            txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                        ElseIf optMU.Checked = True Then
                            ''
                            txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                            
                            txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                        Else
                            txtCus1Dp.Text = txtPCPrc_Text_round_5 * umftr
                            
                            txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                            txtCus1DpP.Text = txtCus1Dp.Text
                            rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qud_cus1dp") = txtCus1Dp.Text
                            rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qpe_cus1dp") = txtCus1Dp.Text
                        End If
                    Else
                        txtCus1Dp.Text = txtPCPrc_Text_round_5 * umftr
                        
                        txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                        txtCus1DpP.Text = txtCus1Dp.Text
                        rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qud_cus1dp") = txtCus1Dp.Text
                        rs_QUOTNDTL.Tables("RESULT").Rows.Item(sReadingIndexQ)("qpe_cus1dp") = txtCus1Dp.Text
                    End If





                    Else
                    txtPCPrc.Text = Format(0, "###,###,##0.0000")
                    txtPCPrc_Text_round_5 = Format(0, "###,###,##0.000000")
                    End If
        End Select

        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Then
            chkPC.Enabled = False
            txtPCPrc.Enabled = False

            txtPCPrcCur.Enabled = False
            chkPC_hdr.Enabled = False
        End If
    End Sub

    Private Function isABUAssortment(ByVal itmNo As String) As Boolean
        '*** FOR ALL ASSORTMENT
        Dim rs_ABUASST As New DataSet

        isABUAssortment = False

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CHECK_ASST_FOR_PC '" & cboCoCde.Text & "','" & IIf(itmNo = "", "X", itmNo) & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_ABUASST, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading isABUAssortment sp_select_CHECK_ASST_FOR_PC :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Function
        End If

        If rs_ABUASST.Tables("RESULT").Rows.Count > 0 Then
            isABUAssortment = True
        Else
            isABUAssortment = False
        End If
    End Function

    Private Function not_Valid_Item(ByVal itmNo As String, ByVal cus1no As String, ByVal colcde As String) As Boolean
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMXChk '" & cboCoCde.Text & "','" & cus1no & "','" & colcde & "','" & itmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMXCHK, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading not_Valid_Item sp_select_IMXChk :" & rtnStr)
            Exit Function
        End If

        If rs_IMXCHK.Tables("RESULT").Rows.Count = 0 Then
            not_Valid_Item = True
            MsgBox("Item cannot Quot by this Company! Customer and Company Relation Missing.")
        Else
            If rs_IMXCHK.Tables("RESULT").Rows(0)("imx_vendef").ToString <> "Y" Then
                If MsgBox("This is not the default company to quot this item, Do you continue the quot?", vbYesNo) = vbYes Then
                    not_Valid_Item = False
                Else
                    not_Valid_Item = True
                End If
            Else
                not_Valid_Item = False
            End If
        End If
    End Function
    Public Sub cboPckingClick()
        Dim i As Integer

        If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" And cboColCde.Text <> "" Then
            txtQutItmSts.Text = "A - Active"
            '''20140121
            ''' default active but check, "W/TBC/E'        
            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                If Not IsDBNull(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc"))) Then

                    If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "W" _
        And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_apprve") = "N" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "W - Wait for Approval"
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If

                    If Split(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts"), " - ")(0) = "E" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "E - Expiry"
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If

                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts") = "TBC" Then
                        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
                    End If
                End If
            End If

        Else
            txtQutItmSts.Text = "I - Inactive" 'Temporary not allow
        End If


        If rs_IMPCKINF.Tables("RESULT") Is Nothing Then
            MsgBox("Packing not found!")
            '''20130815
            If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
                gbPacking.Enabled = True
                cboPcking.Enabled = True
            End If

            Exit Sub
        End If

        If rs_IMPCKINF.Tables("RESULT") Is Nothing Then
            If rs_IMPCKINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Packing not found!")
                '''20130815
                If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
                    gbPacking.Enabled = True
                    cboPcking.Enabled = True
                End If

                Exit Sub
            End If
        End If

        '''itmno
        If txtItmNoReal.Text.Trim <> "" Then
            txtItmNo.Text = txtItmNoReal.Text.Trim
        ElseIf txtItmNoTmp.Text.Trim <> "" Then
            txtItmNo.Text = txtItmNoTmp.Text.Trim
        ElseIf txtItmNoVen.Text.Trim <> "" Then
            txtItmNo.Text = txtItmNoVen.Text.Trim
        Else
            MsgBox("Please Input Item Number!")
            txtItmNoReal.Focus()
            txtItmNoReal.SelectAll()
        End If


        'find the packing info
        If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" Then
            If Not rs_IMPCKINF.Tables("RESULT") Is Nothing Then
                For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
                    If rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString = Split(cboPcking.Text, " / ")(0) And _
                       rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString = Split(cboPcking.Text, " / ")(1) And _
                       rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString = Split(cboPcking.Text, " / ")(2) Then
                        i = index
                        sReadingIndexP = i
                        Exit For
                    End If
                Next
            End If

            cboUM.Text = rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_pckunt")
            txtInrQty.Text = rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrqty")
            txtMtrQty.Text = rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrqty")
            txtCft.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_cft").ToString), "##0.####")
            txtCBM.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_cbm").ToString), "##0.####")

            If UBound(Split(cboPcking.Text, " / ")) >= 5 Then
                cboFtyPrcTrm.Text = Split(cboPcking.Text, " / ")(5)
            End If

            If UBound(Split(cboPcking.Text, " / ")) >= 6 Then
                cboDtlPrcTrm.Text = Split(cboPcking.Text, " / ")(6)
            End If

            If UBound(Split(cboPcking.Text, " / ")) >= 7 Then
                cboTranTrm.Text = Split(cboPcking.Text, " / ")(7)
            End If





            txtPckItr.Text = rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_pckitr")
            If CStr(Year(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_qutdat"))) <> "1900" Then
                txtPeriod.Text = CStr(Year(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_qutdat"))) + "-" + Microsoft.VisualBasic.Right("00" + CStr(Month(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_qutdat"))), 2)
            Else
                txtPeriod.Text = ""
            End If




            txtInrdin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrdin").ToString), "##0.####")
            txtInrwin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrwin").ToString), "##0.####")
            txtInrhin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrhin").ToString), "##0.####")
            txtMtrdin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrdin").ToString), "##0.####")
            txtMtrwin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrwin").ToString), "##0.####")
            txtMtrhin.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrhin").ToString), "##0.####")

            txtInrdcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrdcm").ToString), "##0.####")
            txtInrwcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrwcm").ToString), "##0.####")
            txtInrhcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrhcm").ToString), "##0.####")
            txtMtrdcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrdcm").ToString), "##0.####")
            txtMtrwcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrwcm").ToString), "##0.####")
            txtMtrhcm.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrhcm").ToString), "##0.####")

            txtGrswgt.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_grswgt").ToString), "##0.###")
            txtNetwgt.Text = Format(Val(rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_netwgt").ToString), "##0.###")

            Dim strCusno As String

            Call ABUASST(txtItmNo.Text, "CHKPCK_A")

            '*** New logic to get Price Info
            Dim cus1no As String
            Dim cus2no As String

            If Trim(cboCus1No.Text) = "" Then
                cus1no = ""
            Else
                cus1no = Trim(Split(cboCus1No.Text, "-")(0))
            End If

            If Trim(cboCus2No.Text) = "" Then
                cus2no = ""
            Else
                cus2no = Trim(Split(cboCus2No.Text, "-")(0))
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            '*** Phase 2
            '''20130816



            gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & txtItmNo.Text & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_pckunt").ToString & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_inrqty").ToString & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(i)("ipi_mtrqty").ToString & "','" & _
                                                    cus1no & "','" & cus2no & "','" & _
                                                    cboFtyPrcTrm.Text & "','" & _
                                                    cboDtlPrcTrm.Text & "','" & _
                                                    cboTranTrm.Text & "','" & _
                                                    gsUsrID & "'"

            rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF, rtnStr)

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboPcking_MouseUp sp_select_QUOTNDTL_Vendor :" & rtnStr)
                Exit Sub
            End If

            ''rs_IMVENINF is nohing  ??
            If rs_IMVENINF.Tables("RESULT") Is Nothing Then
                MsgBox("The packing has been deleted in Item Master.")
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("The packing has been deleted in Item Master.")
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
                'cboVenNo.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prdven")
                display_combo(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prdven"), cboVenNo)

                txtFCurCde.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_curcde")
                txtFtyPrc.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprc"), "########0.0000")
                txtFtyCst.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycst"), "########0.0000")

                cboDtlPrcTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm").ToString.Trim.Split("-")(0).Trim
                cboFtyPrcTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm").ToString.Trim.Split("-")(0).Trim
                '*** Phase 2
                cboTranTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm").ToString.Trim.Split("-")(0).Trim

                '*** Calcualte Basic Price in Customer Currency
                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") = 0 Then
                    '*** Phase 2
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                ''2014
                'Marco 20130807
                txtInvRndP.Text = cus1_rounding

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
                    If txtCurCde2.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString & "'")
                        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat")), "########0.0000")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat")), "########0.0000")
                        If dr.Length > 0 Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                        End If
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), "########0.0000")
                End If

                '*** Phase 2
                txtBasPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")
                txtVenTyp.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString
                txtItmCat.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("ibi_catlvl3").ToString


                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") = Split(cboPcking.Text, " / ")(0)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty") = Split(cboPcking.Text, " / ")(1)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty") = Split(cboPcking.Text, " / ")(2)

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm")

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_untcde") = Split(cboPcking.Text, " / ")(0)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_inrqty") = Split(cboPcking.Text, " / ")(1)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_mtrqty") = Split(cboPcking.Text, " / ")(2)

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftyprctrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_prctrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_trantrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm")

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prdven")

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstA") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstA")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstB") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstB")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstC") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstC")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstD") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstD")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstTran") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstTran")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qpe_ftycstPack") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycstPack")

                Dim sTemp As String
                'Dim sFtyPrcTrm As String
                'Dim sPrcTrm As String
                'Dim sTranTrm As String

                sTemp = ""

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no").ToString <> "" Then
                    sTemp = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no").ToString
                    If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no").ToString <> "" Then
                        sTemp = sTemp + "/" + rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no").ToString
                    End If
                Else
                    sTemp = "Standard"
                End If

                'sFtyPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm").ToString
                'sPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm").ToString
                'sTranTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm").ToString

                'txtPrcKey.Text = sTemp + "/" + sFtyPrcTrm + "/" + sPrcTrm + "/" + sTranTrm
                txtPrcKey.Text = sTemp
                txtEffDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")).ToShortDateString
                txtExpDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")).ToShortDateString




                ''*** Phase 2
                'MC 20130715
                'Call LoadPrcEmtFromCU(Split(cboCus1No.Text, "-")(0).Trim, Split(cboCus2No.Text, "-")(0).Trim, txtVenTyp.Text.Trim, txtItmCat.Text.Trim, Split(cboVenNo.Text.Trim, "-")(0).Trim, cboDtlPrcTrm.Text, cboTranTrm.Text)
                'cmdPrcEmt.Enabled = True
                'Call CalculatePrc(False)

                If get_QUPRCEMT_CU(txtSeq.Text, Split(cboCus1No.Text, "-")(0).Trim, Split(cboCus2No.Text, "-")(0).Trim, txtVenTyp.Text.Trim, txtItmCat.Text.Trim, Split(cboVenNo.Text.Trim, "-")(0).Trim, cboDtlPrcTrm.Text, cboTranTrm.Text) = True Then
                    Call calculate_gbPandelCstEmt(txtSeq.Text)

                    txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
                    txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
                    txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")

                    'cboCusVen.Text = cboVenNo.Text.Trim
                    '''20140423
                    gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
                    rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
                    gspStr = ""

                    display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_venno"), cboDV)
                    display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_tradeven"), cboTV)
                    display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_examven"), cboFA)
                    '''20140707
                    display_combo(rs_IMBASINF.Tables("RESULT").Rows(0).Item("ibi_cusven"), cboCusVen)

                    ''cboTV.Text = cboVenNo.Text.Trim
                    ''cboDV.Text = cboVenNo.Text.Trim
                    ''cboFA.Text = cboVenNo.Text.Trim


                    no_formula_to_insert = False



                    '''20140110
                    '''check duplicated here
                    If check_dup_Packing() = True Then
                        MsgBox("Duplicate packing selected!")
                        cboPcking.Focus()
                        cboPcking.SelectAll()
                        Exit Sub
                    End If


                Else
                    '''20130815
                    If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
                        gbPacking.Enabled = True
                        cboPcking.Enabled = True
                    End If
                    no_formula_to_insert = True
                    '20140122   
                    'Call reset_detail_data("Detail_Repacking", "All")
					Call reset_detail_formular_not_found()

                    '20131212   
                    'Call reset_QUOTNDTL()
                    'Call reset_detail_control("Detail_Init", "All")
                    'Call reset_detail_data("Detail_Init", "All")


                    Exit Sub
                End If

            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                '*** Phase 2
                'txtQutItmSts.Text = "INCOMPLETE"
                txtQutItmSts.Text = "I - Inactive"
            End If

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & cboUM.Text & "','Conversion'"
            rtnLong = execute_SQLStatement(gspStr, rs_SYCONFTR, rtnStr)
            gspStr = ""

            '''' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading cboPcking_MouseUp sp_select_CUBASINF_Q :" & rtnStr)
                Exit Sub
            End If

            If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
                txtSmpUnt.Text = cboUM.Text
                If txtCus1Dp.Text = "" Then
                    txtSmpPrc.Text = ""
                Else
                    txtSmpPrc.Text = Format(Val(txtCus1Dp.Text), "###,###,##0.0000")
                End If
            Else
                txtSmpUnt.Text = "PC"
                If txtCus1Dp.Text = "" Then
                    txtSmpPrc.Text = ""
                Else
                    txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                    'txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                End If
            End If

            If isABUAssortment(txtItmNo.Text) = True Then
                txtSmpUnt.Text = "PC"
                If txtCus1Dp.Text = "" Then
                    txtSmpPrc.Text = ""
                Else
                    'txtSmpPrc.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / CDec(IIf(txtUMFtr.Text = "", 0, txtUMFtr.Text))), "###,###,##0.0000")
                    txtSmpPrc.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / CDec(get_umftr()), txtInvRndP.Text), "###,###,##0.0000")
                End If
            End If

            Call updateMOQMOA()

            If cboCus2No.Text = "" Then
                cus2no = ""
            Else
                cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString = "NEW" Then
                '''' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_CUITMSUM_Q '" & cboCoCde.Text & "','" & _
                                                    Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & _
                                                    cus2no & "','" & txtItmNo.Text & "','" & cboColCde.Text & "','" & _
                                                    cboUM.Text & "','" & txtInrQty.Text & "','" & txtMtrQty.Text & "','" & _
                                                    IIf(txtUMFtr.Text = "", 1, txtUMFtr.Text) & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_CUITMSUM, rtnStr)
                gspStr = ""

                '''' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading cboPcking_MouseUp sp_select_CUITMSUM_Q :" & rtnStr)
                    Exit Sub
                End If

                If rs_CUITMSUM.Tables("RESULT").Rows.Count > 0 Then
                    txtItmDsc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_itmdsc")
                    txtCusCol.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscol")
                    txtCusItm.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cusitm")
                    txtColDsc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_coldsc")
                    'txtHstRef.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_refdoc")
                    txtCusUsd.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd"))
                    txtCusCad.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad"))
                    '*********************** Get CIH Price **********************************
                    txtCIHprc.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_selprc")
                    txtCIHcur.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_curcde")
                    '************************************************************************

                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_contopc").ToString = "Y" Then
                        chkPC.Checked = True
                    End If

                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_contopc").ToString = "Y" And flghdrPC = False Then
                        Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                    End If

                    If chkPC_hdr.Checked = True And isABUAssortment(txtItmNo.Text) = True Then
                        chkPC.Checked = True
                        Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                    End If

                    txtDept.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_dept").ToString
                    If rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_hrmcde").ToString <> "" Then
                        cboHrmCde.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_hrmcde")

                        dr = rs_SYHRMCDE.Tables("RESULT").Select("yhc_hrmcde = " & "'" & cboHrmCde.Text & "'")

                        If dr.Length > 0 Then
                            cboHrmCde.Text = dr(0)("yhc_hrmcde").ToString + " - " + _
                                                dr(0)("yhc_hrmdsc").ToString + _
                                                IIf(dr(0)("yhc_tarzon").ToString = "U", " (HSTU # for USA)", " (Tariff # for Europe)")
                            txtDtyRat.Text = dr(0)("yhc_dtyrat")
                        End If
                        txtDtyRat.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_dtyrat")
                    End If

                    '*** Phase 2 comment it
                    'Call CalculateELCDuty(CDbl(IIf(Trim(txtDtyRat.Text) = "", "0", txtDtyRat.Text)))

                    cboCusals.Text = rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cusstyno")
                    '*** fix retail price as custitmcat change
                    txtCusUsd.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cususd"))
                    txtCusCad.Text = IIf(rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad") = 0, "", rs_CUITMSUM.Tables("RESULT").Rows(0)("cis_cuscad"))
                    '*** Phase 2 comment it
                    'Call CalculatePMU(txtCusUsd)
                Else
                    'txtHstRef.Text = ""
                    txtCIHprc.Text = ""
                    txtCIHcur.Text = ""

                    If QuotCopyFlag = True Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc").ToString = "Y" Then
                            chkPC.Checked = True
                        End If

                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_contopc").ToString = "Y" Then
                            Call ABUASST(txtItmNo.Text, "CALPCPRCI")
                        End If
                    End If
                End If
            End If

            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            'begin re-get prc emt
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

            If cboPcking.Items.Count > 0 Then     'And QuotCopyFlag = False
                '' cboPcking.SelectedIndex = 0

                If get_QUPRCEMT_CU(txtSeq.Text, Split(cboCus1No.Text, "-")(0).Trim, Split(cboCus2No.Text, "-")(0).Trim, txtVenTyp.Text.Trim, txtItmCat.Text.Trim, Split(cboVenNo.Text.Trim, "-")(0).Trim, cboDtlPrcTrm.Text, cboTranTrm.Text) = True Then
                    Call calculate_gbPandelCstEmt(txtSeq.Text)
                    txtMU.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")
                    lblMUMin.Text = "(Min " + Format(round(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mumin"), 2), "###,###,##0.00") + "%)"

                    txtPckCstAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_pkgper")
                    txtItmCommAmt.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_icmper")

                    txtCus1Sp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1sp")
                    txtCus1Dp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp")
                    txtSmpPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_smpprc")
                Else
                    '''20130815
                    If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "" And txtItmNoVen.Text = "") Then
                        gbPacking.Enabled = True
                        cboPcking.Enabled = True
                    End If
                    no_formula_to_insert = True
                    '20140122   
                    'Call reset_detail_data("Detail_Repacking", "All")
					Call reset_detail_formular_not_found()
                    Exit Sub
                End If

            End If


            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            'ok re-get prc emt
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


            '''20140129
            Call refresh_Price()
            Call fill_QUOTNDTL()


            '20130828
            If chkPC.Checked = True And txtUMFtr.Text.ToString <> "" Then
                Dim umftr As Decimal
                If Not IsNumeric(txtUMFtr.Text) Then
                    umftr = 1
                Else
                    umftr = txtUMFtr.Text
                End If

                If Val(txtUMFtr.Text) = 0 Then
                    umftr = 1
                End If
                '''20140212
                umftr = get_umftr()


                txtPCPrc.Text = Format(txtCus1Dp.Text / umftr, "###,###,##0.0000")
                txtPCPrc_Text_round_5 = Format(txtCus1Dp.Text / umftr, "###,###,##0.000000")

            End If




        Else 'else of "If cboPcking.Text <> "" And cboPcking.Text <> " /  0 /  0""
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = 0
            'txtHstRef.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            '*** Phase 2
            txtCBM.Text = ""

            txtPeriod.Text = ""
            'txtQutDat.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset Original MOQ/MOA value
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtSmpPrc.Text = ""
            'txtDiscnt.Text = "0"
            'txtDiscntP.Text = "0"

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   ' factory price term
            '*** Phase 2
            cboTranTrm.Text = ""
            txtBasPrc.Text = "0"
            txtBasPrcP.Text = "0"

            txtCus1Sp.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus1Dp.Text = "0"
            txtCus2Dp.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus1DpP.Text = "0"
            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            txtPckItr.Text = ""
            txtSmpUnt.Text = ""

            txtPrcKey.Text = ""
            txtEffDat.Text = ""
            txtExpDat.Text = ""
        End If
        '' Cursor = Cursors.Default

        '20130908
        If Not (txtItmNoReal.Text = "" And txtItmNoTmp.Text = "") Then
            cboPcking.BringToFront()
        End If

        '''20140207
        cmdPrcEmt.Enabled = True
        txtItmDsc.Enabled = True
        cboCusals.Enabled = True
        txtCusItm.Enabled = True
        txtColDsc.Enabled = True
        txtCusCol.Enabled = True
        txtMoq.Enabled = True
        txtGrswgt.Enabled = True
        txtNetwgt.Enabled = True
        txtInrdin.Enabled = True
        txtMtrdin.Enabled = True
        txtInrwin.Enabled = True
        txtMtrwin.Enabled = True
        txtInrhin.Enabled = True
        txtMtrhin.Enabled = True
        txtInrdcm.Enabled = True
        txtMtrdcm.Enabled = True
        txtInrwcm.Enabled = True
        txtMtrwcm.Enabled = True
        txtInrhcm.Enabled = True
        txtMtrhcm.Enabled = True
        txtPckItr.Enabled = True
        txtIMRmk.Enabled = True
        txtNote.Enabled = True
        cboCusVen.Enabled = True
        cboTV.Enabled = True
        cboFA.Enabled = True
        cboHrmCde.Enabled = True
        cboCusUsdCurr.Enabled = True
        txtCusUsd.Enabled = True
        cboCusCadCurr.Enabled = True
        txtCusCad.Enabled = True
        txtStkQty.Enabled = True
        txtCusQty.Enabled = True
        txtSmpQty.Enabled = True
        cboTOFty.Enabled = True
        txtTOOrdQty.Enabled = True
        txtTOShipport.Enabled = True
        txtTORemark.Enabled = True
        txtDTLFtyShpDateStr.Enabled = True
        txtDTLFtyShpDateEnd.Enabled = True
        txtDTLCustShpDateStr.Enabled = True
        txtDTLCustShpDateEnd.Enabled = True


        'Call setStatus(cModeUpd)


    End Sub




    Private Sub fillcboCusVen(ByVal strItmNo As String)
        cboCusVen.Items.Clear()
        cboCusVen.Text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboCusVen sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboCusVen sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboCusVen sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboCusVen.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboCusVen.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub


    Private Sub fillcboDV(ByVal strItmNo As String)
        cboDV.Items.Clear()
        cboDV.Text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboDV sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboDV sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboDV sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboDV.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboDV.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub


    Private Sub fillcboTV(ByVal strItmNo As String)
        cboTV.Items.Clear()
        cboTV.Text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboTV sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboTV sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboTV sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboTV.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboTV.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub
    Private Sub fillcboItmNoVen(ByVal strItmNo As String)
        cboItmNoVen.Items.Clear()
        cboItmNoVen.text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboItmNoVen sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboItmNoVen sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboItmNoVen sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboItmNoVen.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboItmNoVen.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub


    Private Sub fillcboFA(ByVal strItmNo As String)
        cboFA.Items.Clear()
        cboFA.Text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboFA sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboFA sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboFA sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboFA.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboFA.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub


    Private Sub fillcboPVen(ByVal strItmNo As String)
        cboVenNo.Items.Clear()
        cboVenNo.Text = ""

        Dim rs_temp As New DataSet
        Dim rs_IMCUSVEN As New DataSet
        Dim strVenTyp As String

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_temp, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboVenNo sp_select_IMBASINF_Q :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text <> "" Then
            strVenTyp = "E"
        Else
            If rs_temp.Tables("RESULT").Rows.Count > 0 Then
                strVenTyp = rs_temp.Tables("RESULT").Rows(0)("vbi_ventyp")
            Else
                Exit Sub
            End If
        End If


       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSVEN '" & cboCoCde.Text & "','" & strItmNo & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading fillcboVenNo sp_select_IMCUSVEN :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
            '****************query Item in history Table****************************
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCUSVEN_H '" & cboCoCde.Text & "','" & strItmNo & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMCUSVEN, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading fillcboVenNo sp_select_IMCUSVEN_H :" & rtnStr)
               '' Cursor = Cursors.Default
                Exit Sub
            End If

            If rs_IMCUSVEN.Tables("RESULT").Rows.Count <= 0 Then
                MsgBox("Custom Vendor not found!")
            End If
        End If

        If rs_IMCUSVEN.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_IMCUSVEN.Tables("RESULT").Rows.Count - 1
                If strVenTyp = "E" Then
                    If Not (rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z") Then
                        cboVenNo.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                Else
                    If rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString >= "A" And _
                        rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno").ToString <= "Z" Then
                        cboVenNo.Items.Add(rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                            rs_IMCUSVEN.Tables("RESULT").Rows(index)("vbi_cusvensna"))
                    End If
                End If
            Next
        End If
    End Sub

    Private Sub setStatus(ByVal Mode As String)
        If Mode = cModeInit Then
		        For index2 As Integer = 0 To 2999
                flag_no_update_mu(index2) = True
            Next

            Call SetInputBoxesStatus("DisableAll")  'Disable all textbox,command button, etc
            item_update_list = ""
            flag_no_update_mu(sReadingIndexQ) = True

            cmdAdd.Enabled = Enq_right_local 'True
            QuotCopyFlag = False
            cmdSave.Enabled = False
            ''''''20130826   cmdReset.Enabled = True
            '*** Phase 2
            cmdUpdate.Enabled = False
            cmdRenew.Enabled = False

            cmdDelete.Enabled = False
            cmdCopy.Enabled = False
            cmdFind.Enabled = True
            cmdInsRow.Enabled = False
            cmdDelRow.Enabled = False
            cmdExit.Enabled = True
            cmdClear.Enabled = True
            cmdSearch.Enabled = True

            '*** Phase 2 comment it
            'cmdFirst.Enabled = False
            'cmdLast.Enabled = False
            'cmdNext.Enabled = False
            'cmdPrevious.Enabled = False

            chkCancel.Checked = False
            Call ResetDefaultDisp()
            Call SetStatusBar(Mode)

            sReadingIndexQ = 0
            sReadingIndexP = 0
            PreviousTab = 0

            bolUpdating = False
            txtAlias.Enabled = False
            txtAlscolcde.Enabled = False
            txtAlias.Text = ""
            txtAlscolcde.Text = ""

            Call ABUASST(txtItmNo.Text, "HIDE")
            Call ABUASST(txtItmNo.Text, "HIDEPRC")
            'btcQUM00001.SelectedIndex = 0
            txtQutNo.Enabled = True

            flgLoadApplyAllPC = True
            chkPC_hdr.Checked = False
            chkPC_hdr.Enabled = False
            flgLoadApplyAllPC = False

            strCurExRat = "0"
            strCurExEffDat = ""

            '*** Reset the flag
            bolLatestQut = False
            'Recordstatus = False
            Add_flag = False
            Insert_flag = False
            auth = False
            OldItemRecord = False

            '*** Phase 2
            txtItmNoReal.Enabled = False
            txtItmNoTmp.Enabled = False
            txtItmNoVen.Enabled = False
            cboItmNoVen.Enabled = False
            txtColCde.Visible = False
            txtColCde.Enabled = False
            cmdPrcEmt.Enabled = False
            lblPckCstAmt.Text = "Amt (XXX)"
            lblItmCommAmt.Text = "Amt (XXX)"
            chkApproveDtl.Enabled = False
            chkApproveDtl.Checked = False

            ''cboCusals.Enabled = False
            txtUPC.Enabled = False
            dgMatBkd.DataSource = Nothing
            '*** Phase 2 comment it
            'dgAddInf.DataSource = Nothing
            'dgCstEmt.DataSource = Nothing
            'dgELC.DataSource = Nothing
            'dgELCDtl.DataSource = Nothing
            txtCBM.Enabled = False
            'Call SetHeaderBarValue(False)
            Call ShowFooterBar(False)

            txtInrdin.Text = "0"
            txtInrwin.Text = "0"
            txtInrhin.Text = "0"
            txtMtrdin.Text = "0"
            txtMtrwin.Text = "0"
            txtMtrhin.Text = "0"

            txtInrdcm.Text = "0"
            txtInrwcm.Text = "0"
            txtInrhcm.Text = "0"
            txtMtrdcm.Text = "0"
            txtMtrwcm.Text = "0"
            txtMtrhcm.Text = "0"

            txtGrswgt.Text = "0"
            txtNetwgt.Text = "0"

            cboCusals.Items.Clear()
            cboCusals.Text = ""
            txtUPC.Text = ""
            txtCBM.Text = ""
            txtDtyRat.Text = ""
            '*** Phase 2 comment it
            'txtSpecpck.Text = ""
            'txtPMU.Text = ""
            'IsEmptySpecPck = False
            'IsEmptyDuty = False
            'cboCustItmCat.Items.Clear()
            'cboCustItmCat.Text = ""
            strApprMax = "N/A"
            strApprMin = "N/A"
            flgUpdItm = False
            chkFtyTmpItm.Checked = False
            chkFtyTmpItm.Enabled = False
            txtFtyTmpItmNo.Text = ""
            '*** Phase 2 comment it
            'txtFtyTmpItmNo.Visible = False
            'flggrdMatbkd = False
            txtUPC.Enabled = False
            txtIMRmk.Text = ""
            '*** Phase 2 comment it
            'cboRndSts.Enabled = False
            'txtCALPMU.Enabled = False
            'txtSpecpck.Enabled = False

            lblCurrMOQ.Text = ""
            'Label4.Caption = ""
            'cmdUpdCurEx.Enabled = False
            'cmdUpdCurEx.Visible = False

            txtItmDsc.Enabled = True
            txtCusCol.Enabled = True
            txtColDsc.Enabled = True
            txtNote.Enabled = True
            txtPckItr.Enabled = True
            txtCusItm.Enabled = True
            txtRmk.Enabled = True
            txtIMRmk.Enabled = True

            btcQUM00001.TabPages(0).Enabled = True
            btcQUM00001.TabPages(1).Enabled = False

            cboCus1Cp.Enabled = False
            cboSalRep.Enabled = False
            txtRmk.Enabled = False
            txtDeptH.Enabled = False
            cboYear.Enabled = False
            cboSeason.Enabled = False
            txtDesc.Enabled = False
            txtHDRFtyShpDateStr.Enabled = False
            txtHDRCustShpDateStr.Enabled = False
            txtHDRFtyShpDateEnd.Enabled = False
            txtHDRCustShpDateEnd.Enabled = False

            btcQUM00001.TabPages(2).Enabled = False

            txtHDRFtyShpDateStr.Text = ""
            txtHDRFtyShpDateEnd.Text = ""
            txtHDRCustShpDateStr.Text = ""
            txtHDRCustShpDateEnd.Text = ""

            txtDTLFtyShpDateStr.Text = ""
            txtDTLFtyShpDateEnd.Text = ""
            txtDTLCustShpDateStr.Text = ""
            txtDTLCustShpDateEnd.Text = ""

        ElseIf Mode = cModeAdd Then
            EditModeHdr = Mode
            Call SetInputBoxesStatus("EnableAll")

            bolUpdating = False

            gbShipdate.Enabled = True

            txtHDRFtyShpDateStr.Enabled = True
            txtHDRFtyShpDateEnd.Enabled = True
            txtHDRCustShpDateStr.Enabled = True
            txtHDRCustShpDateEnd.Enabled = True

            txtAlias.Enabled = False
            txtAlscolcde.Enabled = False
            txtAlias.Text = ""
            txtAlscolcde.Text = ""

            txtUMFtr.Enabled = False
            txtUMFtr.Text = ""
            chkPC.Visible = False
            chkPC.Enabled = False
            chkPC.Checked = False
            txtPCPrc.Text = "0"
            txtPCPrc_Text_round_5 = 0


            strCurExRat = "0"
            strCurExEffDat = ""
            chkPC_hdr.Checked = False
            chkPC_hdr.Enabled = True

            txtCusSub.Enabled = False

            cmdSave.Enabled = Enq_right_local 'True
            'If OldItemRecord = True Then
            '    cmdReset.Enabled = Enq_right_local
            'Else
            '    cmdReset.Enabled = False
            'End If
            cmdDelete.Enabled = False
            cmdAdd.Enabled = False
            cmdFind.Enabled = False
            cmdSearch.Enabled = False
            cmdCopy.Enabled = False
            Call SetStatusBar(Mode)

            cboDtlPrcTrm.Enabled = False
            cboFtyPrcTrm.Enabled = False
            '*** Phase 2
            cboTranTrm.Enabled = False

            chkApprove.Enabled = False
            txtQutNo.Enabled = False
            txtQutSts.Enabled = False
            txtIssDat.Enabled = False
            txtRvsDat.Enabled = False
            txtCus1Ad.Enabled = False
            txtCus1St.Enabled = False
            txtCus1Cy.Enabled = False
            txtCus1Zp.Enabled = False
            cboCus1Cp.Enabled = False
            cboCus2No.Enabled = False
            txtCus2Ad.Enabled = False
            txtCus2St.Enabled = False
            txtCus2Cy.Enabled = False
            txtCus2Zp.Enabled = False
            cboCus2Cp.Enabled = False
            optActive.Enabled = False
            optPassive.Enabled = False
            cboSmpPrd.Enabled = False
            cboSmpFgt.Enabled = False
            txtPrcTrm.Enabled = False
            txtPayTrm.Enabled = False
            txtCurCde.Enabled = False
            txtValDat.Enabled = False

            txtIssDat.Text = Today.ToShortDateString
            txtRvsDat.Text = Today.ToShortDateString
            txtValDat.Text = Today.AddDays(gsExpDay).ToShortDateString

            '*** Details
            txtSeq.Enabled = False

            '*** Phase 2
            txtItmNoReal.Enabled = True
            txtItmNoTmp.Enabled = True
            txtItmNoVen.Enabled = True
            cboItmNoVen.Enabled = False
            chkApproveDtl.Enabled = False
            chkApproveDtl.Checked = False
            txtColCde.Enabled = False

            cboUM.Enabled = False
            txtInrQty.Enabled = False
            txtMtrQty.Enabled = False
            txtPeriod.Enabled = False
            'txtQutDat.Enabled = False
            txtCft.Enabled = False
            txtCBM.Enabled = False
            txtMoq.Enabled = False
            txtCurCde1.Enabled = False
            txtCurrMOQ.Enabled = False
            txtAmountMOQ.Enabled = False

            txtMoa.Enabled = False
            txtSmpUnt.Enabled = False
            txtSmpQty.Enabled = False
            txtSmpPrc.Enabled = False
            cboItmSts.Enabled = False
            txtQutItmSts.Enabled = False
            'txtHstRef.Enabled = False
            txtCurCde2.Enabled = False
            txtCus1Sp.Enabled = False
            txtCurCde3.Enabled = False

            '*** Phase 2
            txtPckCstAmt.Enabled = True
            txtItmCommAmt.Enabled = True
            txtBasPrc.Enabled = False
            chkApproveDtl.Enabled = False
            chkApproveDtl.Checked = False

            txtCurCde2.Enabled = False
            txtCus2Sp.Enabled = False
            txtCurCde3.Enabled = False
            txtFCurCde.Enabled = False
            txtCurCde7.Enabled = False
            txtCus2Dp.Enabled = False

            txtDtyRat.Enabled = False
            cboVenNo.Enabled = True
            txtSubCde.Enabled = False
            txtVenItm.Enabled = False
            txtFtyPrc.Enabled = False
            txtFtyCst.Enabled = False
            optImageY.Enabled = False
            optImageN.Enabled = False
            txtCosMth.Enabled = False
            optOneTimN.Checked = True
            optImageN.Checked = True
            cmdBackD.Enabled = False
            cmdNextD.Enabled = False
            cmdAss.Enabled = False
            cmdUpdItm.Enabled = True  '''20130826cmdUpdItm.Enabled = False
            'cmdUpdPrc.Enabled = False
            cmdUpdateMO.Enabled = False
            cmdTBM.Enabled = False
            txtCIHprc.Enabled = False
            txtCIHcur.Enabled = False
            'txtSpecpck.Enabled = True
            auth = False
            bolLatestQut = False

            'cmdUpdCurEx.Enabled = False

            '*** Quotation Details
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_QUOTNDTL '',''"
            rtnLong = execute_SQLStatement(gspStr, rs_QUOTNDTL, rtnStr)
            gspStr = ""

            '''' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading setStatus sp_select_QUOTNDTL :" & rtnStr)
                '''' Cursor = Cursors.Default
                Exit Sub
            Else
                For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Columns.Count - 1
                    rs_QUOTNDTL.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                'drNewRow = rs_QUOTNDTL.Tables("RESULT").NewRow()
                'drNewRow("mode") = "NEW"
                'drNewRow("qud_apprve") = ""
                'rs_QUOTNDTL.Tables("RESULT").Rows.Add(drNewRow)
                Call insert_QUOTNDTL(True)
                rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("mode") = "NEW"
                rs_QUOTNDTL.Tables("RESULT").Rows(0).Item("qud_apprve") = ""


                Call display_dgOthDtl("A")

                optImageN.Checked = True

                Insert_flag = True
                txtSeq.Text = rs_QUOTNDTL.Tables("RESULT").Rows.Count

                '*** Phase 2
                '*** Price Element
                '''' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_QUPRCEMT '" & cboCoCde.Text & "','',''"
                rtnLong = execute_SQLStatement(gspStr, rs_QUPRCEMT, rtnStr)
                gspStr = ""

                '''' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading setStatus sp_select_QUPRCEMT :" & rtnStr)
                    '''' Cursor = Cursors.Default
                    Exit Sub
                End If

                For i As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Columns.Count - 1
                    rs_QUPRCEMT.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                '*** Component Breakdwon
                '''' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_QUCPTBKD '" & cboCoCde.Text & "',''"
                rtnLong = execute_SQLStatement(gspStr, rs_QUCPTBKD, rtnStr)
                gspStr = ""

                '''' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading setStatus sp_select_QUCPTBKD :" & rtnStr)
                    '''' Cursor = Cursors.Default
                    Exit Sub
                End If

                For i As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Columns.Count - 1
                    rs_QUCPTBKD.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                '*** Assortment Item Information
                '''' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_QUASSINF '" & cboCoCde.Text & "',''"
                rtnLong = execute_SQLStatement(gspStr, rs_QUASSINF, rtnStr)

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading setStatus sp_select_QUASSINF :" & rtnStr)
                    '''' Cursor = Cursors.Default
                    Exit Sub
                End If

                For i As Integer = 0 To rs_QUASSINF.Tables("RESULT").Columns.Count - 1
                    rs_QUASSINF.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_QUDTLSHP '" & cboCoCde.Text & "',''"
                rtnLong = execute_SQLStatement(gspStr, rs_QUDTLSHP, rtnStr)

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading setStatus sp_select_QUDTLSHP :" & rtnStr)
                    '''' Cursor = Cursors.Default
                    Exit Sub
                End If

                For i As Integer = 0 To rs_QUDTLSHP.Tables("RESULT").Columns.Count - 1
                    rs_QUDTLSHP.Tables("RESULT").Columns(i).ReadOnly = False
                Next i




                '*** Additional Information
                '*** Phase 2 comment it
                'Cursor = Cursors.WaitCursor

                'gsCompany = Trim(cboCoCde.Text)
                'Call Update_gs_Value(gsCompany)

                'gspStr = "sp_select_QUADDINF '" & cboCoCde.Text & "',''"
                'rtnLong = execute_SQLStatement(gspStr, rs_QUADDINF, rtnStr)
                'gspStr = ""

                'Cursor = Cursors.Default

                'If rtnLong <> RC_SUCCESS Then
                '    MsgBox("Error on loading setStatus sp_select_QUADDINF :" & rtnStr)
                '   '''' Cursor = Cursors.Default
                '    Exit Sub
                'End If

                'For i As Integer = 0 To rs_QUADDINF.Tables("RESULT").Columns.Count - 1
                '    rs_QUADDINF.Tables("RESULT").Columns(i).ReadOnly = False
                'Next i

                '*** Cost Element
                'Cursor = Cursors.WaitCursor

                'gsCompany = Trim(cboCoCde.Text)
                'Call Update_gs_Value(gsCompany)

                'gspStr = "sp_select_QUCSTEMT '" & cboCoCde.Text & "',''"
                'rtnLong = execute_SQLStatement(gspStr, rs_QUCSTEMT, rtnStr)
                'gspStr = ""

                'Cursor = Cursors.Default

                'If rtnLong <> RC_SUCCESS Then
                '    MsgBox("Error on loading setStatus sp_select_QUCSTEMT :" & rtnStr)
                '   '''' Cursor = Cursors.Default
                '    Exit Sub
                'End If

                'For i As Integer = 0 To rs_QUCSTEMT.Tables("RESULT").Columns.Count - 1
                '    rs_QUCSTEMT.Tables("RESULT").Columns(i).ReadOnly = False
                'Next i

                '*** ELC
                'Cursor = Cursors.WaitCursor

                'gsCompany = Trim(cboCoCde.Text)
                'Call Update_gs_Value(gsCompany)

                'gspStr = "sp_select_QUELC '" & cboCoCde.Text & "',''"
                'rtnLong = execute_SQLStatement(gspStr, rs_QUELC, rtnStr)
                'gspStr = ""

                'Cursor = Cursors.Default

                'If rtnLong <> RC_SUCCESS Then
                '    MsgBox("Error on loading setStatus sp_select_QUELC :" & rtnStr)
                '   '''' Cursor = Cursors.Default
                '    Exit Sub
                'End If

                'For i As Integer = 0 To rs_QUELC.Tables("RESULT").Columns.Count - 1
                '    rs_QUELC.Tables("RESULT").Columns(i).ReadOnly = False
                'Next i

                '*** ELC Details
                'Cursor = Cursors.WaitCursor

                'gsCompany = Trim(cboCoCde.Text)
                'Call Update_gs_Value(gsCompany)

                'gspStr = "sp_select_QUELCDTL '" & cboCoCde.Text & "',''"
                'rtnLong = execute_SQLStatement(gspStr, rs_QUELCDTL, rtnStr)
                'gspStr = ""

                'Cursor = Cursors.Default

                'If rtnLong <> RC_SUCCESS Then
                '    MsgBox("Error on loading setStatus sp_select_QUELCDTL :" & rtnStr)
                '   '''' Cursor = Cursors.Default
                '    Exit Sub
                'End If

                'For i As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Columns.Count - 1
                '    rs_QUELCDTL.Tables("RESULT").Columns(i).ReadOnly = False
                'Next i

                'modify
                ''cboCusals.Enabled = False
                txtUPC.Enabled = False
                '*** Phase 2 comment it
                'dgAddInf.DataSource = Nothing
                'dgCstEmt.DataSource = Nothing
                'dgELC.DataSource = Nothing
                'dgELCDtl.DataSource = Nothing
                'Call SetHeaderBarValue(False)

                Call SetHdrYear()
                Call SetHdrSeason()

                txtInrdin.Text = "0"
                txtInrwin.Text = "0"
                txtInrhin.Text = "0"
                txtMtrdin.Text = "0"
                txtMtrwin.Text = "0"
                txtMtrhin.Text = "0"

                txtInrdcm.Text = "0"
                txtInrwcm.Text = "0"
                txtInrhcm.Text = "0"
                txtMtrdcm.Text = "0"
                txtMtrwcm.Text = "0"
                txtMtrhcm.Text = "0"

                txtGrswgt.Text = "0"
                txtNetwgt.Text = "0"

                cboCusals.Items.Clear()
                cboCusals.Text = ""
                txtUPC.Text = ""
                txtCBM.Text = ""
                txtDtyRat.Text = ""
                '*** Phase 2 comment it
                'txtSpecpck.Text = ""
                'txtPMU.Text = ""
                'txtPMU.Enabled = False
                'cboCustItmCat.Items.Clear()
                'cboCustItmCat.Text = ""
                strApprMax = "N/A"
                strApprMin = "N/A"
                flgUpdItm = False
                chkFtyTmpItm.Checked = False
                chkFtyTmpItm.Enabled = False
                txtFtyTmpItmNo.Text = ""
                '*** Phase 2 comment it
                'txtFtyTmpItmNo.Visible = False
                'flggrdMatbkd = False
                txtUPC.Enabled = False
                txtIMRmk.Text = ""
                dgMatBkd.DataSource = Nothing
                lblCurrMOQ.Text = ""

                cboCus1No.Enabled = True
                '*** Phase 2 comment it
                'txtItmNo.Enabled = True
            End If
            OldItemRecord = False
        ElseIf Mode = cModeUpd Then
            Call SetInputBoxesStatus("EnableAll")

            bolUpdating = True

            gbShipdate.Enabled = True

            txtHDRFtyShpDateStr.Enabled = True
            txtHDRFtyShpDateEnd.Enabled = True
            txtHDRCustShpDateStr.Enabled = True
            txtHDRCustShpDateEnd.Enabled = True

            txtAlias.Enabled = False
            txtAlias.Text = ""
            txtAlscolcde.Enabled = False
            txtAlscolcde.Text = ""

            txtCusSub.Enabled = False
            cmdAdd.Enabled = False

            cmdSave.Enabled = Enq_right_local 'True
            ''If OldItemRecord = True Then
            ''    cmdReset.Enabled = Enq_right_local
            ''Else
            ''    cmdReset.Enabled = False
            ''End If
            '''20130909
            cmdUpdate.Enabled = True
            cmdRenew.Enabled = True

            cmdDelete.Enabled = False 'Del_right
            cmdFind.Enabled = False
            cmdSearch.Enabled = False
            'cmdspecial.Enabled = False
            'CmdLookup.Enabled = True
            'cmdInsRow.Enabled = Enq_right_local 'True
            'cmdDelRow.Enabled = Del_right_local 'True

            If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString() <> "" Then
                If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                    Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                    cmdInsRow.Enabled = False
                    cmdDelRow.Enabled = False
                Else
                    cmdInsRow.Enabled = Enq_right_local 'True
                    cmdDelRow.Enabled = Del_right_local 'True
                End If
            Else
                If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                    cmdInsRow.Enabled = False
                    cmdDelRow.Enabled = False
                Else
                    cmdInsRow.Enabled = Enq_right_local 'True
                    cmdDelRow.Enabled = Del_right_local 'True
                End If
            End If

            cmdExit.Enabled = True
            cmdClear.Enabled = True
            ''''''20130826   cmdReset.Enabled = True

            '*** Header
            txtQutNo.Enabled = False
            txtQutSts.Enabled = False
            txtIssDat.Enabled = False
            txtRvsDat.Enabled = False
            cboCus1No.Enabled = False
            txtCus1Ad.Enabled = False
            txtCus1St.Enabled = False
            txtCus1Cy.Enabled = False
            txtCus1Zp.Enabled = False

            cboDtlPrcTrm.Enabled = False
            cboFtyPrcTrm.Enabled = False
            '*** Phase 2
            cboTranTrm.Enabled = False

            cboCus2No.Enabled = False
            txtCus2Ad.Enabled = False
            txtCus2St.Enabled = False
            txtCus2Cy.Enabled = False
            txtCus2Zp.Enabled = False
            If cboCus2Cp.Text = "" Then
                cboCus2Cp.Enabled = False
            End If
            optActive.Enabled = False
            optPassive.Enabled = False
            cboCusAgt.Enabled = False
            cboSmpPrd.Enabled = False
            cboSmpFgt.Enabled = False
            txtPrcTrm.Enabled = False
            txtPayTrm.Enabled = False
            txtCurCde.Enabled = False
            txtValDat.Enabled = False

            If Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "A" Then
                chkCancel.Enabled = Del_right_local 'True
                chkApprove.Enabled = False
            ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "E" Then
                chkCancel.Enabled = False
                chkApprove.Enabled = False
                'ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "C" Then
                '    chkCancel.Enabled = False
                '    chkApprove.Enabled = False
            ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "W" And gsUsrRank <= 3 Then
                chkCancel.Enabled = Del_right_local 'True
                chkApprove.Enabled = True
            ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "W" And gsUsrRank > 3 Then
                chkCancel.Enabled = False
                chkApprove.Enabled = False
                'ElseIf Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "H" Then
                '    chkCancel.Enabled = False
                '    chkApprove.Enabled = False
            End If

            '*** Detail
            txtSeq.Enabled = False

            '*** Phase 2
            txtItmNoReal.Enabled = False
            txtItmNoTmp.Enabled = False
            txtItmNoVen.Enabled = False
            chkApproveDtl.Enabled = False
            chkApproveDtl.Checked = False

            cboColCde.Enabled = False
            txtColCde.Enabled = False
            cboPcking.Enabled = False
            cboUM.Enabled = False
            txtInrQty.Enabled = False
            txtMtrQty.Enabled = False
            txtCft.Enabled = False
            txtCBM.Enabled = False
            txtPeriod.Enabled = False
            'txtQutDat.Enabled = False
            txtMoq.Enabled = False
            txtCurCde1.Enabled = False

            txtCurrMOQ.Enabled = False
            txtAmountMOQ.Enabled = False

            txtMoa.Enabled = False
            txtSmpUnt.Enabled = False
            txtSmpQty.Enabled = False
            txtSmpPrc.Enabled = False
            cboItmSts.Enabled = False
            txtQutItmSts.Enabled = False
            'txtHstRef.Enabled = False
            txtCurCde2.Enabled = False
            txtCus1Sp.Enabled = False
            txtCurCde3.Enabled = False
            txtCurCde2.Enabled = False
            txtCus2Sp.Enabled = False
            txtCurCde3.Enabled = False
            txtFCurCde.Enabled = False
            txtCurCde7.Enabled = False
            txtCus2Dp.Enabled = False
            txtDtyRat.Enabled = False
            cboVenNo.Enabled = True
            txtSubCde.Enabled = False
            txtVenItm.Enabled = False
            txtFtyPrc.Enabled = False
            txtFtyCst.Enabled = False
            optImageY.Enabled = False
            optImageN.Enabled = False
            txtCosMth.Enabled = False
            txtCIHprc.Enabled = False
            txtCIHcur.Enabled = False
            cmdAss.Enabled = False

            txtUMFtr.Enabled = False
            txtUMFtr.Text = ""
            txtPCPrc.Enabled = False

            '*** Phase 2
            cmdPrcEmt.Enabled = True
            txtPckCstAmt.Enabled = True
            txtItmCommAmt.Enabled = True
            txtBasPrc.Enabled = False

            txtPCPrcCur.Enabled = False
            chkPC.Visible = False
            chkPC.Enabled = False
            chkPC.Checked = False

            lblCurrMOQ.Text = ""

            ''cboCusals.Enabled = False
            chkFtyTmpItm.Enabled = False
            chkFtyTmpItm.Checked = False
            txtFtyTmpItmNo.Text = ""
            '*** Phase 2 comment it
            'txtFtyTmpItmNo.Visible = False
            'flggrdMatbkd = False
            'txtCALPMU.Enabled = True
            'txtSpecpck.Enabled = True
            txtUPC.Enabled = False
            cboRndSts.Enabled = True
            auth = False

            '*** Freeze the Quotation
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Then
                Call freeze_Quotation()
            End If

            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "H" Then
                'cmdReset.Enabled = False
            ElseIf Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Then
                chkCancel.Checked = False
            End If

            '*** Reset the flag
            bolLatestQut = False
            'Recordstatus = False
            Insert_flag = False
            Call SetStatusBar(Mode)
        ElseIf Mode = cModeSave Then
            Call SetStatusBar(Mode)
            If Add_flag = True Then
                txtQutNo.Text = qutNo
            End If
            MsgBox("Record Saved!")
            copy_flag = False

            rs_QUOTNHDR.Tables.Clear()
            rs_QUOTNDTL.Tables.Clear()
            '*** Phase 2
            rs_QUPRCEMT.Tables.Clear()

            rs_QUCPTBKD.Tables.Clear()
            rs_QUASSINF.Tables.Clear()
            '*** Phase 2 comment it
            'rs_QUADDINF.Tables.Clear()
            'rs_QUCSTEMT.Tables.Clear()
            'rs_QUELC.Tables.Clear()
            'rs_QUELCDTL.Tables.Clear()
            ori_qce_amt = "0"
            ori_qce_percent = "0"
            ori_qed_percent = "0"

            Call setStatus(cModeInit)
            sMode = cModeInit
            OldItemRecord = False
        ElseIf Mode = cModeDel Then
            Call SetStatusBar(Mode)
            OldItemRecord = False
        ElseIf Mode = cModeClear Then
            Call setStatus(cModeInit)
            sMode = cModeInit
            Call SetStatusBar(Mode)

            QuotCopyFlag = False
            rs_QUOTNHDR.Tables.Clear()
            rs_QUOTNDTL.Tables.Clear()
            '*** Phase 2
            rs_QUPRCEMT.Tables.Clear()

            rs_QUCPTBKD.Tables.Clear()
            rs_QUASSINF.Tables.Clear()
            '*** Phase 2 comment it
            'rs_QUADDINF.Tables.Clear()
            'rs_QUCSTEMT.Tables.Clear()
            'rs_QUELC.Tables.Clear()
            'rs_QUELCDTL.Tables.Clear()
            ori_qce_amt = "0"
            ori_qce_percent = "0"
            ori_qed_percent = "0"

            If txtQutNo.Enabled And txtQutNo.Visible Then
                txtQutNo.Focus()
            End If

            bolLatestQut = False
            auth = False
            OldItemRecord = False

        ElseIf Mode = cModeRead Then
            cmdPrcEmt.Enabled = True

        End If
       '' Cursor = Cursors.Default
    End Sub

    Private Sub ResetDefaultDisp()
        dgOthDtl.DataSource = Nothing
        dgMatBkd.DataSource = Nothing

        '*** Header
        txtQutSts.Text = ""
        txtIssDat.Text = ""
        txtRvsDat.Text = ""
        chkDelete.Checked = False
        chkCancel.Checked = False
        chkApprove.Checked = False

        cboCus1No.Text = ""
        txtCus1Ad.Text = ""
        txtCus1St.Text = ""
        txtCus1Cy.Text = ""
        txtCus1Zp.Text = ""
        cboCus1Cp.Text = ""
        '*** Phase 2
        cboCus1CgInt.Text = ""
        cboCus1CgExt.Text = ""

        cboCus2No.Text = ""
        txtCus2Ad.Text = ""
        txtCus2St.Text = ""
        txtCus2Cy.Text = ""
        txtCus2Zp.Text = ""
        cboCus2Cp.Text = ""
        optActive.Checked = False
        optPassive.Checked = False

        cboCusAgt.Text = ""
        '*** Phase 2
        cboSalDiv.Text = ""

        cboSalRep.Text = ""
        cboSmpPrd.Text = ""
        cboSmpFgt.Text = ""
        txtPrcTrm.Text = ""
        txtPayTrm.Text = ""
        txtCurCde.Text = ""
        txtValDat.Text = ""
        txtRmk.Text = ""

        '*** Details
        txtSeq.Text = ""
        txtItmNo.Text = ""
        '*** Phase 2
        txtItmNoReal.Text = ""
        txtItmNoTmp.Text = ""
        txtItmNoVen.Text = ""
        cboItmNoVen.text = ""
        '*** Phase 2 comment it
        'chkTBM.Checked = False
        txtItmDsc.Text = ""
        cboColCde.Items.Clear()
        cboColCde.Text = ""
        '*** Phase 2
        txtColCde.Text = ""

        txtCusCol.Text = ""
        txtCusItm.Text = ""
        txtColDsc.Text = ""
        txtCusItm.Text = ""
        cboPcking.Text = ""

        cboUM.Text = ""
        txtInrQty.Text = ""
        txtMtrQty.Text = ""
        txtPeriod.Text = ""
        'txtQutDat.Text = ""
        txtCft.Text = ""
        txtCBM.Text = ""

        txtMoq.Text = ""
        txtCurCde1.Text = ""

        txtCurrMOQ.Text = ""
        txtAmountMOQ.Text = ""
        txtMoa.Text = ""

        ORI_MOQ = "0"
        ORI_MOA = "0"
        ORI_MOFLAG = ""
        optMOQ.Checked = False
        optMOA.Checked = False

        txtNote.Text = ""
        txtPckItr.Text = ""
        txtSmpUnt.Text = ""
        txtSmpQty.Text = ""
        txtSmpPrc.Text = ""
        txtStkQty.Text = ""
        txtCusQty.Text = ""
        cboItmSts.Items.Clear()
        cboItmSts.Text = ""
        txtQutItmSts.Text = ""
        'txtHstRef.Text = ""

        '*** Phase 2
        txtTOOrdQty.Text = ""
        txtTOShipport.Text = ""
        cboTOFty.Text = ""
        txtDTLFtyShpDateStr.Text = "01/01/1900" 'Today.ToShortDateString
        txtDTLFtyShpDateEnd.Text = "01/01/1900" 'Today.ToShortDateString
        '*** Phase 2
        txtPckCstAmt.Text = ""
        txtItmCommAmt.Text = ""
        txtBasPrc.Text = ""
        cboCusUsdCurr.Text = "USD"
        cboCusCadCurr.Text = "CAD"

        'txtDiscnt.Text = "0"
        'txtDiscntP.Text = "0"
        optOneTimY.Checked = False
        optOneTimN.Checked = False
        optGM.Checked = False
        optMU.Checked = False
        txtGrsMgn.Text = ""
        txtCurCde2.Text = ""
        txtCus1Sp.Text = ""
        txtCus1SpP.Text = ""
        txtCurCde3.Text = ""
        txtCus2Sp.Text = ""
        txtCus1Dp.Text = ""
        txtCus1DpP.Text = ""
        txtCurCde3.Text = ""
        txtFCurCde.Text = ""
        txtCurCde7.Text = ""
        txtCus2Dp.Text = ""
        txtDtyRat.Text = ""
        txtCusUsd.Text = ""
        txtCusCad.Text = ""
        txtDept.Text = ""
        '        cboVenNo.Items.Clear()
        cboVenNo.Text = ""
        '        cboCusVen.Items.Clear()
        cboCusVen.Text = ""
        '        cboDV.Items.Clear()
        cboDV.Text = ""
        '        cboTV.Items.Clear()
        cboTV.Text = ""
        '        cboFA.Items.Clear()
        cboFA.Text = ""
        '        cboItmNoVen.Items.Clear()
        cboItmNoVen.text = ""

        cboFtyPrcTrm.Text = ""
        txtCusSub.Text = ""
        txtSubCde.Text = ""
        txtVenItm.Text = ""
        txtFtyPrc.Text = ""
        txtFtyCst.Text = ""
        txtCIHprc.Text = ""
        txtCIHcur.Text = ""
        txtPrcKey.Text = ""
        txtEffDat.Text = ""
        txtExpDat.Text = ""

        cboDtlPrcTrm.Text = ""
        cboFtyPrcTrm.Text = ""
        '*** Phase 2
        cboTranTrm.Text = ""
        chkApproveDtl.Enabled = False
        chkApproveDtl.Checked = False
        txtPrcKey.Text = ""
        txtEffDat.Text = ""
        txtExpDat.Text = ""

        optImageY.Checked = False
        optImageN.Checked = False
        chkDelete.Checked = False

        StatusBar.Panels(0).Text = ""
        StatusBar.Panels(1).Text = ""

        txtCIHprc.Enabled = False
        txtCIHcur.Enabled = False

        '*** Header
        txtDeptH.Text = ""
        cboYear.Items.Clear()
        cboYear.Text = ""
        cboSeason.Items.Clear()
        cboSeason.Text = ""
        txtDesc.Text = ""

        'Detail
        txtInrdin.Text = "0"
        txtInrwin.Text = "0"
        txtInrhin.Text = "0"
        txtMtrdin.Text = "0"
        txtMtrwin.Text = "0"
        txtMtrhin.Text = "0"

        txtInrdcm.Text = "0"
        txtInrwcm.Text = "0"
        txtInrhcm.Text = "0"
        txtMtrdcm.Text = "0"
        txtMtrwcm.Text = "0"
        txtMtrhcm.Text = "0"

        txtGrswgt.Text = "0"
        txtNetwgt.Text = "0"

        cboCusals.Items.Clear()
        cboCusals.Text = ""

        txtUPC.Text = ""
        '*** Phase 2 comment it
        'txtSpecpck.Text = ""
        txtCBM.Text = ""
        txtDtyRat.Text = ""
    End Sub

    Private Sub SetInputBoxesStatus(ByVal Mode As String)
        '*** Set which input boxes are disabled according to "Mode"
        Dim v As Object

        '*** (1) If Mode = "EnableAll", enable all controls
        If Mode = "EnableAll" Then
            For Each v In Me.Controls
                If IsInputBoxes(v) Then
                    ' v.Enabled = True
                End If
            Next
            cboCoCde.Enabled = False

            'If EditModeHdr = cModeAdd Then
            '    cmdSave.Enabled = False
            '    cmdRenew.Enabled = False
            '    cmdDelete.Enabled = False
            'ElseIf EditModeHdr = cModeUpd Then
            '    cmdAdd.Enabled = False
            'End If

            btcQUM00001.TabPages(2).Enabled = True
            'btcQUM00001.TabPages(3).Enabled = False

            '*** (2) If Mode = "DisableAll", disable all controls
        ElseIf Mode = "DisableAll" Then
            For Each v In Me.Controls
                If IsInputBoxes(v) Then
                    ' v.Enabled = False
                End If
            Next
            cboCoCde.Enabled = True
        End If
        txtCoNam.Enabled = False
    End Sub

    Private Function IsInputBoxes(ByVal v As Object) As Boolean
        '*** check whether the object "v" is an input box
        If (TypeOf v Is TextBox) Or (TypeOf v Is CheckBox) Or _
           (TypeOf v Is ComboBox) Or (TypeOf v Is Button) Or _
           (TypeOf v Is RichTextBox) Or _
           (TypeOf v Is ListBox) Or (TypeOf v Is RadioButton) Or _
           (TypeOf v Is DataGridView) Or (TypeOf v Is BaseTabControl) Or _
           (TypeOf v Is MaskedTextBox) Or _
           (TypeOf v Is GroupBox) Then
            IsInputBoxes = True
        Else
            IsInputBoxes = False
        End If
    End Function

    Private Sub SetStatusBar(ByVal Mode As String)
        If Mode = cModeInit Then
            StatusBar.Panels(0).Text = cModeInit
        ElseIf Mode = cModeAdd Then
            StatusBar.Panels(0).Text = cModeAdd
        ElseIf Mode = cModeUpd Then
            StatusBar.Panels(0).Text = cModeUpd
        ElseIf Mode = cModeSave Then
            StatusBar.Panels(0).Text = "Record Saved"
        ElseIf Mode = cModeDel Then
            StatusBar.Panels(0).Text = "Record Deleted"
        ElseIf Mode = cModeRead Then
            StatusBar.Panels(0).Text = "Read Only"
        ElseIf Mode = cModeClear Then
            StatusBar.Panels(0).Text = "Clear Screen"
        End If
    End Sub

    Private Sub freeze_Quotation()
        Call SetInputBoxesStatus("DisableAll")
        cmdClear.Enabled = True
        ''''''20130826   cmdReset.Enabled = True

        cmdExit.Enabled = True
        btcQUM00001.Enabled = True
        cmdBackD.Enabled = True
        cmdNextD.Enabled = True
        dgOthDtl.Enabled = True
        txtItmDsc.Enabled = True
        txtCusCol.Enabled = True
        txtColDsc.Enabled = True
        txtNote.Enabled = True
        txtPckItr.Enabled = True
        txtCusItm.Enabled = True
        txtRmk.Enabled = True
        txtIMRmk.Enabled = True
    End Sub

    Public Sub txtPCPrcGotFocus()
        PCPrc_Flag = True
        '        txtPCPrc.SelectAll()
    End Sub

    Public Sub txtPCPrcLostFocus()
        PCPrc_Flag = False
        If IsNumeric(txtPCPrc.Text) = False Then
            txtPCPrc.Text = "0"
            txtPCPrc_Text_round_5 = 0

        Else
            txtPCPrc.Text = round(txtPCPrc.Text, cus1_rounding)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5
            '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1Dp.Text.Trim

            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()

            ''
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If optGM.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                ElseIf optMU.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                Else
                    txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If
            Else
                txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                
                txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
            End If


        End If
    End Sub
    Public Sub txtPCPrcPLostFocus()
        PCPrcP_Flag = False
        If IsNumeric(txtPCPrcP.Text) = False Then
            txtPCPrcP.Text = "0"
            txtPCPrcP_Text_round_5 = "0"

        Else
            txtPCPrcP.Text = round(txtPCPrcP.Text, cus1_rounding)


            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_PCPrc") = txtPCPrcP_Text_round_5
            '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_PCPrcP") = txtCus1Dp.Text.Trim

            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()

            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If optGM.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                ElseIf optMU.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                Else
                    txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If
            Else
                txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                
                txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
            End If



        End If
    End Sub

    Private Sub GetCusSty(ByVal strItm As String)
        '*** Show Customer Alias
        Dim rsCusals As New DataSet

        cboCusals.Items.Clear()
        cboCusals.Text = ""

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCUSSTY_QU '" & cboCoCde.Text & "','" & strItm & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ")) & "'"
        rtnLong = execute_SQLStatement(gspStr, rsCusals, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading GetCusSty sp_select_IMCUSSTY_QU :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        If rsCusals.Tables("RESULT").Rows.Count > 0 Then
            cboCusals.Items.Add("")
            For index As Integer = 0 To rsCusals.Tables("RESULT").Rows.Count - 1
                cboCusals.Items.Add(rsCusals.Tables("RESULT").Rows(index)("ics_cusstyno").ToString)
            Next

            cboCusals.SelectedIndex = 0
            cboCusals.Enabled = True
        Else
            cboCusals.Items.Clear()
            cboCusals.Text = ""
            ''cboCusals.Enabled = False
        End If
    End Sub

    Private Sub ShowFooterBar(ByVal blnShow As Boolean)
        '*** Phase 2
        cmdCptBkd.Visible = blnShow

        cmdAss.Visible = blnShow
        cmdUpdateMO.Visible = blnShow
        cmdUpdItm.Visible = blnShow
        'cmdTBM.Visible = blnShow
        cmdNextD.Visible = blnShow
        cmdBackD.Visible = blnShow
        chkDelete.Visible = blnShow
    End Sub

    Private Sub ConvertMtr(ByVal oper As String, ByVal dblOri As Double, ByVal c As TextBox)
        Dim dblValue As Double

        If rs_MtrConvert.Tables.Count = 0 Then
            gspStr = "sp_select_SYCONFTR_SC '" & cboCoCde.Text & "','inch','cm'"
            rtnLong = execute_SQLStatement(gspStr, rs_MtrConvert, rtnStr)
            gspStr = ""
            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading ConvertMtr sp_select_SYCONFTR_SC :" & rtnStr)
                Exit Sub
            End If
        End If

        If rs_MtrConvert.Tables("RESULT").Rows.Count > 0 Then
            dblValue = CDbl(IIf(IsDBNull(rs_MtrConvert.Tables("RESULT").Rows(0)("ycf_value")) = True, 0, rs_MtrConvert.Tables("RESULT").Rows(0)("ycf_value")))

            If oper = "*" Then
                c.Text = CStr(round(dblOri * dblValue, 4))
            ElseIf oper = "/" Then
                c.Text = CStr(round(dblOri / dblValue, 4))
            End If
        End If
    End Sub

    Private Sub displayMOQMOA(Optional ByVal strAction As String = "")
        optMOQ.Enabled = False
        optMOA.Enabled = False

        If strAction = "UPD" Then
            txtMoq.Text = ORI_MOQ
        Else
            txtMoq.Text = IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moq"))
        End If

        optMOA.Checked = False
        optMOQ.Checked = False

        If ORI_MOFLAG = "A" Or (ORI_MOQ <> "0" And ORI_MOA <> "0") Then
            If strAction = "UPD" Then
                txtMoa.Text = Format(CDec(Val(ORI_MOA)), "###,###,##0")
            Else
                txtMoa.Text = Format(CDec(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_moa").ToString)), "###,###,##0")
            End If
        Else
            txtMoa.Text = ""
        End If

        If ORI_MOFLAG = "Q" Then
            optMOQ.Checked = True
        ElseIf ORI_MOFLAG = "A" Then
            optMOA.Checked = True
        End If

        Call setMOQMOA()
    End Sub

    Private Sub setMOQMOA()
        If optMOQ.Checked = True Or ORI_MOFLAG = "A" Then
            Call txtMOQTextChanged()
        End If

        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
            Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
            Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Then
            Exit Sub
        End If

        If optMOQ.Checked = True Then
            txtMoq.Enabled = True
            txtMoa.Enabled = False
        ElseIf optMOA.Checked = True Then
            txtMoa.Enabled = True
            txtMoq.Enabled = False
        End If
    End Sub

    Private Function updateMOQMOA(Optional ByVal bolShow As Boolean = True) As Boolean
        ORI_MOFLAG = ""
        ORI_MOQ = "0"
        ORI_MOA = "0"

        Call retrieveMOQMOA()

        If org_MOFLAG_tmp = "" And org_MOQ_tmp = "0" And org_MOA_tmp = "0" And _
            org_Curr_tmp = "" And org_QUTNO_tmp = "" And org_DATASRC_tmp = "" Then
            Exit Function
        End If

        '*** Show Message if Original MOQ/MOA is retrieve from IM instead of CIH
        If org_DATASRC_tmp = "I" And bolShow = True Then
            MsgBox("CIH MOQ/MOA value lower than that in Item Master!", vbInformation)
            bolUPdate_MOQ_MOA = False
        End If

        ORI_MOQ = org_MOQ_tmp
        ORI_MOFLAG = org_MOFLAG_tmp
        ORI_MOA = org_MOA_tmp

        Call displayMOQMOA("UPD")
    End Function

    Private Function retrieveMOQMOA() As Boolean
        org_MOFLAG_tmp = ""
        org_MOQ_tmp = "0"
        org_MOA_tmp = "0"
        org_Curr_tmp = ""
        org_QUTNO_tmp = ""
        org_IM_MOQ_tmp = "0"
        org_IM_MOA_tmp = "0"
        org_DATASRC_tmp = ""

        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If cboPcking.Text = "" Or cboPcking.Text = " / 0 / 0 / 0 / 0 / / /" Then Exit Function
            'If cboPcking.Text = "" Or cboPcking.Text = " / 0 / 0" Then Exit Function
        Else
            If cboUM.Text = "" Or txtCft.Text = "0" Then Exit Function
        End If

        Dim cus1no As String
        Dim cus2no As String

        If Trim(cboCus1No.Text) = "" Then
            cus1no = ""
        Else
            cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If Trim(cboCus2No.Text) = "" Then
            cus2no = ""
        Else
            cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

        Try
           '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            'avoid /  zero
            If txtMtrQty.Text.Trim = "0" Then
                txtMtrQty.Text = "1"
            End If

            gspStr = "sp_select_ItemMaster_moq_moa_qu_wunttyp '" & cboCoCde.Text & "','" & _
                                                        GetCtrlValue(cboCus1No) & "','" & _
                                                        GetCtrlValue(cboCus2No) & "','" & _
                                                        txtItmNo.Text & "','" & _
                                                        cboUM.Text & "','" & _
                                                        IIf(txtUMFtr.Text = "", 1, txtUMFtr.Text) & "','" & _
                                                        txtInrQty.Text & "','" & _
                                                        txtMtrQty.Text & "','" & _
                                                        cboColCde.Text & "','" & _
                                                        IIf(txtCus1Sp.Text = "", 0, CDbl(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text))) & "','" & _
                                                        txtCurCde2.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_SYTIESTR, rtnStr)
            gspStr = ""

           '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading retrieveMOQMOA sp_select_ItemMaster_moq_moa_qu_wunttyp :" & rtnStr)
                bolUPdate_MOQ_MOA = False
                lblCurrMOQ.Text = ""
                Exit Function
            End If

            If rs_SYTIESTR.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("No MOQ & MOA found for this Item")
                bolUPdate_MOQ_MOA = False
                Exit Function
            Else
                org_QUTNO_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("LAST_QUOT")), "", rs_SYTIESTR.Tables("RESULT").Rows(0)("LAST_QUOT"))
                org_MOFLAG_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("MOFLAG")), "", rs_SYTIESTR.Tables("RESULT").Rows(0)("MOFLAG"))
                org_MOQ_tmp = CInt(IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("MOQ")), "0", IIf(rs_SYTIESTR.Tables("RESULT").Rows(0)("MOQ").ToString = "", "0", rs_SYTIESTR.Tables("RESULT").Rows(0)("MOQ"))))

                org_asscnt = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("ASSCNT")), 1, rs_SYTIESTR.Tables("RESULT").Rows(0)("ASSCNT"))

                If org_MOFLAG_tmp = "A" Then
                    org_MOA_tmp = CInt(IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("MOA")), "0", IIf(rs_SYTIESTR.Tables("RESULT").Rows(0)("MOA").ToString = "", "0", rs_SYTIESTR.Tables("RESULT").Rows(0)("MOA"))))
                Else
                    org_MOA_tmp = "0"
                End If

                org_Curr_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("CURCDE")), "", rs_SYTIESTR.Tables("RESULT").Rows(0)("CURCDE"))
                org_IM_MOQ_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("IMMOQ")), "0", rs_SYTIESTR.Tables("RESULT").Rows(0)("IMMOQ"))

                org_IM_MOA_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("IMMOA")), "0", rs_SYTIESTR.Tables("RESULT").Rows(0)("IMMOA"))
                org_DATASRC_tmp = IIf(IsDBNull(rs_SYTIESTR.Tables("RESULT").Rows(0)("DATASRC")), "", rs_SYTIESTR.Tables("RESULT").Rows(0)("DATASRC"))

                lblCurrMOQ.Text = "CTN ="

                '*** Start - Covert currency ###<Origianl MOA>
                If txtCurCde1.Text <> org_Curr_tmp And org_MOA_tmp > 0 Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                    If txtCurCde1.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " + "'" + org_Curr_tmp + "'")
                        'org_MOA_tmp = roundup(org_MOA_tmp * dr(0)("ysi_selrat"))
                        org_MOA_tmp = round(org_MOA_tmp * dr(0)("ysi_selrat"), txtInvRndP.Text)
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " + "'" + txtCurCde1.Text + "'")
                        'org_MOA_tmp = roundup(org_MOA_tmp / dr(0)("ysi_selrat"))
                        If Val(dr(0)("ysi_selrat")) <> 0 Then
                            org_MOA_tmp = round(org_MOA_tmp / dr(0)("ysi_selrat"), txtInvRndP.Text)
                        Else
                            org_MOA_tmp = 0
                        End If
                    End If
                End If
                End If
                '*** End - Convert Currency

                '*** Start - Covert currency ###<IM MOA>
                If txtCurCde1.Text <> org_Curr_tmp And org_IM_MOA_tmp > 0 Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                    If txtCurCde1.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " + "'" + org_Curr_tmp + "'")
                        'org_IM_MOA_tmp = roundup(org_IM_MOA_tmp * dr(0)("ysi_selrat"))
                        org_IM_MOA_tmp = round(org_IM_MOA_tmp * dr(0)("ysi_selrat"), txtInvRndP.Text)
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " + "'" + txtCurCde1.Text + "'")
                        'org_IM_MOA_tmp = roundup(org_IM_MOA_tmp / dr(0)("ysi_selrat"))
                        If Val(dr(0)("ysi_selrat")) <> 0 Then
                            org_IM_MOA_tmp = round(org_IM_MOA_tmp / dr(0)("ysi_selrat"), txtInvRndP.Text)
                        Else
                            org_IM_MOA_tmp = 0



                        End If
                    End If
                    '*** End - Convert Currency
                End If
        Catch ex As Exception
            bolUPdate_MOQ_MOA = False
        End Try
    End Function

    Private Sub checkLatestQut()
        'If bolLatestQut = True Then Exit Sub
        'If rs_QUOTNDTL.Tables.Count = 0 Then Exit Sub
        'If rs_QUOTNDTL.Tables("RESULT").Rows.Count <= 0 Then Exit Sub
        'If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString = "" Then Exit Sub
        'If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "NEW" Then Exit Sub
        'If check_update_Fields() = False Then Exit Sub

        'Call retrieveMOQMOA()

        'bolLatestQut = True '*** change the flag before the object's lostfocus event be triggered

        'If org_QUTNO_tmp <> "" And _
        '    org_QUTNO_tmp <> txtQutNo.Text And _
        '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode")), "", rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString) <> "NEW" Then
        '    MsgBox("The latest quotation no. of this item (" & txtItmNo.Text & ") is " & org_QUTNO_tmp & "!", vbInformation)
        'End If
    End Sub

    Private Function check_update_Fields() As Boolean
        check_update_Fields = False

        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                    If txtItmDsc.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmdsc").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtCusCol.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscol").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtCusItm.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusitm").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtColDsc.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_coldsc").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If


                    If txtNote.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_note").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtPckItr.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckitr").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtSmpQty.Text = "", 0, txtSmpQty.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpqty").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtStkQty.Text = "", 0, txtStkQty.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_stkqty").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCusQty.Text = "", 0, txtCusQty.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusqty").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtDiscnt.Text = "", 0, txtDiscnt.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_discnt").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    Dim gmmu As String = ""

                    If cboCus2No.Text <> "" Then
                        If optGM.Checked = True Then
                            gmmu = "GM"
                        Else
                            gmmu = "MU"
                        End If
                    End If

                    If gmmu <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prcsec").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_grsmgn").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If cboDtlPrcTrm.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    '*** factory price term
                    If cboFtyPrcTrm.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    '*** Phase 2
                    If cboTranTrm.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1sp").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCus2Sp.Text = "", 0, txtCus2Sp.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2sp").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtSmpPrc.Text = "", 0, txtSmpPrc.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_smpprc").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1dp").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2dp").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If InStr(cboHrmCde.Text, " - ") > 0 Then
                        If Microsoft.VisualBasic.Left(cboHrmCde.Text, InStr(cboHrmCde.Text, " - ") - 1) <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde").ToString Then
                            check_update_Fields = True
                            Exit Function
                        End If
                    Else
                        If cboHrmCde.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_hrmcde").ToString Then
                            check_update_Fields = True
                            Exit Function
                        End If
                    End If

                    If IIf(txtDtyRat.Text = "", 0, txtDtyRat.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dtyrat").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtCusCad.Text = "", 0, txtCusCad.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtDept.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_dept").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If cboVenNo.Text <> "" And InStr(cboVenNo.Text, " - ") > 1 Then
                        If cboVenNo.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venno").ToString Then
                            check_update_Fields = True
                            Exit Function
                        End If
                    End If

                    If txtSubCde.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_subcde").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    '*** check custom vendor and custom sub code
                    If cboCusVen.Text <> "" And InStr(cboCusVen.Text, " - ") > 1 Then
                        If cboCusVen.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cusven").ToString Then
                            check_update_Fields = True
                            Exit Function
                        End If
                    End If
                    'no for other ven ?


                    If txtCusSub.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cussub").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If txtVenItm.Text <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_venitm").ToString Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtFtyPrc.Text = "", 0, txtFtyPrc.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprc").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If

                    If IIf(txtFtyCst.Text = "", 0, txtFtyCst.Text) <> Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftycst").ToString) Then
                        check_update_Fields = True
                        Exit Function
                    End If
                End If
            End If
        End If
    End Function

    Private Sub reset_Detail()
        Exit Sub

        rs_QUOTNDTL.Tables.Clear()
        '*** Phase 2
        rs_QUPRCEMT.Tables.Clear()

        rs_QUCPTBKD.Tables.Clear()
        rs_QUASSINF.Tables.Clear()
        dgOthDtl.DataSource = Nothing
        dgMatBkd.DataSource = Nothing

        '*** Quotation Details
        '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNDTL '" & cboCoCde.Text & "',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUOTNDTL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reset_Detail sp_select_QUOTNDTL :" & rtnStr)
            '''' Cursor = Cursors.Default
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Columns.Count - 1
            rs_QUOTNDTL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        drNewRow = rs_QUOTNDTL.Tables("RESULT").NewRow()
        drNewRow("mode") = "NEW"
        drNewRow("qud_apprve") = ""
        rs_QUOTNDTL.Tables("RESULT").Rows.Add(drNewRow)

        optImageN.Checked = True
        Insert_flag = True
        txtSeq.Text = rs_QUOTNDTL.Tables("RESULT").Rows.Count

        '*** Phase 2
        '*** Price Element
        '''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUPRCEMT '" & cboCoCde.Text & "','',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUPRCEMT, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading setStatus sp_select_QUPRCEMT :" & rtnStr)
            '''' Cursor = Cursors.Default
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Columns.Count - 1
            rs_QUPRCEMT.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        '*** Component Breakdwon
        '''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUCPTBKD '" & cboCoCde.Text & "',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUCPTBKD, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reset_Detail sp_select_QUCPTBKD :" & rtnStr)
            '''' Cursor = Cursors.Default
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Columns.Count - 1
            rs_QUCPTBKD.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
        Call display_Component()

        '*** Assortment Item Information
        '''' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUASSINF '" & cboCoCde.Text & "',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUASSINF, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reset_Detail sp_select_QUASSINF :" & rtnStr)
            '''' Cursor = Cursors.Default
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUASSINF.Tables("RESULT").Columns.Count - 1
            rs_QUASSINF.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        Call reset_QUOTNDTL()
    End Sub

    Private Sub reset_QUOTNDTL()
        txtItmNo.Text = ""
        '*** Phase 2
        txtItmNoReal.Enabled = True
        txtItmNoTmp.Enabled = True
        txtItmNoVen.Enabled = True
        txtItmNoReal.Text = ""
        txtItmNoTmp.Text = ""
        txtItmNoVen.Text = ""
        cboItmNoVen.text = ""
        txtColCde.Text = ""

        txtItmDsc.Text = ""
        cboColCde.Items.Clear()
        cboColCde.Text = ""
        txtCusCol.Text = ""
        txtColDsc.Text = ""
        cboPcking.Items.Clear()
        cboPcking.Text = ""
        txtInrQty.Text = ""
        txtMtrQty.Text = ""
        txtPeriod.Text = ""
        'txtQutDat.Text = ""
        txtCft.Text = ""
        txtMoq.Text = ""
        txtMoa.Text = ""
        '*** Reset Original MOQ/MOA
        ORI_MOQ = "0"
        ORI_MOA = "0"
        ORI_MOFLAG = ""
        optMOQ.Checked = False
        optMOA.Checked = False

        cboUM.Text = ""
        txtNote.Text = ""
        txtPckItr.Text = ""
        txtSmpUnt.Text = ""
        txtSmpQty.Text = ""
        txtSmpPrc.Text = ""
        txtStkQty.Text = ""
        txtCusQty.Text = ""
        cboItmSts.Items.Clear()
        cboItmSts.Text = ""
        txtQutItmSts.Text = ""
        'txtHstRef.Text = ""
        'txtDiscnt.Text = "0"
        'txtDiscntP.Text = "0"
        optOneTimY.Checked = False
        optOneTimN.Checked = True

        txtCus1Sp.Text = ""
        txtCus1SpP.Text = ""
        cboDtlPrcTrm.Text = ""
        cboFtyPrcTrm.Text = ""   'factory price term
        '*** Phase 2
        cboTranTrm.Text = ""
        txtInrdin.Text = "0"
        txtInrwin.Text = "0"
        txtInrhin.Text = "0"
        txtMtrdin.Text = "0"
        txtMtrwin.Text = "0"
        txtMtrhin.Text = "0"
        txtInrdcm.Text = "0"
        txtInrwcm.Text = "0"
        txtInrhcm.Text = "0"
        txtMtrdcm.Text = "0"
        txtMtrwcm.Text = "0"
        txtMtrhcm.Text = "0"
        txtGrswgt.Text = "0"
        txtNetwgt.Text = "0"
        txtTOOrdQty.Text = ""
        txtTOShipport.Text = ""
        cboTOFty.Text = ""
        txtDTLFtyShpDateStr.Text = "01/01/1900" 'Today.ToShortDateString
        txtDTLFtyShpDateEnd.Text = "01/01/1900" 'Today.ToShortDateString
        '*** Phase 2
        txtPckCstAmt.Text = ""
        txtItmCommAmt.Text = ""
        txtBasPrc.Text = ""
        cboCusUsdCurr.Text = "USD"
        cboCusCadCurr.Text = "CAD"
        txtPrcKey.Text = ""
        txtEffDat.Text = ""
        txtExpDat.Text = ""

        txtCus2Sp.Text = ""
        txtCus1Dp.Text = ""
        txtCus1DpP.Text = ""
        txtCus2Dp.Text = ""
        cboHrmCde.Text = ""
        txtDtyRat.Text = ""
        txtCusUsd.Text = ""
        txtCusCad.Text = ""
        txtDept.Text = ""
        cboVenNo.Items.Clear()
        cboVenNo.Text = ""
        cboCusVen.Items.Clear()  'clear Cust Ven Combo
        cboCusVen.Text = ""
        '        cboDV.Items.Clear()  'clear Cust Ven Combo
        cboDV.Text = ""
        '        cboTV.Items.Clear()  'clear Cust Ven Combo
        cboTV.Text = ""
        '        cboFA.Items.Clear()  'clear Cust Ven Combo
        cboFA.Text = ""
        '        cboItmNoVen.Items.Clear()  'clear Cust Ven Combo
        cboItmNoVen.text = ""

        txtCusSub.Text = ""
        txtSubCde.Text = ""
        txtVenItm.Text = ""
        txtFtyPrc.Text = ""
        txtFtyCst.Text = ""
        optImageY.Checked = False
        optImageN.Checked = True
        chkDelete.Checked = False
        'cmdUpdPrc.Enabled = False
        cmdUpdateMO.Enabled = False
       '' Cursor = Cursors.Default
    End Sub

    Private Sub LoadPrcEmtFromCU(ByVal cusno As String, ByVal cusno2 As String, ByVal ventyp As String, ByVal itmcat As String, ByVal venno As String, ByVal PrcTrm As String, ByVal TranTrm As String)
        Dim tmp As New DataSet

        '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUPRCEMT_CU '','" & cusno & "','" & cusno2 & "','" & ventyp & "','" & itmcat & "','" & venno & "','" & PrcTrm & "','" & TranTrm & "'"
        rtnLong = execute_SQLStatement(gspStr, tmp, rtnStr)
        gspStr = ""

        '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading LoadPrcEmtFromCU sp_select_QUPRCEMT_CU :" & rtnStr)
            Exit Sub
        End If

        If tmp.Tables("RESULT").Rows.Count > 0 Then
            txtItmCat.Text = tmp.Tables("RESULT").Rows(0)("ccf_cat").ToString.Trim
            txtVenTyp.Text = tmp.Tables("RESULT").Rows(0)("ccf_venno").ToString.Trim
            txtVenTranP.Text = tmp.Tables("RESULT").Rows(0)("ccf_ventranflg").ToString.Trim

            txtCustMUPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cumu").ToString.Trim
            txtCustMUPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cumu").ToString.Trim
            txtProMarPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pm").ToString.Trim
            txtProMarPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pm").ToString.Trim
            txtCushPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cush").ToString.Trim
            txtCushPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cush").ToString.Trim

            txtTHCCustPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_thccusper").ToString.Trim
            txtTHCCustPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_thccusper").ToString.Trim

            txtUPSPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_upsper").ToString.Trim
            txtUPSPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_upsper").ToString.Trim
            txtLabPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_labper").ToString.Trim
            txtLabPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_labper").ToString.Trim
            txtFAPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_faper").ToString.Trim
            txtFAPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_faper").ToString.Trim
            txtCostBufPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cstbufper").ToString.Trim
            txtCostBufPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_cstbufper").ToString.Trim
            txtOthersPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_othper").ToString.Trim
            txtOthersPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_othper").ToString.Trim

            txtPLIPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pliper").ToString.Trim
            txtPLIPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pliper").ToString.Trim
            txtDefMDPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_dmdper").ToString.Trim
            txtDefMDPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_dmdper").ToString.Trim
            txtRebatePercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_rbtper").ToString.Trim
            txtRebatePercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_rbtper").ToString.Trim

            txtPckCstAmtOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pkgper").ToString.Trim
            txtPckCstAmtChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_pkgper").ToString.Trim
            txtPckCst1P.Text = tmp.Tables("RESULT").Rows(0)("ccf_pkgper").ToString.Trim

            txtPckCstAmt.Text = txtPckCstAmtChgP.Text

            txtCommPercOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_comper").ToString.Trim
            txtCommPercChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_comper").ToString.Trim
            txtComm1P.Text = tmp.Tables("RESULT").Rows(0)("ccf_comper").ToString.Trim

            txtItmCommAmtOriP.Text = tmp.Tables("RESULT").Rows(0)("ccf_icmper").ToString.Trim
            txtItmCommAmtChgP.Text = tmp.Tables("RESULT").Rows(0)("ccf_icmper").ToString.Trim
            txtItmComm1P.Text = tmp.Tables("RESULT").Rows(0)("ccf_icmper").ToString.Trim

            txtItmCommAmt.Text = txtItmCommAmtChgP.Text

            txtInvRndP.Text = cus1_rounding

            txtSubTtlPercChgP.Text = CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                                    CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                                    CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                                    CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text))
            txtMU.Text = txtSubTtlPercChgP.Text
        Else
            'Temporary set up the values of the price elements, should be get from CU and Vendor Setup Tables
            txtItmCat.Text = "Standard"
            txtVenTyp.Text = "INT"
            txtVenTranP.Text = "N"

            txtCustMUPercOriP.Text = "5.00"
            txtCustMUPercChgP.Text = "5.00"
            txtProMarPercOriP.Text = "3.00"
            txtProMarPercChgP.Text = "3.00"
            txtCushPercOriP.Text = "2.00"
            txtCushPercChgP.Text = "2.00"

            txtTHCCustPercOriP.Text = "1.50"
            txtTHCCustPercChgP.Text = "1.50"

            txtUPSPercOriP.Text = "5.00"
            txtUPSPercChgP.Text = "5.00"
            txtLabPercOriP.Text = "1.00"
            txtLabPercChgP.Text = "1.00"
            txtFAPercOriP.Text = "5.00"
            txtFAPercChgP.Text = "5.00"
            txtCostBufPercOriP.Text = "1.80"
            txtCostBufPercChgP.Text = "1.80"
            txtOthersPercOriP.Text = "0.00"
            txtOthersPercChgP.Text = "0.00"

            txtPLIPercOriP.Text = "0.13"
            txtPLIPercChgP.Text = "0.13"
            txtDefMDPercOriP.Text = "1.54"
            txtDefMDPercChgP.Text = "1.54"
            txtRebatePercOriP.Text = "3.08"
            txtRebatePercChgP.Text = "3.08"

            txtPckCstAmtOriP.Text = "1.5000"
            txtPckCstAmtChgP.Text = "1.5000"
            txtPckCst1P.Text = "1.5000"

            txtPckCstAmt.Text = txtPckCstAmtChgP.Text

            txtCommPercOriP.Text = "2.00"
            txtCommPercChgP.Text = "2.00"
            txtComm1P.Text = "2.00"

            txtItmCommAmtOriP.Text = "0.0000"
            txtItmCommAmtChgP.Text = "0.0000"
            txtItmComm1P.Text = "0.0000"

            txtItmCommAmt.Text = txtItmCommAmtChgP.Text

            txtInvRndP.Text = cus1_rounding

            txtSubTtlPercChgP.Text = CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                                    CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                                    CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                                    CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text))
            txtMU.Text = txtSubTtlPercChgP.Text
        End If
    End Sub

    Private Sub LoadPrcEmtFromQU()
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUPRCEMT '" & cboCoCde.Text & "','" & txtQutNo.Text & "',''"
        rtnLong = execute_SQLStatement(gspStr, rs_QUPRCEMT, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading LoadPrcEmtFromQU sp_select_QUPRCEMT :" & rtnStr)
           '' Cursor = Cursors.Default
            Exit Sub
        End If

        For i As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Columns.Count - 1
            rs_QUPRCEMT.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_QUPRCEMT.Tables("RESULT").Rows.Count > 0 Then
            If isnumeric(txtSeq.Text)  Then
                sFilter = "qpe_qutseq = " & txtSeq.Text
            Else
                sFilter = "qpe_qutseq = 0"
            End If

            rs_QUPRCEMT.Tables("RESULT").DefaultView.RowFilter = sFilter

            If rs_QUPRCEMT.Tables("RESULT").DefaultView.Count > 0 Then
                txtItmCat.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_fml_cat").ToString.Trim
                txtVenTyp.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_fml_venno").ToString.Trim
                txtVenTranP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_fml_ventranflg").ToString.Trim

                txtCustMUPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cumu").ToString.Trim
                txtCustMUPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cumu").ToString.Trim
                txtProMarPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pm").ToString.Trim
                txtProMarPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pm").ToString.Trim
                txtCushPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cush").ToString.Trim
                txtCushPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cush").ToString.Trim

                txtTHCCustPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_thccusper").ToString.Trim
                txtTHCCustPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_thccusper").ToString.Trim

                txtUPSPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_upsper").ToString.Trim
                txtUPSPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_upsper").ToString.Trim
                txtLabPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_labper").ToString.Trim
                txtLabPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_labper").ToString.Trim
                txtFAPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_faper").ToString.Trim
                txtFAPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_faper").ToString.Trim
                txtCostBufPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cstbufper").ToString.Trim
                txtCostBufPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_cstbufper").ToString.Trim
                txtOthersPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_othper").ToString.Trim
                txtOthersPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_othper").ToString.Trim

                txtPLIPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pliper").ToString.Trim
                txtPLIPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pliper").ToString.Trim
                txtDefMDPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_dmdper").ToString.Trim
                txtDefMDPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_dmdper").ToString.Trim
                txtRebatePercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_rbtper").ToString.Trim
                txtRebatePercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_rbtper").ToString.Trim

                txtPckCstAmtOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pkgper").ToString.Trim
                txtPckCstAmtChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pkgper").ToString.Trim
                txtPckCst1P.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_pkgper").ToString.Trim

                txtPckCstAmt.Text = txtPckCstAmtChgP.Text

                txtCommPercOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_comper").ToString.Trim
                txtCommPercChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_comper").ToString.Trim
                txtComm1P.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_comper").ToString.Trim

                txtItmCommAmtOriP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_icmper").ToString.Trim
                txtItmCommAmtChgP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_icmper").ToString.Trim
                txtItmComm1P.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_icmper").ToString.Trim

                txtItmCommAmt.Text = txtItmCommAmtChgP.Text

                txtInvRndP.Text = cus1_rounding

                txtSubTtlPercChgP.Text = CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                                        CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                                        CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                                        CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text))
 
                txtMU.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_mu").ToString.Trim

                '0627
                txtPrcTrmP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_PrcTrm").ToString.Trim
                txtTranTrmP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_TranTrm").ToString.Trim
                'txtHKMUP.Text = "15"
                'txtHKMUP.Text = rs_QUPRCEMT.Tables("RESULT").Rows(0)("qpe_hkmarkup").ToString.Trim

            Else
                'Temporary set up the values of the price elements, should be get from QU
                txtItmCatP.Text = "Standard"
                txtVenTypP.Text = "INT"

                txtVenTranP.Text = "N"

                txtCustMUPercOriP.Text = "5.00"
                txtCustMUPercChgP.Text = "5.00"
                txtProMarPercOriP.Text = "3.00"
                txtProMarPercChgP.Text = "3.00"
                txtCushPercOriP.Text = "2.00"
                txtCushPercChgP.Text = "2.00"

                txtTHCCustPercOriP.Text = "1.50"
                txtTHCCustPercChgP.Text = "1.50"

                txtUPSPercOriP.Text = "5.00"
                txtUPSPercChgP.Text = "5.00"
                txtLabPercOriP.Text = "1.00"
                txtLabPercChgP.Text = "1.00"
                txtFAPercOriP.Text = "5.00"
                txtFAPercChgP.Text = "5.00"
                txtCostBufPercOriP.Text = "1.80"
                txtCostBufPercChgP.Text = "1.80"
                txtOthersPercOriP.Text = "0.00"
                txtOthersPercChgP.Text = "0.00"

                txtPLIPercOriP.Text = "0.13"
                txtPLIPercChgP.Text = "0.13"
                txtDefMDPercOriP.Text = "1.54"
                txtDefMDPercChgP.Text = "1.54"
                txtRebatePercOriP.Text = "3.08"
                txtRebatePercChgP.Text = "3.08"

                txtPckCstAmtOriP.Text = "1.5000"
                txtPckCstAmtChgP.Text = "1.5000"
                txtPckCst1P.Text = "1.5000"

                txtPckCstAmt.Text = txtPckCstAmtChgP.Text

                txtCommPercOriP.Text = "2.00"
                txtCommPercChgP.Text = "2.00"
                txtComm1P.Text = "2.00"

                txtItmCommAmtOriP.Text = "0.0000"
                txtItmCommAmtChgP.Text = "0.0000"
                txtItmComm1P.Text = "0.0000"

                txtItmCommAmt.Text = txtItmCommAmtChgP.Text

                txtInvRndP.Text = cus1_rounding

                txtSubTtlPercChgP.Text = "29.05"

                txtMU.Text = "29.05"
                '0627
                txtVenNoP.Text = cboVenNo.Text
                'txtHKMUP.Text = "CG24 - *1.22"
                'txtHKMUP.Text = "15"
                txtTranTrmP.Text = cboTranTrm.Text
                txtPrcTrmP.Text = cboDtlPrcTrm.Text

            End If
        End If
    End Sub

    Private Sub SaveOriPrcEmt()
        sceMUP = txtMUP.Text

        scePckCstAmtChgP = txtPckCst1P.Text

        sceItmCommAmtChgP = txtItmComm1P.Text

        sceCus1DpP = txtCus1DpP.Text
    End Sub

    Private Sub LoadOriPrcEmt()
        txtMUP.Text = sceMUP

        txtPckCst1P.Text = scePckCstAmtChgP

        txtItmComm1P.Text = sceItmCommAmtChgP

        txtCus1DpP.Text = sceCus1DpP
    End Sub


    Private Sub Display_OtherDetail()
        With dgOthDtl
            .Columns(0).HeaderText = "Del"
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
                Enq_right_local = False Then
                .Columns(0).ReadOnly = True
            Else
                If copy_flag = False And Add_flag = False Then
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                            Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    Else
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    End If
                End If
            End If

            '-------------------------------------------------------------------
            'Set ALIGNMENT of numerical field to the right
            'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
            '-------------------------------------------------------------------
            Dim i As Integer

            i = 0
            '.Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Update Item Detail"
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 130
            i = i + 1
            .Columns(i).HeaderText = "Update MOQ/MOA"
            .Columns(i).Visible = True
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Update Assortment/BOM"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Covert to PC"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Seq."
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "PDA BP Diff."
            .Columns(i).ReadOnly = False
            .Columns(i).Width = 80
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Cust. Style No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm. no."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Color Code"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias No."
            .Columns(i).Visible = True
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias Color Code"
            .Columns(i).Visible = True
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Std. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. %"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).DefaultCellStyle.Format = "#0.###"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "S. Pack $"
            .Columns(i).ReadOnly = True
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "UM"
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Inner"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Master"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 45
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "CFT"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "UM Factor"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 70
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Con To PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Prc For PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOQ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOQ Unt Typ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOA"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Approve"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Width = 50
            .Columns(i).Visible = True
            .Columns(i).ReadOnly = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1

            .Columns(i).HeaderText = "Pri Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Sec Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Transport Term"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Effect Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Expiry Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = True
            i = i + 1

            '*** Phase 2
            .Columns(i).HeaderText = "Item No. Type"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No. Real"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No. Temp"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No. Ven"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Vendor Code"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Image path"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "US Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "CA Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
        End With






    End Sub
    Private Sub Display_OtherDetail_summary()


        With dgOthDtl
            .Columns(0).HeaderText = "Del"
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
                Enq_right_local = False Then
                .Columns(0).ReadOnly = True
            Else
                If copy_flag = False And Add_flag = False Then
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                            Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    Else
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    End If
                End If
            End If

            '-------------------------------------------------------------------
            'Set ALIGNMENT of numerical field to the right
            'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
            '-------------------------------------------------------------------
            Dim i As Integer

            i = 0
            '.Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Update Item Detail"
            .Columns(i).Visible = False
            .Columns(i).Width = 130
            i = i + 1
            .Columns(i).HeaderText = "Update MOQ/MOA"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Update Assortment/BOM"
            .Columns(i).Visible = False
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Covert to PC"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Seq."
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "PDA BP Diff."
            .Columns(i).ReadOnly = False
            .Columns(i).Width = 80
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Cust. Style No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm. no."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Color Code"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias No."
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias Color Code"
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Std. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. %"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).DefaultCellStyle.Format = "#0.###"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "S. Pack $"
            .Columns(i).ReadOnly = True
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "UM"
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Inner"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Master"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 45
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "CFT"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "UM Factor"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 70
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Con To PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Prc For PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOQ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "MOQ Unt Typ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "MOA"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = False
            .Columns(i).Width = 40
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Approve"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1

            .Columns(i).HeaderText = "Pri Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sec Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Transport Term"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Effect Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Expiry Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1

            '*** Phase 2
            .Columns(i).HeaderText = "Item No. Type"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Real"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Temp"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Ven"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Vendor Code"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Image path"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "US Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "CA Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
        End With






    End Sub


    Private Sub Display_OtherDetail_TO()
        With dgOthDtl
            .Columns(0).HeaderText = "Del"
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
                Enq_right_local = False Then
                .Columns(0).ReadOnly = True
            Else
                If copy_flag = False And Add_flag = False Then
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                            Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    Else
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    End If
                End If
            End If

            '-------------------------------------------------------------------
            'Set ALIGNMENT of numerical field to the right
            'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
            '-------------------------------------------------------------------
            Dim i As Integer

            i = 0
            '.Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Update Item Detail"
            .Columns(i).Visible = False
            .Columns(i).Width = 130
            i = i + 1
            .Columns(i).HeaderText = "Update MOQ/MOA"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Update Assortment/BOM"
            .Columns(i).Visible = False
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Covert to PC"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Seq."
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "PDA BP Diff."
            .Columns(i).ReadOnly = False
            .Columns(i).Width = 80
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Cust. Style No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm. no."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Color Code"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias No."
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias Color Code"
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Std. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. %"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 50
            .Columns(i).DefaultCellStyle.Format = "#0.###"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "S. Pack $"
            .Columns(i).ReadOnly = True
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Width = 60
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "UM"
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Inner"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Master"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 45
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "CFT"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "UM Factor"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 70
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Con To PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Prc For PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "MOQ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "MOQ Unt Typ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "MOA"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sample Quantity"
            .Columns(i).Width = 90
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Approve"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sample Price"
            .Columns(i).Width = 130
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1

            .Columns(i).HeaderText = "Pri Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sec Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Transport Term"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Effect Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Expiry Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1

            '*** Phase 2
            .Columns(i).HeaderText = "Item No. Type"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Real"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Temp"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Ven"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Vendor Code"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Image path"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "US Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "CA Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
        End With






    End Sub


    Private Sub Display_OtherDetail_functional()

        With dgOthDtl
            .Columns(0).HeaderText = "Del"
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
                Enq_right_local = False Then
                .Columns(0).ReadOnly = True
            Else
                If copy_flag = False And Add_flag = False Then
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                            Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    Else
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    End If
                End If
            End If





            '-------------------------------------------------------------------
            'Set ALIGNMENT of numerical field to the right
            'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
            '-------------------------------------------------------------------
            Dim i As Integer

            i = 0
            '.Columns(i).Visible = False
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Update Item Detail"
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Update MOQ/MOA"
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Update Assortment/BOM"
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Covert to PC"
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Seq."
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "PDA BP Diff."
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 80
            i = i + 1
            .Columns(i).HeaderText = "Item No."
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Cust. Style No."
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm."
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 75
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm. no."
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Color Code"
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias No."
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias Color Code"
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Std. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Visible = False
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. %"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 50
            .Columns(i).DefaultCellStyle.Format = "#0.###"
            i = i + 1
            .Columns(i).HeaderText = "S. Pack $"
            .Columns(i).Visible = False
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "UM"
            .Columns(i).Visible = False
            .Columns(i).Width = 50
            i = i + 1
            .Columns(i).HeaderText = "Inner"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Master"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 45
            i = i + 1
            .Columns(i).HeaderText = "CFT"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 50
            i = i + 1
            .Columns(i).HeaderText = "UM Factor"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 70
            i = i + 1
            .Columns(i).HeaderText = "Con To PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Visible = False
            .Columns(i).Width = 75
            i = i + 1
            .Columns(i).HeaderText = "Prc For PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = False
            .Columns(i).Width = 75
            i = i + 1
            .Columns(i).HeaderText = "MOQ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "MOQ Unt Typ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = True
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "MOA"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Approve"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (inch)"
            .Columns(i).Width = 130
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (inch)"
            .Columns(i).Width = 130
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (cm)"
            .Columns(i).Width = 130
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (cm)"
            .Columns(i).Width = 130
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1

            .Columns(i).HeaderText = "Pri Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sec Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Transport Term"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Effect Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Expiry Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1

            '*** Phase 2
            .Columns(i).HeaderText = "Item No. Type"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Real"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Temp"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Ven"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Vendor Code"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Image path"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "US Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "CA Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
        End With







        'With dgOthDtl
        '    .Columns(0).HeaderText = "Del"
        '    If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
        '        Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
        '        Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
        '        Enq_right_local = False Then
        '        .Columns(0).ReadOnly = True
        '    Else
        '        If copy_flag = False And Add_flag = False Then
        '            If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
        '                If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
        '                    Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
        '                    .Columns(0).ReadOnly = True
        '                Else
        '                    .Columns(0).ReadOnly = False
        '                End If
        '            Else
        '                If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
        '                    .Columns(0).ReadOnly = True
        '                Else
        '                    '                            .Columns(0).ReadOnly = False
        '                End If
        '            End If
        '        End If
        '    End If

        '    '-------------------------------------------------------------------
        '    'Set ALIGNMENT of numerical field to the right
        '    'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
        '    '-------------------------------------------------------------------
        '    Dim i As Integer

        '    i = 0
        '    '.Columns(i).Visible = False
        '    .Columns(i).Width = 40
        '    .Columns(i).Visible = True
        '    i = i + 1
        '    .Columns(i).HeaderText = "Update Item Detail"
        '    .Columns(i).Visible = False
        '    .Columns(i).Width = 130
        '    i = i + 1
        '    .Columns(i).HeaderText = "Update MOQ/MOA"
        '    .Columns(i).Visible = True
        '    .Columns(i).Visible = False
        '    .Columns(i).Width = 40
        '    i = i + 1
        '    .Columns(i).HeaderText = "Update Assortment/BOM"
        '    .Columns(i).Visible = False
        '    .Columns(i).Visible = True
        '    .Columns(i).Width = 60
        '    i = i + 1
        '    .Columns(i).HeaderText = "Covert to PC"
        '    .Columns(i).Visible = False
        '    .Columns(i).Visible = True
        '    .Columns(i).Width = 40
        'End With
    End Sub
    Private Sub Display_OtherDetail_Price()
        With dgOthDtl
            .Columns(0).HeaderText = "Del"
            If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
                Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Or _
                Enq_right_local = False Then
                .Columns(0).ReadOnly = True
            Else
                If copy_flag = False And Add_flag = False Then
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                            Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    Else
                        If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                            .Columns(0).ReadOnly = True
                        Else
                            .Columns(0).ReadOnly = False
                        End If
                    End If
                End If
            End If

            '-------------------------------------------------------------------
            'Set ALIGNMENT of numerical field to the right
            'Standard Price, Discounted Price, Discount %, Inner, Master, CFT, MOQ, MOA
            '-------------------------------------------------------------------
            Dim i As Integer

            i = 0
            '.Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Update Item Detail"
            .Columns(i).Visible = False
            .Columns(i).Width = 130
            i = i + 1
            .Columns(i).HeaderText = "Update MOQ/MOA"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Update Assortment/BOM"
            .Columns(i).Visible = False
            .Columns(i).Width = 60
            i = i + 1
            .Columns(i).HeaderText = "Covert to PC"
            .Columns(i).Visible = False
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "Seq."
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 40
            i = i + 1
            .Columns(i).HeaderText = "PDA BP Diff."
            .Columns(i).ReadOnly = False
            .Columns(i).Width = 80
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Item No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Cust. Style No."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Fty Tmp Itm. no."
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Color Code"
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias No."
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).HeaderText = "Alias Color Code"
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 100
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Std. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. Prc"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dis. %"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).DefaultCellStyle.Format = "#0.###"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "S. Pack $"
            .Columns(i).ReadOnly = True
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "UM"
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Inner"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Master"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 45
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "CFT"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "UM Factor"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 70
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Con To PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Prc For PC"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 75
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOQ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOQ Unt Typ"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 60
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "MOA"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleRight
            .Columns(i).ReadOnly = True
            .Columns(i).Width = 40
            .Columns(i).DefaultCellStyle.Format = "#0.####"
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Approve"
            .Columns(i).CellTemplate.Style.Alignment = DataGridViewContentAlignment.MiddleCenter
            .Columns(i).Width = 50
            .Columns(i).Visible = False
            .Columns(i).ReadOnly = True
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (inch)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Inner (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Dimension Master (cm)"
            .Columns(i).Width = 130
            .Columns(i).ReadOnly = True
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).Visible = False
            i = i + 1

            .Columns(i).HeaderText = "Pri Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Sec Customer"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Transport Term"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "Effect Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Expiry Date"
            .Columns(i).Width = 100
            .Columns(i).DefaultCellStyle.Format = "MM/dd/yyyy"
            .Columns(i).Visible = False
            i = i + 1

            '*** Phase 2
            .Columns(i).HeaderText = "Item No. Type"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Real"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Temp"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Item No. Ven"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Vendor Code"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "Image path"
            .Columns(i).Width = 100
            .Columns(i).Visible = False
            i = i + 1
            .Columns(i).HeaderText = "US Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
            .Columns(i).HeaderText = "CA Cur"
            .Columns(i).Width = 100
            .Columns(i).Visible = True
            i = i + 1
        End With






    End Sub




    Private Sub disable_Detail()
        txtItmDsc.Enabled = False
        txtCusCol.Enabled = False
        txtCusItm.Enabled = False
        txtColDsc.Enabled = False
        txtNote.Enabled = True
        txtPckItr.Enabled = True
        txtSmpUnt.Enabled = False
        txtStkQty.Enabled = False
        txtCusQty.Enabled = False
        txtDiscnt.Enabled = False
        optOneTimY.Enabled = False
        optOneTimN.Enabled = False
        txtCus1Dp.Enabled = False
        cboHrmCde.Enabled = False
        txtDtyRat.Enabled = False
        txtCusUsd.Enabled = False
        txtCusCad.Enabled = False
        txtDept.Enabled = False
        txtCIHprc.Enabled = False
        txtCIHcur.Enabled = False
        cboDtlPrcTrm.Enabled = False
        cboFtyPrcTrm.Enabled = False
        '*** Phase 2
        cboTranTrm.Enabled = False
        txtPckCstAmt.Enabled = False
        txtItmCommAmt.Enabled = False
        cboCusUsdCurr.Enabled = False
        cboCusCadCurr.Enabled = False

        chkPC.Enabled = False
        txtPCPrc.Enabled = False
        txtPCPrcCur.Enabled = False

        txtInrdin.Enabled = False
        txtInrwin.Enabled = False
        txtInrhin.Enabled = False
        txtMtrdin.Enabled = False
        txtMtrwin.Enabled = False
        txtMtrhin.Enabled = False

        txtInrdcm.Enabled = False
        txtInrwcm.Enabled = False
        txtInrhcm.Enabled = False
        txtMtrdcm.Enabled = False
        txtMtrwcm.Enabled = False
        txtMtrhcm.Enabled = False

        txtGrswgt.Enabled = False
        txtNetwgt.Enabled = False

        'cboCusals.Enabled = False
        txtUPC.Enabled = False
        txtCBM.Enabled = False
        txtDtyRat.Enabled = False
        txtIMRmk.Enabled = True
        txtCIHprc.Enabled = False
        txtFCurCde.Enabled = False
        cboHrmCde.Enabled = False
        chkFtyTmpItm.Enabled = False
        dgMatBkd.Enabled = False
        '*** Phase 2 comment it
        'chkTBM.Enabled = False
        'txtSpecpck.Enabled = False
        'cboCustItmCat.Enabled = False
        'txtPMU.Enabled = False
        'txtCALPMU.Enabled = False
        'dgCstEmt.Enabled = False
        'dgELCDtl.Enabled = False
        'dgELC.Enabled = False
        cboCusVen.Enabled = False
        cboDV.Enabled = False
        cboTV.Enabled = False
        cboFA.Enabled = False
        cboItmNoVen.Enabled = False
    End Sub

    Private Sub enable_Detail(ByVal index As Integer)
        txtItmDsc.Enabled = True
        txtCusCol.Enabled = True
        txtCusItm.Enabled = True
        txtColDsc.Enabled = True
        txtNote.Enabled = True
        txtPckItr.Enabled = True
        txtStkQty.Enabled = True
        txtCusQty.Enabled = True
        txtDiscnt.Enabled = True

        If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_onetim") = "N" Then
            optOneTimY.Enabled = True
            optOneTimN.Enabled = True
        End If

        txtCus1Dp.Enabled = True
        If chkPC.Checked = True Then
            Call ABUASST(txtItmNo.Text, "SHOWPRC")
        Else
            Call ABUASST(txtItmNo.Text, "HIDEPRC")
        End If

        cboHrmCde.Enabled = True
        '*** Phase 2
        cboCusUsdCurr.Enabled = True
        cboCusCadCurr.Enabled = True

        txtCusUsd.Enabled = True
        txtCusCad.Enabled = True
        txtDept.Enabled = True

        '*** Phase 2 comment it
        'If chkTBM.Checked = False Then
        '    chkTBM.Enabled = True
        'Else
        '    chkTBM.Enabled = False
        'End If
        'If chkFtyTmpItm.Checked = True Then
        '    chkTBM.Enabled = False
        'End If

        txtInrdin.Enabled = True
        txtInrwin.Enabled = True
        txtInrhin.Enabled = True
        txtMtrdin.Enabled = True
        txtMtrwin.Enabled = True
        txtMtrhin.Enabled = True

        txtInrdcm.Enabled = True
        txtInrwcm.Enabled = True
        txtInrhcm.Enabled = True
        txtMtrdcm.Enabled = True
        txtMtrwcm.Enabled = True
        txtMtrhcm.Enabled = True

        txtGrswgt.Enabled = True
        txtNetwgt.Enabled = True

        cboCusals.Enabled = True
        txtIMRmk.Enabled = True
        cboHrmCde.Enabled = True
        dgMatBkd.Enabled = True
        '*** Phase 2 comment it
        'txtSpecpck.Enabled = True
        'cboCustItmCat.Enabled = True
        'txtPMU.Enabled = True
        'txtCALPMU.Enabled = True
        'dgCstEmt.Enabled = True
        'dgELCDtl.Enabled = True
        'dgELC.Enabled = True
        cboCusVen.Enabled = True
        cboDV.Enabled = True
        cboTV.Enabled = True
        'cboItmNoVen.Enabled = True
        cboFA.Enabled = True
    End Sub

    Private Sub reverse_Detail()
        cboColCde.Items.Clear()
        cboColCde.Text = ""
        cboPcking.Items.Clear()
        'cboPcking.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde") + " / " + _
        '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString + " / " + _
        '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString
        cboPcking.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cft").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cbm").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString.Trim + " / " + _
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString.Trim

        txtCusCol.Text = ""
        txtColDsc.Text = ""
        'txtHstRef.Text = ""
        cboItmSts.Items.Clear()
        cboItmSts.Text = ""
        txtQutItmSts.Text = ""
        optOneTimY.Checked = False
        optOneTimN.Checked = True
        chkDelete.Checked = False

        '********************************* Update Formula **********************
        '*** Phase 2 comment it
        'If Add_flag = False Then
        '    'dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '    '                                    rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1)("vbi_ventyp") & _
        '    '                                    "' and ccm_cat = '" & rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1)("ibi_catlvl3") & "'")
        '    dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '                                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp") & _
        '                                        "' and ccm_cat = '" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("ibi_catlvl3") & "'")
        '    If dr.Length > 0 Then
        '        fml = dr(0)("yfi_fml").ToString
        '    Else
        '        'dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '        '                                    rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1)("vbi_ventyp") & _
        '        '                                    "' and ccm_cat = 'STANDARD'")
        '        dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '                                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("vbi_ventyp") & _
        '                                            "' and ccm_cat = 'STANDARD'")
        '        If dr.Length > 0 Then
        '            fml = dr(0)("yfi_fml").ToString
        '        Else
        '            MsgBox("Missing Customer Category Markup, Please Enter Customer Customer Category Markup before Transaction Processing.")
        '            txtItmNo.Focus()
        '            Exit Sub
        '        End If
        '    End If
        'End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
                Call chkAliasItm()
            End If
        End If

        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                        " - Item not found" + Chr(13) + Chr(10) + _
                        " - It is a BOM Item" + Chr(13) + Chr(10) + _
                        " - It is a Discontinued / Inactive / To be confirmed Item" + Chr(13) + Chr(10) + _
                        " - It is held by the system" + Chr(13) + Chr(10) + _
                        " - Vendor is not available", vbExclamation, "Warning rd")
                '*** Phase 2
                'If rbItmNoReal.Checked = True Then
                If txtItmNoReal.Text <> "" Then
                    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                        txtItmNoReal.Focus()
                    End If
                Else
                    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                        txtItmNoTmp.Focus()
                    End If
                End If
                Exit Sub
            Else
                'rs_QUOTNDTL.Tables("RESULT").Rows(rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1)("qud_itmtyp") = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_typ")
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmtyp") = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_typ")
                cboItmSts.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmsts")
                Dim sTmpCosMth As String
                sTmpCosMth = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth") + " - " + _
                                              rs_IMBASINF.Tables("RESULT").Rows(0)("ysi_dsc")) = True, "", rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cosmth") + " - " + _
                                              rs_IMBASINF.Tables("RESULT").Rows(0)("ysi_dsc"))
                txtCosMth.Text = IIf(sTmpCosMth.Trim = "-", "", sTmpCosMth.Trim)
                If txtCosMth.Text = " - " Then txtCosMth.Text = ""

                cboVenNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venno")
                txtSubCde.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_subcde")
                '*** show custom vendor and custom sub code
                cboCusVen.Text = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")), "", rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven"))
                cboVenNo.Text = IIf(IsDBNull(rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven")), "", rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_cusven"))

                txtCusSub.Text = ""

                txtVenItm.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ivi_venitm")
            End If
        End If

        optImageN.Checked = True

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMCOLINF :" & rtnStr)
            Exit Sub
        End If

        If rs_IMCOLINF.Tables("RESULT").Rows.Count = 0 Then
            cboColCde.Items.Clear()
            cboColCde.Text = ""
        Else
            cboColCde.Enabled = True
            cboColCde.Items.Clear()
            cboColCde.Text = ""

            For index As Integer = 0 To rs_IMCOLINF.Tables("RESULT").Rows.Count - 1
                cboColCde.Items.Add(rs_IMCOLINF.Tables("RESULT").Rows(index)("icf_colcde").ToString)
            Next
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMPCKINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMPCKINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMPCKINF_Q :" & rtnStr)
            Exit Sub
        End If

        '*** Phase 2
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMPRCINF_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMPRCINF_NewAddItem, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMPRCINF_Q :" & rtnStr)
            Exit Sub
        End If

        '*** Phase 2
        Dim valid_pricing As Boolean
        Dim valid_pricing_for_customer As Boolean

        Dim check_cus1no As String
        Dim check_cus2no As String

        If cboCus1No.Text = "" Then
            check_cus1no = ""
        Else
            check_cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If cboCus2No.Text = "" Then
            check_cus2no = ""
        Else
            check_cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

        If rs_IMPCKINF.Tables("RESULT").Rows.Count = 0 Then
            cboPcking.Enabled = False
        Else
            valid_pricing = False
            valid_pricing_for_customer = False

            cboPcking.Enabled = True

            For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
                valid_pricing_for_customer = False

                For index1 As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_pckunt").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString And _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_inrqty").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString And _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_mtrqty").ToString = rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString Then

                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_status").ToString = "ACT" Then
                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus1no").ToString = "" And _
                                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString = "" Then
                                'Standard Price
                                valid_pricing_for_customer = True
                            Else
                                If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString <> "" Then
                                    'Check Primary and Secondary
                                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus1no").ToString = check_cus1no And _
                                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus2no").ToString = check_cus2no Then
                                        valid_pricing_for_customer = True
                                    End If
                                Else
                                    'Check Primary Only
                                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_cus1no").ToString = check_cus1no Then
                                        valid_pricing_for_customer = True
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next

                If valid_pricing_for_customer = False Then
                    rs_IMPCKINF.Tables("RESULT").Rows(index).Delete()
                End If
            Next
            rs_IMPCKINF.Tables("RESULT").AcceptChanges()
        End If
        '*** Phase 2

        If rs_IMPCKINF.Tables("RESULT").Rows.Count = 0 Then
            cboPcking.Enabled = False
        Else
            cboPcking.Enabled = True

            Dim tmp_pck As String

            tmp_pck = cboPcking.Text

            For index As Integer = 0 To rs_IMPCKINF.Tables("RESULT").Rows.Count - 1
                '*** Phase 2
                For index1 As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
                    'cboPcking.Items.Add(rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString + " / " + _
                    '                    rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString + " / " + _
                    '                    rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString)
                    cboPcking.Items.Add(rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cft").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cbm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_ftyprctrm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_hkprctrm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_trantrm").ToString.Trim)

                    If rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_pckunt").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_inrqty").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_mtrqty").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cft").ToString.Trim + " / " + _
                        rs_IMPCKINF.Tables("RESULT").Rows(index)("ipi_cbm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_ftyprctrm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_hkprctrm").ToString.Trim + " / " + _
                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index1)("imu_trantrm").ToString.Trim = tmp_pck Then
                        sReadingIndexP = index
                    End If
                Next
            Next

            cboPcking.Text = tmp_pck
        End If

        '*** Component Breakdown
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMMATBKD '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMMATBKD, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMMATBKD :" & rtnStr)
            Exit Sub
        End If

        If rs_IMMATBKD.Tables("RESULT").Rows.Count = 0 Then
            dgMatBkd.DataSource = Nothing

            If isnumeric(txtSeq.Text)  Then
                sFilter = "qcb_qutseq = " & txtSeq.Text
            Else
                sFilter = ""
            End If
            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter

            If rs_QUCPTBKD.Tables("RESULT").DefaultView.Count > 0 Then
                Dim index As Integer = rs_QUCPTBKD.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutno").ToString = txtQutNo.Text And _
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutseq").ToString = txtSeq.Text Then
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0).Delete()
                        index -= 1
                    End If
                End While
                rs_QUCPTBKD.Tables("RESULT").AcceptChanges()
            End If
        Else
            dgMatBkd.DataSource = Nothing

            If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
                Dim index As Integer = rs_QUCPTBKD.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutno").ToString = txtQutNo.Text And _
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0)("qcb_qutseq").ToString = txtSeq.Text Then
                        rs_QUCPTBKD.Tables("RESULT").DefaultView(0).Delete()
                        index -= 1
                    End If
                End While
                rs_QUCPTBKD.Tables("RESULT").AcceptChanges()
            End If

            For index As Integer = 0 To rs_IMMATBKD.Tables("RESULT").Rows.Count - 1
                drNewRow = rs_QUCPTBKD.Tables("RESULT").NewRow
                drNewRow("mode") = "NEW"
                drNewRow("qcb_qutno") = txtQutNo.Text
                drNewRow("qcb_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
                drNewRow("qcb_itmno") = txtItmNo.Text
                drNewRow("qcb_cptseq") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_matseq")
                drNewRow("qcb_cpt") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_mat")
                drNewRow("qcb_curcde") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_curcde")
                drNewRow("qcb_cst") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cst")
                drNewRow("qcb_cstpct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_cstper")
                drNewRow("qcb_pct") = rs_IMMATBKD.Tables("RESULT").Rows(index)("ibm_wgtper")
                rs_QUCPTBKD.Tables("RESULT").Rows.Add(drNewRow)
            Next

            If isnumeric(txtSeq.Text)  Then
                sFilter = "qcb_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
            Else
                sFilter = ""
            End If
            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter

            dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
            Call Display_Component()
        End If

        '*** Assortment Item
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMBOMASS, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading reverse_Detail sp_select_IMBOMASS_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_IMBOMASS.Tables("RESULT").Rows.Count = 0 Then
            cmdAss.Enabled = False

            If isnumeric(txtSeq.Text)  Then
                sFilter = "qai_qutseq = " & txtSeq.Text
            Else
                sFilter = ""
            End If
            rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter

            If rs_QUASSINF.Tables("RESULT").DefaultView.Count > 0 Then
                Dim index As Integer = rs_QUASSINF.Tables("RESULT").DefaultView.Count

                While index > 0
                    If rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutno").ToString = txtQutNo.Text And _
                        rs_QUASSINF.Tables("RESULT").DefaultView(0)("qai_qutseq").ToString = txtSeq.Text Then
                        rs_QUASSINF.Tables("RESULT").DefaultView(0).Delete()
                        index -= 1
                    End If
                End While
                rs_QUASSINF.Tables("RESULT").AcceptChanges()
            End If
        Else
            cmdAss.Enabled = True

            If rs_QUASSINF.Tables("RESULT").Rows.Count > 0 Then
                For index As Integer = 0 To rs_QUASSINF.Tables("RESULT").Rows.Count - 1
                    If rs_QUASSINF.Tables("RESULT").Rows(index)("qai_qutno").ToString = txtQutNo.Text And _
                        rs_QUASSINF.Tables("RESULT").Rows(index)("qai_qutseq").ToString = txtSeq.Text Then
                        rs_QUASSINF.Tables("RESULT").Rows(index)("mode") = "DEL"
                    End If
                Next
            End If

            Dim canAdd As Boolean

            For index As Integer = 0 To rs_IMBOMASS.Tables("RESULT").Rows.Count - 1
                canAdd = True

                For index1 As Integer = 0 To rs_QUASSINF.Tables("RESULT").Rows.Count - 1
                    If rs_QUASSINF.Tables("RESULT").Rows(index1)("qai_qutno").ToString = txtQutNo.Text And _
                        rs_QUASSINF.Tables("RESULT").Rows(index1)("qai_qutseq").ToString = txtSeq.Text - 1 And _
                        rs_QUASSINF.Tables("RESULT").Rows(index1)("qai_itmno").ToString = txtItmNo.Text And _
                        rs_QUASSINF.Tables("RESULT").Rows(index1)("qai_assitm").ToString = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_assitm") And _
                        rs_QUASSINF.Tables("RESULT").Rows(index1)("qai_colcde").ToString = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_colcde") Then
                        canAdd = False
                        Exit For
                    End If
                Next

                If canAdd Then
                    drNewRow = rs_QUASSINF.Tables("RESULT").NewRow
                    drNewRow("mode") = "NEW"
                    drNewRow("qai_qutno") = txtQutNo.Text
                    drNewRow("qai_qutseq") = IIf(IsNumeric(txtSeq.Text), txtSeq.Text, 0)
                    drNewRow("qai_itmno") = txtItmNo.Text
                    drNewRow("qai_assitm") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_assitm")
                    drNewRow("qai_assdsc") = rs_IMBOMASS.Tables("RESULT").Rows(index)("ibi_engdsc")
                    drNewRow("qai_colcde") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_colcde")
                    drNewRow("qai_coldsc") = rs_IMBOMASS.Tables("RESULT").Rows(index)("icf_coldsc")
                    drNewRow("qai_untcde") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_pckunt")
                    drNewRow("qai_inrqty") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_inrqty")
                    drNewRow("qai_mtrqty") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_mtrqty")
                    '*** Add Assd IM Period
                    drNewRow("qai_imperiod") = rs_IMBOMASS.Tables("RESULT").Rows(index)("iba_period")
                    rs_QUASSINF.Tables("RESULT").Rows.Add(drNewRow)
                End If
            Next

            If isnumeric(txtSeq.Text)  Then
                sFilter = "qai_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
            Else
                sFilter = ""
            End If
            rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter
        End If

        '*** Phase 2 comment it
        ''*** Additional Info
        'If rs_QUADDINF.Tables("RESULT").Rows.Count = 0 Then
        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qdi_qutseq = " & txtSeq.Text
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUADDINF.Tables("RESULT").DefaultView.RowFilter = sFilter

        '    If rs_QUADDINF.Tables("RESULT").DefaultView.Count > 0 Then
        '        Dim index As Integer = rs_QUADDINF.Tables("RESULT").DefaultView.Count

        '        While index > 0
        '            If rs_QUADDINF.Tables("RESULT").DefaultView(0)("qdi_qutno").ToString = txtQutNo.Text And _
        '                rs_QUADDINF.Tables("RESULT").DefaultView(0)("qdi_qutseq").ToString = txtSeq.Text Then
        '                rs_QUADDINF.Tables("RESULT").DefaultView(0).Delete()
        '                index -= 1
        '            End If
        '        End While
        '        rs_QUADDINF.Tables("RESULT").AcceptChanges()
        '    End If
        'Else
        '    If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUADDINF.Tables("RESULT").Rows.Count - 1
        '            If rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_qutno").ToString = txtQutNo.Text And _
        '                rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_qutseq").ToString = txtSeq.Text Then
        '                rs_QUADDINF.Tables("RESULT").Rows(index)("mode") = "DEL"
        '            End If
        '        Next
        '    End If

        '    If rs_SYQUADDINF.Tables.Count = 0 Then
        '        Call LoadAddInf()
        '    End If

        '    For index As Integer = 0 To rs_SYQUADDINF.Tables("RESULT").Rows.Count - 1
        '        drNewRow = rs_QUADDINF.Tables("RESULT").NewRow
        '        drNewRow("mode") = "NEW"
        '        drNewRow("qdi_qutno") = txtQutNo.Text
        '        drNewRow("qdi_qutseq") = txtSeq.Text
        '        drNewRow("qdi_fldid") = rs_SYQUADDINF.Tables("RESULT").Rows(index)("yqa_fldid")
        '        drNewRow("yqa_flddesc") = rs_SYQUADDINF.Tables("RESULT").Rows(index)("yqa_flddesc")
        '        drNewRow("qdi_value") = rs_SYQUADDINF.Tables("RESULT").Rows(index)("yqa_defval")
        '        drNewRow("yqa_display") = rs_SYQUADDINF.Tables("RESULT").Rows(index)("yqa_display")
        '        rs_QUADDINF.Tables("RESULT").Rows.Add(drNewRow)
        '    Next

        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qdi_qutseq = " & txtSeq.Text & " and mode = 'NEW' and yqa_display <> 'N'"
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUADDINF.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        '' Cost Element
        'If rs_QUCSTEMT.Tables("RESULT").Rows.Count = 0 Then
        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qce_qutseq = " & txtSeq.Text
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUCSTEMT.Tables("RESULT").DefaultView.RowFilter = sFilter

        '    If rs_QUCSTEMT.Tables("RESULT").DefaultView.Count > 0 Then
        '        Dim index As Integer = rs_QUCSTEMT.Tables("RESULT").DefaultView.Count

        '        While index > 0
        '            If rs_QUCSTEMT.Tables("RESULT").DefaultView(0)("qce_qutno").ToString = txtQutNo.Text And _
        '                rs_QUCSTEMT.Tables("RESULT").DefaultView(0)("qce_qutseq").ToString = txtSeq.Text Then
        '                rs_QUCSTEMT.Tables("RESULT").DefaultView(0).Delete()
        '                index -= 1
        '            End If
        '        End While
        '        rs_QUCSTEMT.Tables("RESULT").AcceptChanges()
        '    End If
        'Else
        '    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '            If rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_qutno").ToString = txtQutNo.Text And _
        '                rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_qutseq").ToString = txtSeq.Text Then
        '                rs_QUCSTEMT.Tables("RESULT").Rows(index)("mode") = "DEL"
        '            End If
        '        Next
        '    End If

        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qce_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUCSTEMT.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        '' ELC
        'If rs_QUELC.Tables("RESULT").Rows.Count = 0 Then
        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qec_qutseq = " & txtSeq.Text
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUELC.Tables("RESULT").DefaultView.RowFilter = sFilter

        '    If rs_QUELC.Tables("RESULT").DefaultView.Count > 0 Then
        '        Dim index As Integer = rs_QUELC.Tables("RESULT").DefaultView.Count

        '        While index > 0
        '            If rs_QUELC.Tables("RESULT").DefaultView(0)("qec_qutno").ToString = txtQutNo.Text And _
        '                rs_QUELC.Tables("RESULT").DefaultView(0)("qec_qutseq").ToString = txtSeq.Text Then
        '                rs_QUELC.Tables("RESULT").DefaultView(0).Delete()
        '                index -= 1
        '            End If
        '        End While
        '        rs_QUELC.Tables("RESULT").AcceptChanges()
        '    End If
        'Else
        '    If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUELC.Tables("RESULT").Rows.Count - 1
        '            If rs_QUELC.Tables("RESULT").Rows(index)("qec_qutno").ToString = txtQutNo.Text And _
        '                rs_QUELC.Tables("RESULT").Rows(index)("qec_qutseq").ToString = txtSeq.Text Then
        '                rs_QUELC.Tables("RESULT").Rows(index)("mode") = "DEL"
        '            End If
        '        Next
        '    End If

        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qec_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUELC.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        '' ELCDTL
        'If rs_QUELCDTL.Tables("RESULT").Rows.Count = 0 Then
        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qed_qutseq = " & txtSeq.Text
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUELCDTL.Tables("RESULT").DefaultView.RowFilter = sFilter

        '    If rs_QUELCDTL.Tables("RESULT").DefaultView.Count > 0 Then
        '        Dim index As Integer = rs_QUELCDTL.Tables("RESULT").DefaultView.Count

        '        While index > 0
        '            If rs_QUELCDTL.Tables("RESULT").DefaultView(0)("qed_qutno").ToString = txtQutNo.Text And _
        '                rs_QUELCDTL.Tables("RESULT").DefaultView(0)("qed_qutseq").ToString = txtSeq.Text Then
        '                rs_QUELCDTL.Tables("RESULT").DefaultView(0).Delete()
        '                index -= 1
        '            End If
        '        End While
        '        rs_QUELCDTL.Tables("RESULT").AcceptChanges()
        '    End If
        'Else
        '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
        '            If rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_qutno").ToString = txtQutNo.Text And _
        '                rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_qutseq").ToString = txtSeq.Text Then
        '                rs_QUELCDTL.Tables("RESULT").Rows(index)("mode") = "DEL"
        '            End If
        '        Next
        '    End If

        '    If isnumeric(txtSeq.Text)  Then
        '        sFilter = "qed_qutseq = " & txtSeq.Text & " and mode = 'NEW'"
        '    Else
        '        sFilter = ""
        '    End If
        '    rs_QUELCDTL.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        cboColCde.Enabled = True
        cboPcking.Enabled = True

        chkFtyTmpItm.Checked = False
        chkFtyTmpItm.Enabled = False
    End Sub

    Private Function not_in_Combo_HDR() As Boolean
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        '*** Primary Customer
        If cboCus1No.Text <> "" And cboCus1No.Enabled = True And cboCus1No.Items.Count > 0 Then
            inCombo = False
            i = cboCus1No.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus1No.Text) = Trim(cboCus1No.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Primary Customer - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                cboCus1No.Enabled = True
                If cboCus1No.Enabled And cboCus1No.Visible Then cboCus1No.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Contact Person - Primary Customer
        If cboCus1Cp.Text <> "" And cboCus1Cp.Enabled = True And cboCus1Cp.Items.Count > 0 Then
            inCombo = False
            i = cboCus1Cp.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus1Cp.Text) = Trim(cboCus1Cp.Items(Y).Replace(vbCr, "").Replace(vbLf, "")) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Primary Customer - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                cboCus1Cp.Enabled = True
                If cboCus1Cp.Enabled And cboCus1Cp.Visible Then cboCus1Cp.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Secondary Customer
        If cboCus2No.Text <> "" And cboCus2No.Enabled = True And cboCus2No.Items.Count > 0 Then
            inCombo = False
            i = cboCus2No.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus2No.Text) = Trim(cboCus2No.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Secondary Customer - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                cboCus2No.Enabled = True
                If cboCus2No.Enabled And cboCus2No.Visible Then cboCus2No.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Contact Person - Secondary Customer
        If cboCus2Cp.Text <> "" And cboCus2Cp.Enabled = True And cboCus2Cp.Items.Count > 0 Then
            inCombo = False
            i = cboCus2Cp.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCus2Cp.Text) = Trim(Replace(cboCus2Cp.Items(Y), vbCrLf, "")) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Contact Person of Secondary Customer - Data is Invalid, please select in Drop Down List.")
                ''btcQUM00001.SelectedIndex = 0
                cboCus2Cp.Enabled = True
                If cboCus2Cp.Enabled And cboCus2Cp.Visible Then cboCus2Cp.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Agent
        If cboCusAgt.Text <> "" And cboCusAgt.Enabled = True And cboCusAgt.Items.Count > 0 Then
            inCombo = False
            i = cboCusAgt.Items.Count
            For Y = 0 To i - 1
                If Trim(cboCusAgt.Text) = Trim(cboCusAgt.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Agent - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                cboCusAgt.Enabled = True
                If cboCusAgt.Enabled And cboCusAgt.Visible Then cboCusAgt.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Phase 2
        '*** Sales Division (Team)
        If cboSalDiv.Text <> "" And cboSalDiv.Enabled = True And cboSalDiv.Items.Count > 0 Then
            inCombo = False
            i = cboSalDiv.Items.Count
            For Y = 0 To i - 1
                If Trim(cboSalDiv.Text) = Trim(cboSalDiv.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Sales Division (Team) - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                cboSalDiv.Enabled = True
                If cboSalDiv.Enabled And cboSalDiv.Visible Then cboSalDiv.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Sales Rep
        If cboSalRep.Text <> "" And cboSalRep.Enabled = True And cboSalRep.Items.Count > 0 Then
            inCombo = False
            i = cboSalRep.Items.Count
            For Y = 0 To i - 1
                If Trim(cboSalRep.Text) = Trim(cboSalRep.Items(Y)) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Sales Rep - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 0
                cboSalRep.Enabled = True
                If cboSalRep.Enabled And cboSalRep.Visible Then cboSalRep.Focus()
                not_in_Combo_HDR = True
                Exit Function
            End If
        End If

        '*** Phase 2
        'If txtDeptH.Text = "" And txtDeptH.Enabled = True Then
        '    btcQUM00001.SelectedIndex = 0
        '    MsgBox("Department must be entered.")
        '    txtDeptH.Enabled = True
        '    If txtDeptH.Enabled And txtDeptH.Visible Then txtDeptH.Focus()
        '   '' Cursor = Cursors.Default
        '    Exit Function
        'End If

        ''*** Phase 2
        'If cboYear.Text = "" And cboYear.Enabled = True Then
        '    btcQUM00001.SelectedIndex = 0
        '    MsgBox("Quotation Title - Year, must be assigned.")
        '    cboYear.Enabled = True
        '    If cboYear.Enabled And cboYear.Visible Then cboYear.Focus()
        '   '' Cursor = Cursors.Default
        '    Exit Function
        'End If

        ''*** Phase 2
        'If cboSeason.Text = "" And cboSeason.Enabled = True Then
        '    btcQUM00001.SelectedIndex = 0
        '    MsgBox("Quotation Title - Season, must be assigned.")
        '    cboSeason.Enabled = True
        '    If cboSeason.Enabled And cboSeason.Visible Then cboSeason.Focus()
        '   '' Cursor = Cursors.Default
        '    Exit Function
        'End If

        ''*** Phase 2
        'If txtDesc.Text = "" And txtDesc.Enabled = True Then
        '    btcQUM00001.SelectedIndex = 0
        '    MsgBox("Quotation Title - Project, must be entered.")
        '    txtDesc.Enabled = True
        '    If txtDesc.Enabled And txtDesc.Visible Then txtDesc.Focus()
        '   '' Cursor = Cursors.Default
        '    Exit Function
        'End If
    End Function

    Private Function not_in_Combo_DTL() As Boolean
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        '*** Phase 2
        '*** Vender Item No Vendor Code
        If txtItmNoVen.Text <> "" Then
            If cboItmNoVen.text <> "" And cboItmNoVen.Enabled = True And cboItmNoVen.Items.Count > 0 Then
                inCombo = False
                i = cboItmNoVen.Items.Count
                For Y = 0 To i - 1
                    If cboItmNoVen.text = cboItmNoVen.Items(Y).ToString Then
                        inCombo = True
                    End If
                Next

                If inCombo = False And cboItmNoVen.Enabled = True Then
                    MsgBox("Vendor Code for Vendor Item - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboItmNoVen.Enabled = True
                    If cboItmNoVen.Enabled And cboItmNoVen.Visible Then cboItmNoVen.Focus()
                    not_in_Combo_DTL = True
                    Exit Function
                End If
            End If

            If cboItmNoVen.text = "" And cboItmNoVen.Enabled = True Then
                MsgBox("Vendor Code for Vendor Item - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboItmNoVen.Enabled = True
                If cboItmNoVen.Enabled And cboItmNoVen.Visible Then cboItmNoVen.Focus()
                not_in_Combo_DTL = True
                Exit Function
            End If
        End If

        If txtItmNoVen.Text = "" Then
            '*** Color Code
            If cboColCde.Text <> "" And cboColCde.Enabled = True And cboColCde.Items.Count > 0 Then
                inCombo = False
                i = cboColCde.Items.Count
                For Y = 0 To i - 1
                    If cboColCde.Text = cboColCde.Items(Y).ToString Then
                        inCombo = True
                    End If
                Next

                If inCombo = False And cboColCde.Enabled = True Then
                    MsgBox("Color Code - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboColCde.Enabled = True
                    If cboColCde.Enabled And cboColCde.Visible Then cboColCde.Focus()
                    not_in_Combo_DTL = True
                    Exit Function
                End If
            End If

            If cboColCde.Text = "" And cboColCde.Enabled = True Then
                MsgBox("Color Code - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboColCde.Enabled = True
                If cboColCde.Enabled And cboColCde.Visible Then cboColCde.Focus()
                not_in_Combo_DTL = True
                Exit Function
            End If

            '*** Packing
            If cboPcking.Text <> "" And cboPcking.Enabled = True And cboPcking.Items.Count > 0 Then
                inCombo = False
                i = cboPcking.Items.Count
                For Y = 0 To i - 1
                    If cboPcking.Text = cboPcking.Items(Y).ToString Then
                        inCombo = True
                    End If
                Next

                If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
                    MsgBox("Please input Item No.")
                    btcQUM00001.SelectedIndex = 1
                    Exit Function
                End If

                If inCombo = False And cboPcking.Enabled = True Then
                    MsgBox("Packing - Data is Invalid, please select in Drop Down List.")
                    btcQUM00001.SelectedIndex = 1
                    cboPcking.Enabled = True
                    If cboPcking.Enabled And cboPcking.Visible Then cboPcking.Focus()
                    not_in_Combo_DTL = True
                    Exit Function
                End If
            End If

            '*** Phase 2
            If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
                MsgBox("Please input Item No.")
                btcQUM00001.SelectedIndex = 1
                Exit Function
            End If

            If cboPcking.Text = "" Or Trim(cboPcking.Text) = " / 0 / 0 / 0 / 0 / / /" Then
                'If cboPcking.Text = "" Or Trim(cboPcking.Text) = "/ 0 / 0" Then
                MsgBox("Packing - Data is Invalid, please select in Drop Down List.")
                btcQUM00001.SelectedIndex = 1
                cboPcking.Enabled = True
                If cboPcking.Enabled And cboPcking.Visible Then cboPcking.Focus()
                not_in_Combo_DTL = True
                Exit Function
            End If
        End If
    End Function

    Private Function CheckRetailPrc() As Boolean
        Dim dblAdjPrc As Double

        If Trim(txtCusUsd.Text) = "" Then
            CheckRetailPrc = True
            Exit Function
        End If

        If Trim(txtCus1Dp.Text) = "" Then
            txtCus1Dp.Text = "0"
        End If

        If Trim(txtCus2Dp.Text) = "" Then
            txtCus2Dp.Text = "0"
        End If

        If CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) > 0 Then
            dblAdjPrc = CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text))
        Else
            dblAdjPrc = CDbl(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text))
        End If

        If CDbl(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)) < dblAdjPrc Then
            MsgBox("Retail Price is less than Adjusted Price.")
            CheckRetailPrc = False
            Exit Function
        End If

        If CDbl(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)) < 0 Then
            MsgBox("Retail Price cannot be negative.")
            CheckRetailPrc = False
            Exit Function
        End If

        CheckRetailPrc = True
    End Function




    Private Sub CalculateMatBkd()
        Dim dblDp As Double

        dblDp = 0

        If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
                Exit Sub
            End If
        End If



        If rs_QUCPTBKD.Tables.Count > 0 Then
            If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
                If Trim(txtCus2Dp.Text) = "" Then
                    txtCus2Dp.Text = Format(0, "###,###,##0.0000")
                End If

                If Trim(txtCus1Dp.Text) = "" Then
                    txtCus1Dp.Text = Format(0, "###,###,##0.0000")
                End If

                If CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) <> 0 Then
                    dblDp = CDbl(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text))
                Else
                    dblDp = CDbl(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text))
                End If


                For index As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                        Recordstatus = True
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                    End If
                    If rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
                        rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode") = "UPD"
                        If rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_creusr") <> "~*NEW*~" And rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_creusr") <> "~*ADD*~" Then
                            rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_creusr") = "~*UPD*~"
                        End If
                        Recordstatus = True
                    End If

                    'If IsDBNull(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct")) = True Then
                    '    rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct") = rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")
                    'End If

                    'If CDbl(IIf(IsDBNull(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct")) = True, 0, rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct"))) = 0 Then
                    '    rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct") = rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")
                    'End If

                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cst") = (dblDp * CDbl(IIf(IsDBNull(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")) = True, 0, rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct")))) / 100
                Next

                dgMatBkd.Refresh()
            End If
        End If
    End Sub

    Private Function check_dup_Packing() As Boolean

        ''avoid DBNULL
        '''0825??
        'If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
        '    Exit Function
        'End If

        ''Deleted Item, no nned check
        If Is_Updating_item = True Then
            check_dup_Packing = False
            Exit Function
        End If


        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("DEL") = "Y" Then
            check_dup_Packing = False
            Exit Function
        End If

        '*** Check duplicate packing
        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            no_Display_Detail = True

            Dim tmp As Integer
            Dim tmp_itmno, tmp_ItmNoVen, tmp_colcde, tmp_untcde, tmp_inrqty, tmp_mtrqty As String
            Dim is_Dup As Boolean

            '*** Phase 2
            Dim tmp_cft, tmp_cbm, tmp_ftyprctrm, tmp_dtlprctrm, tmp_trantrm As String

            is_Dup = False
            tmp = sReadingIndexQ
            tmp_itmno = txtItmNo.Text
            tmp_ItmNoVen = cboItmNoVen.Text
            '*** Phase 2
            If txtItmNoVen.Text = "" Then
                tmp_colcde = cboColCde.Text
            Else
                tmp_colcde = txtColCde.Text
            End If

            '*** Phase 2
            If txtItmNoVen.Text = "" Then
                If cboPcking.Text <> "" And cboPcking.Text <> " / 0 / 0 / 0 / 0 / / /" Then
                    tmp_untcde = cboUM.Text
                    tmp_inrqty = txtInrQty.Text
                    tmp_mtrqty = txtMtrQty.Text
                    tmp_cft = txtCft.Text
                    tmp_ftyprctrm = cboFtyPrcTrm.Text
                    tmp_dtlprctrm = cboDtlPrcTrm.Text
                    tmp_trantrm = cboTranTrm.Text
                Else
                    tmp_untcde = ""
                    tmp_inrqty = "0"
                    tmp_mtrqty = "0"
                    tmp_cft = "0"
                    tmp_ftyprctrm = ""
                    tmp_dtlprctrm = ""
                    tmp_trantrm = ""
                End If
            Else
                If cboUM.Text <> "" And _
                    cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" Then
                    tmp_untcde = cboUM.Text
                    tmp_inrqty = txtInrQty.Text
                    tmp_mtrqty = txtMtrQty.Text
                    tmp_cft = txtCft.Text
                    tmp_ftyprctrm = cboFtyPrcTrm.Text
                    tmp_dtlprctrm = cboDtlPrcTrm.Text
                    tmp_trantrm = cboTranTrm.Text
                Else
                    tmp_untcde = ""
                    tmp_inrqty = "0"
                    tmp_mtrqty = "0"
                    tmp_cft = "0"
                    tmp_ftyprctrm = ""
                    tmp_dtlprctrm = ""
                    tmp_trantrm = ""
                End If
            End If

            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                If index <> tmp Then
                    '*** Phase 2
                    If txtItmNoVen.Text = "" Then
                        If cboColCde.Text <> "" And cboPcking.Text <> "" Then
                            If tmp_itmno = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno").ToString And _
                               tmp_colcde = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde").ToString And _
                               tmp_untcde = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde").ToString And _
                               tmp_inrqty = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) And _
                               tmp_mtrqty = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) And _
                               tmp_cft = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) And _
                               tmp_ftyprctrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString) And _
                               tmp_dtlprctrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString) And _
                               tmp_trantrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm").ToString) And _
                            LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("DEL").ToString) <> "Y" _
                            Then
                                is_Dup = True
                                Exit For
                            End If
                        End If
                    Else
                        If txtColCde.Text <> "" And cboUM.Text <> "" Then
                            If tmp_itmno = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno").ToString And _
                               tmp_ItmNoVen = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno").ToString And _
                               tmp_colcde = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde").ToString And _
                               tmp_untcde = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde").ToString And _
                               tmp_inrqty = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) And _
                               tmp_mtrqty = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) And _
                               tmp_cft = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) And _
                               tmp_ftyprctrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString) And _
                               tmp_dtlprctrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString) And _
                               tmp_trantrm = LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm").ToString) And _
                            LTrim(rs_QUOTNDTL.Tables("RESULT").Rows(index)("DEL").ToString) <> "Y" _
                            Then
                                is_Dup = True
                                Exit For
                            End If
                        End If
                    End If
                End If
            Next

            If is_Dup = True Then
                check_dup_Packing = True
            Else
                check_dup_Packing = False
            End If
            is_Dup = False
            no_Display_Detail = False
        End If
    End Function

    Private Sub chkAliasItm()
        '*********************************** Check for Alias Item or not **********************
       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBASINF_Q_A '" & cboCoCde.Text & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_IMBASINF_Q_A :" & rtnStr)
            Exit Sub
        End If

        If rs_IMBASINF.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        Alias_itm = True

        Dim cus2no As String

        If cboCus2No.Text = "" Then
            cus2no = ""
        Else
            cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        Dim rs As New DataSet

        gspStr = "sp_select_CUITMSUM_Q_check '" & cboCoCde.Text & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & cus2no & "','" & txtItmNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_CUITMSUM_Q_check :" & rtnStr)
            Exit Sub
        End If

        If rs.Tables("RESULT").Rows.Count = 0 Then
            If MsgBox("This Item cannot be Quot, it is UCP Item. There has an item UCPP item " & _
                        rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & " is equal to it, Change it ?", vbYesNo) = vbYes Then
                txtItmNo.Text = rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno")
                Alias_itm = False
                Call txtItmNo_Press()
            Else
                txtItmNo.Text = ""
            End If
            If txtItmNo.Enabled And txtItmNo.Visible Then txtItmNo.Focus()
            txtItmNo.SelectAll()
            Exit Sub
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMCOLINF '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMCOLINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_IMCOLINF :" & rtnStr)
            Exit Sub
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMPCKINF_Q '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMPCKINF, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_IMPCKINF_Q :" & rtnStr)
            Exit Sub
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMMATBKD '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMMATBKD, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_IMMATBKD :" & rtnStr)
            Exit Sub
        End If

       '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_IMBOMASS_Q '" & cboCoCde.Text & "','" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_itmno").ToString & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMBOMASS, rtnStr)
        gspStr = ""

       '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading chkAliasItm sp_select_IMBOMASS_Q :" & rtnStr)
            Exit Sub
        End If
    End Sub

    Private Sub refresh_Price()

        If Not ((rs_IMPCKINF.Tables("RESULT")) Is Nothing) Then
     
         If Not (sReadingIndexP < 0) And Not (sReadingIndexP > rs_IMPCKINF.Tables("RESULT").Rows.Count - 1) Then
                'If Not rs_IMPCKINF.BOF And Not rs_IMPCKINF.EOF Then

                '*** Re-calculate the price again
                Dim cus1no As String
                Dim cus2no As String

                If Trim(cboCus1No.Text) = "" Then
                    cus1no = ""
                Else
                    cus1no = Trim(Split(cboCus1No.Text, "-")(0))
                End If

                If Trim(cboCus2No.Text) = "" Then
                    cus2no = ""
                Else
                    cus2no = Trim(Split(cboCus2No.Text, "-")(0))
                End If

               '' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                '*** Phase 2
                gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & txtItmNo.Text & "','" & _
                                                        rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckunt").ToString & "','" & _
                                                        rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_inrqty").ToString & "','" & _
                                                        rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_mtrqty").ToString & "','" & _
                                                        cus1no & "','" & cus2no & "','" & _
                                                        cboFtyPrcTrm.Text & "','" & _
                                                        cboDtlPrcTrm.Text & "','" & _
                                                        cboTranTrm.Text & "','" & _
                                                        gsUsrID & "'"
                'gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & _
                '                                            txtItmNo.Text & "','" & _
                '                                            rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckunt").ToString & "','" & _
                '                                            rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_inrqty").ToString & "','" & _
                '                                            rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_mtrqty").ToString & "','" & _
                '                                            cus1no & "','" & cus2no & "','" & gsUsrID & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF, rtnStr)
                gspStr = ""

               '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading refresh_Price sp_select_QUOTNDTL_Vendor :" & rtnStr)
                    Exit Sub
                End If

                If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
                    If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycst") <> 0 And _
                        rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprc") <> 0 Then

                        txtFCurCde.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_curcde")
                        txtFtyPrc.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprc"), "########0.0000")
                        txtFtyCst.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycst"), "########0.0000")

                        cboDtlPrcTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm").ToString.Trim.Split("-")(0).Trim
                        cboFtyPrcTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm").ToString.Trim.Split("-")(0).Trim
                        '*** Phase 2
                        cboTranTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm").ToString.Trim.Split("-")(0).Trim

                        '*** Calcualte Basic Price in Customer Currency
                        If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                            If txtCurCde2.Text = dr(0)("ysi_cde").ToString Then
                                dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde") & "'")
                                'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat")), "########0.0000")
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                            Else
                                dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                                'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat")), "########0.0000")
                                If dr.Length > 0 Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")

                                End If
                            End If
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), "########0.0000")
                        End If

                        '*** Phase 2
                        txtBasPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")

                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")

                        Dim sTemp As String
                        'Dim sFtyPrcTrm As String
                        'Dim sPrcTrm As String
                        'Dim sTranTrm As String

                        sTemp = ""

                        If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no").ToString <> "" Then
                            sTemp = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no")
                            If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no").ToString <> "" Then
                                sTemp = sTemp + "/" + rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no")
                            End If
                        Else
                            sTemp = "Standard"
                        End If

                        'sFtyPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm").ToString
                        'sPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm").ToString
                        'sTranTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm").ToString

                        'txtPrcKey.Text = sTemp + "/" + sFtyPrcTrm + "/" + sPrcTrm + "/" + sTranTrm
                        txtPrcKey.Text = sTemp
                        txtEffDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")).ToShortDateString
                        txtExpDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")).ToShortDateString

                        '*** Phase 2
                        Call GetAllDisplay(Me)
                        gbPanelCstEmt.SendToBack()
                        gbPanelCstEmt.Visible = True
                        Call release_TabControl()


                        'Call cmdPrcEmt.PerformClick()
                        'Call cmdPanPrcEmtUpdate.PerformClick()

                        '*** Phase 2 comment it
                        'If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                        '    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                        '    If txtCurCde2.Text = dr(0)("ysi_cde") Then
                        '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde") & "'")
                        '        txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml.Trim) * dr(0)("ysi_selrat")), "###,###,##0.0000")

                        '        If cboCus2No.Text <> "" Then
                        '            If optMU.Checked = True Then
                        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            Else
                        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            End If
                        '        End If

                        '        If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
                        '            txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml.Trim) * dr(0)("ysi_selrat")), "###,###,##0.0000")

                        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If

                        '            If cboCus2No.Text <> "" Then
                        '                If optMU.Checked = True Then
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                Else
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                End If

                        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '                End If
                        '            End If
                        '        Else
                        '            txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml.Trim) * dr(0)("ysi_selrat") * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")

                        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If

                        '            If cboCus2No.Text <> "" Then
                        '                If optMU.Checked = True Then
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                Else
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                End If

                        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '                End If
                        '            End If
                        '        End If
                        '    Else
                        '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                        '        txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml.Trim) / dr(0)("ysi_selrat")), "###,###,##0.0000")

                        '        If cboCus2No.Text <> "" Then
                        '            If optMU.Checked = True Then
                        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            Else
                        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            End If
                        '        End If

                        '        If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
                        '            txtCus1Dp.Text = Format(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)), "###,###,##0.0000")

                        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If

                        '            If cboCus2No.Text <> "" Then
                        '                If optMU.Checked = True Then
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                Else
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                End If

                        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '                End If

                        '            End If
                        '        Else
                        '            txtCus1Dp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")

                        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If

                        '            If cboCus2No.Text <> "" Then
                        '                If optMU.Checked = True Then
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                Else
                        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '                End If

                        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '                End If
                        '            End If
                        '        End If
                        '    End If
                        'Else
                        '    txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml.Trim)), "###,###,##0.0000")

                        '    If cboCus2No.Text <> "" Then
                        '        If optMU.Checked = True Then
                        '            txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '        Else
                        '            txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '        End If
                        '    End If

                        '    If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
                        '        txtCus1Dp.Text = Format(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)), "###,###,##0.0000")

                        '        If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '            MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '        End If

                        '        If cboCus2No.Text <> "" Then
                        '            If optMU.Checked = True Then
                        '                txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            Else
                        '                txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            End If

                        '            If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If
                        '        End If
                        '    Else
                        '        If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '            MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '        End If

                        '        If cboCus2No.Text <> "" Then
                        '            If optMU.Checked = True Then
                        '                txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            Else
                        '                txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                        '            End If
                        '            If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                        '            End If
                        '        End If
                        '    End If
                        'End If
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                    MsgBox("No valid price of this item for customer " & cus1no & IIf(cus2no <> "", ", " & cus2no, ""))
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                Call updateMOQMOA()

                '*** Conversion Factor
               '' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & cboUM.Text & "','Conversion'"
                rtnLong = execute_SQLStatement(gspStr, rs_SYCONFTR, rtnStr)
                gspStr = ""

               '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading refresh_Price sp_select_CUBASINF_Q :" & rtnStr)
                    Exit Sub
                End If

                If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
                    txtSmpUnt.Text = cboUM.Text

                    If txtCus1Dp.Text = "" Then
                        txtSmpPrc.Text = ""
                    Else
                        txtSmpPrc.Text = Format(Val(txtCus1Dp.Text), "###,###,##0.0000")
                    End If
                Else
                    txtSmpUnt.Text = "PC"

                    If txtCus1Dp.Text = "" Then
                        txtSmpPrc.Text = ""
                    Else
                        'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                        txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                    End If
                End If
            Else
                cboPcking.Text = ""
                'txtHstRef.Text = ""
                txtInrQty.Text = ""
                txtMtrQty.Text = ""
                txtPeriod.Text = ""
                'txtQutDat.Text = ""
                txtCft.Text = ""
                '*** Phase 2
                txtCBM.Text = ""
                txtMoq.Text = ""
                txtMoa.Text = ""
                '*** Set Original MOQ/MOA
                ORI_MOQ = "0"
                ORI_MOA = "0"
                ORI_MOFLAG = ""
                optMOQ.Checked = False
                optMOA.Checked = False
                txtMoq.Text = ""
                txtMoa.Text = ""

                cboUM.Text = ""
                txtSmpPrc.Text = ""
                txtPckItr.Text = ""

                cboDtlPrcTrm.Text = ""
                cboFtyPrcTrm.Text = ""  '*** factory price term
                '*** Phase 2
                cboTranTrm.Text = ""

                txtCus1Sp.Text = ""
                txtCus1SpP.Text = ""
                txtCus2Sp.Text = ""
                txtCus1Dp.Text = ""
                txtCus1DpP.Text = ""
                txtCus2Dp.Text = ""

                txtSmpUnt.Text = ""
                txtFtyPrc.Text = ""
                txtFtyCst.Text = ""
            End If
        End If

    End Sub

    Private Sub ChgTabCheck(ByVal PreviousTab As Integer, ByVal currentTab As Integer)
        If cboCus1No.Text = "" Then
            btcQUM00001.SelectedIndex = 0
            Exit Sub
        End If

        '*** To trim and upper case the item no
        '*** Phase 2 comment it
        'txtItmNo.Text = UCase(Trim(txtItmNo.Text))

        '*** To check the input item no which is empty
        If txtItmNo.Text = "" And txtItmNoTmp.Text.Trim = "" And txtItmNoVen.Text.Trim = "" Then
            btcQUM00001.SelectedIndex = 1
            MsgBox("Please input Item No.")
            txtItmNoReal.Focus()


            '*** Phase 2
            'If rbItmNoReal.Checked Then
            '    If txtItmNoReal.Enabled And txtItmNoReal.Visible Then txtItmNoReal.Focus()
            'ElseIf txtItmNoTmp.Text <> "" Then
            '    If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then txtItmNoTmp.Focus()
            'Else
            '    If txtItmNoVen.Enabled And txtItmNoVen.Visible Then txtItmNoVen.Focus()
            'End If
            If txtItmNoReal.Text <> "" Then
                If txtItmNoReal.Enabled And txtItmNoReal.Visible Then txtItmNoReal.Focus()
            ElseIf txtItmNoTmp.Text <> "" Then
                If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then txtItmNoTmp.Focus()
            Else
                If txtItmNoVen.Enabled And txtItmNoVen.Visible Then txtItmNoVen.Focus()
            End If


            Exit Sub
        End If

        '*** Check Item Exist ?
        '*** Phase 2
        If txtItmNoVen.Text = "" Then
            If txtItmNo.Text <> "" And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True) Then
                If not_exist_ITEM() = True Then
                    '*** To focus on the folder "Detail"
                    btcQUM00001.SelectedIndex = 1
                    MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                        " - Item not found" + Chr(13) + Chr(10) + _
                        " - It is a BOM Item" + Chr(13) + Chr(10) + _
                        " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                        " - It is held by the system" + Chr(13) + Chr(10) + _
                        " - Vendor is not available", vbExclamation, "Warning sst")
                    'If rbItmNoReal.Checked = True Then
                    If txtItmNoReal.Text <> "" Then
                        If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                            txtItmNoReal.Focus()
                        End If
                    Else
                        If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                            txtItmNoTmp.Focus()
                        End If
                    End If
                    Exit Sub
                End If
            End If
        End If

        '*** Check Dupliate Packing
        If check_dup_Packing() = True Then
            btcQUM00001.SelectedIndex = 1

            '*** Phase 2
            If Not setNewItemFormat(txtItmNo.Text) Then
                MsgBox("Packing & Color are already exists.")
                cboColCde.Text = ""
                txtColCde.Text = ""
                txtColDsc.Text = ""
            End If

            cboPcking.Text = ""

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            '*** Phase 2 comment it
            'txtHstRef.Text = ""
            'txtQutDat.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            '*** Phase 2
            txtCBM.Text = ""

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   ' factory price term
            '*** Phase 2
            cboTranTrm.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset Original MOQ/MOA
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtPckItr.Text = ""
            'txtDiscnt.Text = "0"
            txtCus1Sp.Text = "0"
            txtCus1Dp.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus2Dp.Text = "0"

            'txtDiscntP.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus1DpP.Text = "0"

            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            '*** Reset CIH Currency and Price
            txtCIHprc.Text = ""
            txtCIHcur.Text = ""
            txtPeriod.Text = ""
            txtSmpPrc.Text = ""
            txtSmpUnt.Text = ""
            Exit Sub
        End If

        If not_in_Combo_DTL() = True Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "NEW" Then
                '*** Phase 2
                If txtItmNoVen.Text = "" Then
                    If rs_IMBASINF.Tables.Count = 0 And (txtItmNoReal.Enabled = True Or txtItmNoTmp.Enabled = True) Then
                        btcQUM00001.SelectedIndex = 1
                        MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                        " - Item not found" + Chr(13) + Chr(10) + _
                        " - It is a BOM Item" + Chr(13) + Chr(10) + _
                        " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                        " - It is held by the system" + Chr(13) + Chr(10) + _
                        " - Vendor is not available", vbExclamation, "Warning sstc")
                        ' add for debug
                        '*** Phase 2
                        'If rbItmNoReal.Checked = True Then
                        If txtItmNoReal.Text <> "" Then
                            If txtItmNoReal.Enabled And txtItmNoReal.Visible Then
                                txtItmNoReal.Focus()
                            End If
                        Else
                            If txtItmNoTmp.Enabled And txtItmNoTmp.Visible Then
                                txtItmNoTmp.Focus()
                            End If
                        End If
                        Exit Sub
                    End If
                End If
            End If
        End If

        If invalid_Detail() = True Then
            '*** Phase 2 comment it
            'If IsEmptySpecPck = True Then
            '    If currentTab <> 2 Then
            '        MsgBox("Please fill in Special Packaging Desc.")
            '    End If
            '    If PreviousTab = 2 Then
            '        btcQUM00001.SelectedIndex = 2
            '    End If

            '    If txtSpecpck.Enabled = True Then
            '        txtSpecpck.Focus()
            '    End If

            '    IsEmptySpecPck = False
            '    Exit Sub
            'End If

            'If IsEmptyDuty = True Then
            '    If currentTab <> 2 Then
            '        MsgBox("Please select HSTU / Tariff #.", vbOKOnly, "ELC Duty Rate")
            '    End If
            '    If PreviousTab = 2 Then
            '        btcQUM00001.SelectedIndex = 2
            '    End If
            '    IsEmptyDuty = False
            '    Exit Sub
            'End If

            btcQUM00001.SelectedIndex = 1
            Exit Sub
        Else
            Call check_update_Detail()
            Call fill_QUOTNDTL()
            no_Display_Detail = True
            dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
            no_Display_Detail = False
                    Call display_dgOthDtl("A")

            dgOthDtl.ClearSelection()

            For index As Integer = 0 To dgOthDtl.Rows.Count - 1
                If txtSeq.Text = dgOthDtl.Rows(index).Cells("qud_qutseq").Value.ToString Then
                    dgOthDtl.Rows(index).Selected = True
                End If
            Next
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
            If chkDelete.Checked = True Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "Y"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "N"
            End If

            If chkDelete.Enabled = False And gsUsrRank > 3 Then
                dgOthDtl.Columns(0).ReadOnly = True
            Else
                If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "E" And _
                    Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "H" And _
                    Microsoft.VisualBasic.Left(txtQutSts.Text, 1) <> "C" Then
                    If copy_flag = False And Add_flag = False Then
                        If rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString <> "" Then
                            If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Or _
                                Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus2no").ToString), 8) <> "(Active)" Then
                                dgOthDtl.Columns(0).ReadOnly = True
                            Else
                                dgOthDtl.Columns(0).ReadOnly = False
                            End If
                        Else
                            If Microsoft.VisualBasic.Right(Trim(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_cus1no").ToString), 8) <> "(Active)" Then
                                dgOthDtl.Columns(0).ReadOnly = True
                            Else
                                dgOthDtl.Columns(0).ReadOnly = False
                            End If
                        End If
                    End If
                Else
                    dgOthDtl.Columns(0).ReadOnly = True
                End If
            End If
        End If
    End Sub

    Private Sub CalPrcEmt()
        'If rs_IMVENINF.Tables.Count > 0 Then
        'If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
        txtCushCostBufPercP.Text = Format((Val(txtCushPercChgP.Text) + Val(txtCostBufPercChgP.Text)), "###,###,##0.00")
        txtCushCostBufAmtP.Text = Format(round(CalBPtoCushCostBuf(), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

        If txtVenTranP.Text.Trim = "N" Then
            txtOtherDisLmtPercP.Text = Format((Val(txtUPSPercChgP.Text) + Val(txtLabPercChgP.Text) + Val(txtFAPercChgP.Text)), "###,###,##0.00")
        Else
            txtOtherDisLmtPercP.Text = Format((Val(txtUPSPercChgP.Text) + Val(txtLabPercChgP.Text) + _
                                        Val(txtFAPercChgP.Text) + Val(txtTHCCustPercChgP.Text)), "###,###,##0.00")
        End If

        txtMaxApprovePercP.Text = Format((Val(txtCushCostBufPercP.Text) + txtOtherDisLmtPercP.Text), "###,###,##0.00")
        txtMaxApproveAmtP.Text = Format(round(CalBPtoMaxApprve(), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

        lblMUMinP.Text = "(Min " + Format(round(Val(txtSubTtlPercChgP.Text) - Val(txtMaxApprovePercP.Text), 2), "###,###,##0.00") + "%)"
        ' Add Min MU Price Calculation
        txtMUPriceP.Text = Format(round(((CDbl(Val(txtBasPrcP.Text)) / (1 - CDbl(Val(txtMUP.Text)) / 100))), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

        txtStdPrcP.Text = Format(round(CalBPtoSP(CDbl(Val(txtSubTtlPercChgP.Text))), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")
        txtCus1SpP.Text = Format(round(CalBPtoSP(CDbl(Val(txtSubTtlPercChgP.Text))), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

        txtCus1DpP.Text = Format(round(CDbl(Val((txtBasPrcP.Text / _
                            (1 - (CDbl(Val(txtMUP.Text)) / 100)) + CDbl(Val(txtPckCst1P.Text))) / _
                            (1 - CDbl(Val(txtComm1P.Text)) / 100) + CDbl(Val(txtItmComm1P.Text)))), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
        strCurExRat = CStr(dr(0)("yce_selrat"))
        strCurExEffDat = Format(dr(0)("yce_effdat"), "yyyy-MM-dd")

        txtStdPrcMUPercP.Text = Format(round(((CDbl(Val(txtCus1SpP.Text)) - CDbl(Val(txtBasPrcP.Text))) / CDbl(Val(txtBasPrcP.Text)) * 100), 2), "###,###,##0.00")

        txtAdjPrcMUPercP.Text = Format(round(((CDbl(Val(txtCus1DpP.Text)) - CDbl(Val(txtBasPrcP.Text))) / CDbl(Val(txtBasPrcP.Text)) * 100), 2), "###,###,##0.00")

        lblDiscntMaxP.Text = "(Max " + Format(round((Math.Abs(CDbl(Val(txtMaxApproveAmtP.Text)) - CDbl(Val(txtCus1SpP.Text))) / CDbl(Val(txtCus1SpP.Text)) * 100), 2), "###,###,##0.00") + "%)"

        If IIf(IsDBNull(txtSubTtlPercChgP.Text), 0, Val(txtSubTtlPercChgP.Text)) - IIf(IsDBNull(txtMUP.Text), 0, Val(txtMUP.Text)) > Val(txtCushCostBufPercP.Text) Then
            txtCus1DpP.ForeColor = Color.Red
            txtCus1Dp.ForeColor = Color.Red
        Else
            txtCus1DpP.ForeColor = Color.Black
            txtCus1Dp.ForeColor = Color.Black
        End If

        Call check_mu(sReadingIndexQ)


        '        End If
        '       End If
    End Sub

    Private Function CalBPtoSP(ByVal dMU As Double) As Double
        Dim dBasPrc, dPerc, dStdPrc As Double

        dBasPrc = CDbl(Val(txtBasPrcP.Text))

        dPerc = round(CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text)), 2)

        dStdPrc = round(CDbl(Val((dBasPrc / _
                                (1 - (dMU / 100)) + CDbl(Val(txtPckCst1P.Text))) / _
                                (1 - CDbl(Val(txtComm1P.Text)) / 100) + CDbl(Val(txtItmComm1P.Text)))), CDbl(Val(txtInvRndP.Text)))

        Return dStdPrc
    End Function

    Private Function CalBPtoCushCostBuf() As Double
        Dim dBasPrc, dPerc, dCushCostBuf As Double

        dBasPrc = CDbl(Val(txtBasPrcP.Text))

        dPerc = round(CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text)), 2)

        dCushCostBuf = round(CDbl(Val((dBasPrc / _
                            (1 - (dPerc - CDbl(Val(txtCushCostBufPercP.Text))) / 100)) + CDbl(Val(txtPckCst1P.Text))) / _
                            (1 - CDbl(Val(txtComm1P.Text)) / 100) + CDbl(Val(txtItmComm1P.Text))), CDbl(Val(txtInvRndP.Text)))

        Return dCushCostBuf
    End Function

    Private Function CalBPtoMaxApprve() As Double
        Dim dBasPrc, dPerc, dMaxApprve As Double

        dBasPrc = CDbl(Val(txtBasPrcP.Text))

        dPerc = round(CDbl(Val(txtCustMUPercChgP.Text)) + CDbl(Val(txtProMarPercChgP.Text)) + CDbl(Val(txtCushPercChgP.Text)) + _
                CDbl(Val(txtTHCCustPercChgP.Text)) + CDbl(Val(txtUPSPercChgP.Text)) + CDbl(Val(txtLabPercChgP.Text)) + _
                CDbl(Val(txtFAPercChgP.Text)) + CDbl(Val(txtCostBufPercChgP.Text)) + CDbl(Val(txtOthersPercChgP.Text)) + _
                CDbl(Val(txtPLIPercChgP.Text)) + CDbl(Val(txtDefMDPercChgP.Text)) + CDbl(Val(txtRebatePercChgP.Text)), 2)

        dMaxApprve = round(CDbl(Val((dBasPrc / _
                            (1 - (dPerc - CDbl(Val(txtMaxApprovePercP.Text))) / 100)) + CDbl(Val(txtPckCst1P.Text))) / _
                            (1 - CDbl(Val(txtComm1P.Text)) / 100) + CDbl(Val(txtItmComm1P.Text))), CDbl(Val(txtInvRndP.Text)))

        Return dMaxApprve
    End Function

    Private Sub CalCus2Prc()
        If cboCus2No.Text <> "" Then
            If optMU.Checked = True Then
                txtCus2Sp.Text = Format(round((CDec(IIf(txtCus1SpP.Text = "", 0, txtCus1SpP.Text)) * (1 + txtGrsMgn.Text / 100)), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")
            Else
                txtCus2Sp.Text = Format(round((CDec(IIf(txtCus1SpP.Text = "", 0, txtCus1SpP.Text)) / (1 - txtGrsMgn.Text / 100)), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")
            End If
        End If

        txtCus2Dp.Text = txtCus2Sp.Text

        If cboCus2No.Text <> "" Then
            Call CalDiscnt_Cus2()
        End If
    End Sub

    Private Sub PrcEmtCopyFromDetail()
        txtSeqP.Text = txtSeq.Text
        txtItmNoP.Text = txtItmNo.Text
      If txtItmNoVen.Text <> "" Then
            txtPckingP.Text = cboUM.Text & " / " & txtInrQty.Text & " / " & txtMtrQty.Text & " / " & txtCft.Text & " / " & _
                                txtCBM.Text & " / " & cboFtyPrcTrm.Text & " / " & cboDtlPrcTrm.Text & " / " & cboTranTrm.Text
        Else
            txtPckingP.Text = cboPcking.Text
        End If

         txtCus1NoP.Text = cboCus1No.Text
        '0627
        txtCus2NoP.Text = cboCus2No.Text
        txtVenNoP.Text = cboCusVen.Text
        txtPrcTrmP.Text = cboDtlPrcTrm.Text
        txtTranTrmP.Text = cboTranTrm.Text


        txtFtyCstCurrP.Text = txtFCurCde.Text
        txtFtyCstP.Text = txtFtyCst.Text
        txtFtyPrcCurrP.Text = txtFCurCde.Text
        txtFtyPrcP.Text = txtFtyPrc.Text
        txtBasPrcCurrP.Text = txtCurCde2.Text
        txtBasPrcP.Text = txtBasPrc.Text

        lblMUMinP.Text = lblMUMin.Text
        txtMUP.Text = txtMU.Text

        txtMUPriceCurrP.Text = txtCurCde2.Text
        txtMUPriceP.Text = txtMUPrice.Text

        txtPckCstAmtChgP.Text = txtPckCstAmt.Text
        txtPckCst1P.Text = txtPckCstAmt.Text

        txtItmCommAmtChgP.Text = txtItmCommAmt.Text
        txtItmComm1P.Text = txtItmCommAmt.Text

        txtCurCde2P.Text = txtCurCde2.Text
        txtCus1SpP.Text = txtCus1Sp.Text

        txtCurCde21P.Text = txtCurCde2P.Text
        txtCus1DpP.Text = txtCus1Dp.Text

        lblApproveAmtP.Text = "Amt (" + txtCurCde2P.Text + ")"
    End Sub

    Private Sub PrcEmtCopyToDetail()
        txtItmCat.Text = txtItmCatP.Text
        txtVenTyp.Text = txtVenTypP.Text
        '0627
        'cboVenNo.Text = txtVenNoP.Text

        lblMUMin.Text = lblMUMinP.Text
        txtMU.Text = txtMUP.Text

        txtMUPrice.Text = txtMUPriceP.Text

        txtPckCstAmt.Text = txtPckCst1P.Text

        txtItmCommAmt.Text = txtItmComm1P.Text

        txtCus1Sp.Text = Format(round(CDbl(Val(txtStdPrcP.Text)), txtInvRndP.Text), "###,###,##0.0000")

        txtCus1Dp.Text = Format(round(CDbl(Val(txtCus1DpP.Text)), txtInvRndP.Text), "###,###,##0.0000")
    End Sub

    Private Sub CalDiscnt_Cus1()
        If txtDiscntP.Text = "" Or Val(txtDiscntP.Text) = 0 Then
            'txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")
            txtCus1DpP.Text = Format(CDec(IIf(txtCus1SpP.Text = "", 0, txtCus1SpP.Text)), "###,###,##0.0000")

            'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
            If CDec(IIf(txtCus1DpP.Text = "", 0, txtCus1DpP.Text)) < CDec(Val(txtBasPrcP.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
            End If
        Else
            'txtCus1Dp.Text = Format(round2(txtCus1Sp.Text * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")
            txtCus1DpP.Text = Format(txtCus1SpP.Text * (1 - (txtDiscntP.Text / 100)), "###,###,##0.0000")

            'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
            If CDec(IIf(txtCus1DpP.Text = "", 0, txtCus1DpP.Text)) < CDec(Val(txtBasPrcP.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
            End If
        End If
    End Sub

    Private Sub CalDiscnt_Cus2()
        If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
            If optMU.Checked = True Then
                'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100), txtInvRndP.Text), "###,###,##0.0000")
            Else
                'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100), txtInvRndP.Text), "###,###,##0.0000")
            End If

            'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
            If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < CDec(Val(txtBasPrc.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
            End If
        Else
            txtCus1Dp.Text = Format(round(txtCus1Sp.Text * (1 - (txtDiscnt.Text / 100)), CDbl(Val(txtInvRndP.Text))), "###,###,##0.0000")

            'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then

            'bug unhanndled object

            ' ''If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < CDec(Val(txtBasPrc.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
            ' ''    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
            ' ''End If

            If cboCus2No.Text <> "" Then
                If optMU.Checked = True Then
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If

                'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then

                'bug
                ' ''If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < CDec(Val(txtBasPrc.Text)) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
                ' ''    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
                ' ''End If
            End If
        End If
    End Sub

    Private Sub Cal_Dis_Prc(ByVal OrgPrc As Double, ByVal Discount As Double, ByVal cus1dp As Double)
        '*******Focus on Discount Fields*************
        If Discount_Flag = True Then
            'txtCus1Dp.Text = Format(round2(CDec(OrgPrc) * (1 - Val(Discount) / 100)), "###,###,##0.0000")
            txtCus1Dp.Text = Format(round(CDec(OrgPrc) * (1 - Val(Discount) / 100), txtInvRndP.Text), "###,###,##0.0000")

            If txtCus1Dp.Enabled = False Then
                either_cus1dp_or_cus2dp = txtCus1Dp.Text
                If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                    If Not IsNumeric(txtCus2Dp.Text) Then
                        txtCus2Dp.Text = txtCus1Dp.Text
                    End If
                    If optGM.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    ElseIf optMU.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    End If
                End If
                txtPCPrc.Text = either_cus1dp_or_cus2dp
                txtPCPrc_Text_round_5 = either_cus1dp_or_cus2dp

            End If

            If PCPrc_Flag = False And chkPC.Checked = True And txtUMFtr.Text <> "" Then
                Dim umftr As Decimal
                If Not IsNumeric(txtUMFtr.Text) Then
                    umftr = 1
                Else
                    umftr = txtUMFtr.Text
                End If

                If Val(txtUMFtr.Text) = 0 Then
                    umftr = 1
                End If
                '''20140212
                umftr = get_umftr()

                either_cus1dp_or_cus2dp = txtCus1Dp.Text
                If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                    If Not IsNumeric(txtCus2Dp.Text) Then
                        txtCus2Dp.Text = txtCus1Dp.Text
                    End If
                    If optGM.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    ElseIf optMU.Checked = True Then
                        either_cus1dp_or_cus2dp = txtCus2Dp.Text
                    End If
                End If
                txtPCPrc.Text = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.0000")
                txtPCPrc_Text_round_5 = Format(either_cus1dp_or_cus2dp / umftr, "###,###,##0.000000")

            End If

            Call Cal_DTL_Price()

            '*******Focus Not on Discount Fields*************
        Else
            '*** guard the discount and DP overlap change
            'txtDiscnt.Text = Format(100 - (round2(CDec(cus1dp) * 100 / CDec(OrgPrc))), "########0.##")
            'txtDiscnt.Text = Format(100 - (round(CDec(cus1dp) * 100 / CDec(OrgPrc), 2)), "########0.##")

            '(1-(I14/((I23+I28)*(1-(I21/100))-I19)))*100

            txtMU.Text = Format(round(CDbl((1 - (CDbl(Val(txtBasPrcP.Text)) / ((CDbl(Val(txtItmComm1P.Text)) + cus1dp) * _
                        (1 - (CDbl(Val(txtComm1P.Text)) / 100)) - CDbl(Val(txtPckCst1P.Text))))) * 100), 2), "###,###,##0.00")

            Call Cal_DTL_Price()
        End If

        'If rs_QUELCDTL.Tables.Count > 0 Then
        '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
        '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
        '            Call CalculateELC()
        '        Next
        '    End If
        'End If

        'Call cboCustItmCatPress()
        Call CalculateMatBkd()
        'Call CalculateELCTran()
    End Sub

    Private Sub CalculatePrc(ByVal blnUpdCurEx As Boolean)
        Dim dblCstEmtPert As Double
        Dim dblCstEmtAmt As Double
        Dim i As Integer

        Dim IsNthVenInf As Boolean
        Dim IsNthCaMrk As Boolean
        Dim IsNthIM As Boolean

        IsNthVenInf = False
        IsNthCaMrk = False
        IsNthIM = False

        dblCstEmtPert = 0
        dblCstEmtAmt = 0

        Dim cus1no As String
        Dim cus2no As String

        If rs_IMVENINF.Tables.Count = 0 Then
            '*** New logic to get Price Info
            If Trim(cboCus1No.Text) = "" Then
                cus1no = ""
            Else
                cus1no = Trim(Split(cboCus1No.Text, "-")(0))
            End If

            If Trim(cboCus2No.Text) = "" Then
                cus2no = ""
            Else
                cus2no = Trim(Split(cboCus2No.Text, "-")(0))
            End If

            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            '*** Phase 2
            gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & txtItmNo.Text & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckunt").ToString & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_inrqty").ToString & "','" & _
                                                    rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_mtrqty").ToString & "','" & _
                                                    cus1no & "','" & cus2no & "','" & _
                                                    cboFtyPrcTrm.Text & "','" & _
                                                    cboDtlPrcTrm.Text & "','" & _
                                                    cboTranTrm.Text & "','" & _
                                                    gsUsrID & "'"
            'gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & _
            '                                                txtItmNo.Text & "','" & _
            '                                                rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_pckunt").ToString & "','" & _
            '                                                rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_inrqty").ToString & "','" & _
            '                                                rs_IMPCKINF.Tables("RESULT").Rows(sReadingIndexP)("ipi_mtrqty").ToString & "','" & _
            '                                                cus1no & "','" & cus2no & "','" & gsUsrID & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading CalculatePrc sp_select_QUOTNDTL_Vendor :" & rtnStr)
                Exit Sub
            Else
                IsNthVenInf = True
            End If
        End If

        '*** For Update Currency Rate
        '*** Set the new basprc, ftycst, ftyprc, prctrm if update currency rate is requested
        If blnUpdCurEx = True Then
            If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
                txtFCurCde.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_curcde")
                txtFtyPrc.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprc"), "########0.0000")
                txtFtyCst.Text = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftycst"), "########0.0000")
                cboDtlPrcTrm.Text = Split(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm"), "-")(0).Trim
                cboFtyPrcTrm.Text = Split(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm"), "-")(0).Trim
                '*** Phase 2
                cboTranTrm.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm")

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") = 0 Then
                    '*** Phase 2
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
                    If txtCurCde2.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString & "'")
                        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat")), "########0.0000")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                        'rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat")), "########0.0000")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), "########0.0000")
                End If
            End If
        End If

        '*** Phase 2
        txtBasPrcP.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat") = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")

        Dim sTemp As String
        'Dim sFtyPrcTrm As String
        'Dim sPrcTrm As String
        'Dim sTranTrm As String

        sTemp = ""

        If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no").ToString <> "" Then
            sTemp = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus1no")
            If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no").ToString <> "" Then
                sTemp = sTemp + "/" + rs_IMVENINF.Tables("RESULT").Rows(0)("imu_cus2no")
            End If
        Else
            sTemp = "Standard"
        End If

        'sFtyPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_ftyprctrm").ToString
        'sPrcTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_prctrm").ToString
        'sTranTrm = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_trantrm").ToString

        'txtPrcKey.Text = sTemp + "/" + sFtyPrcTrm + "/" + sPrcTrm + "/" + sTranTrm
        txtPrcKey.Text = sTemp
        txtEffDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_effdat")).ToShortDateString
        txtExpDat.Text = Convert.ToDateTime(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_expdat")).ToShortDateString

        If rs_IMBASINF.Tables.Count = 0 Then
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMBASINF_Q '" & cboCoCde.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_IMBASINF, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading CalculatePrc sp_select_IMBASINF_Q :" & rtnStr)
                Exit Sub
            Else
                IsNthIM = True
            End If
        End If

        '*** Phase 2
        Call GetAllDisplay(Me)
        gbPanelCstEmt.SendToBack()
        gbPanelCstEmt.Visible = True
        Call release_TabControl()

        Call GetAllDisplay(Me)
        'Call cmdPrcEmt.PerformClick()
        'Call cmdPanPrcEmtUpdate.PerformClick()
        '2013
        Call release_TabControl()


        'PanelPrcEmt.BringToFront()

        'If rs_CUMCAMRK.Tables.Count > 0 Then
        '    If rs_CUMCAMRK.Tables("RESULT").Rows.Count > 0 Then
        '        dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '                            rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp") & _
        '                            "' and ccm_cat = '" & rs_IMBASINF.Tables("RESULT").Rows(0)("ibi_catlvl3") & "'")
        '        If dr.Length > 0 Then
        '            fml = dr(0)("yfi_fml").ToString
        '        Else
        '            dr = rs_CUMCAMRK.Tables("RESULT").Select("ccm_cusno = '" & Trim(Split(cboCus1No.Text, "-")(0)) & "' and ccm_ventyp = '" & _
        '                                                rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp") & _
        '                                                "' and ccm_cat = 'STANDARD'")
        '            If dr.Length > 0 Then
        '                fml = dr(0)("yfi_fml").ToString
        '            End If
        '        End If
        '    End If
        'End If

        'If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
        '    If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
        '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
        '        If txtCurCde2.Text = dr(0)("ysi_cde") Then
        '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString & "'")
        '            txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")
        '            'txtCus1Sp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")

        '            strCurExRat = CStr(dr(0)("yce_selrat"))
        '            strCurExEffDat = Format(dr(0)("yce_effdat"), "yyyy-MM-dd")

        '            If rs_QUCSTEMT.Tables.Count > 0 Then
        '                If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                    'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                    For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                        If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))) <> 0 Then
        '                                txtCus1Sp.Text = CStr(((CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / _
        '                                                        (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))))) * 100))
        '                            End If

        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d"))) <> 0 Then
        '                                dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")))
        '                                txtCus1Sp.Text = CStr(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) + dblCstEmtAmt)
        '                            End If
        '                        End If
        '                        dblCstEmtPert = 0
        '                        dblCstEmtAmt = 0
        '                    Next
        '                End If
        '            End If
        '            txtCus1Sp.Text = Format(round2(txtCus1Sp.Text), "###,###,##0.0000")
        '            'txtCus1Sp.Text = Format(roundup(txtCus1Sp.Text), "###,###,##0.0000")

        '            If cboCus2No.Text <> "" Then
        '                If optMU.Checked = True Then
        '                    txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                Else
        '                    txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                End If
        '            End If

        '            If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
        '                txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")

        '                If rs_QUCSTEMT.Tables.Count > 0 Then
        '                    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                        txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")
        '                        'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")

        '                        'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                        For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                            If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                    txtCus1Sp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                            (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                                End If

        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                    dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                    txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                                End If
        '                            End If
        '                            dblCstEmtPert = 0
        '                            dblCstEmtAmt = 0
        '                        Next
        '                    End If
        '                End If
        '                txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '                If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If

        '                If cboCus2No.Text <> "" Then
        '                    If optMU.Checked = True Then
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    Else
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    End If

        '                    If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                    End If
        '                End If
        '            Else
        '                txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat") * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat") * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")

        '                If rs_QUCSTEMT.Tables.Count > 0 Then
        '                    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                        txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")
        '                        'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) * dr(0)("ysi_selrat")), "###,###,##0.0000")

        '                        'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                        For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                            If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                    txtCus1Dp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                            (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                                End If

        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                    dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                    txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                                End If
        '                            End If
        '                            dblCstEmtPert = 0
        '                            dblCstEmtAmt = 0
        '                        Next
        '                    End If
        '                End If
        '                txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '                If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If

        '                If cboCus2No.Text <> "" Then
        '                    If optMU.Checked = True Then
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    Else
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    End If

        '                    If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                    End If
        '                End If
        '            End If
        '        Else
        '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
        '            txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")
        '            'txtCus1Sp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")

        '            strCurExRat = CStr(dr(0)("yce_selrat"))
        '            strCurExEffDat = Format(dr(0)("yce_effdat"), "yyyy-MM-dd")

        '            If rs_QUCSTEMT.Tables.Count > 0 Then
        '                If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                    'rs_QUCSTEMT.sort = "qce_ceseq asc"
        '                    For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                        If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))) <> 0 Then
        '                                txtCus1Sp.Text = CStr(((CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / _
        '                                                        (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))))) * 100))
        '                            End If

        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d"))) <> 0 Then
        '                                dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")))
        '                                txtCus1Sp.Text = CStr(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) + dblCstEmtAmt)
        '                            End If
        '                        End If
        '                        dblCstEmtPert = 0
        '                        dblCstEmtAmt = 0
        '                    Next
        '                End If
        '            End If
        '            txtCus1Sp.Text = Format(round2(txtCus1Sp.Text), "###,###,##0.0000")
        '            'txtCus1Sp.Text = Format(roundup(txtCus1Sp.Text), "###,###,##0.0000")

        '            If cboCus2No.Text <> "" Then
        '                If optMU.Checked = True Then
        '                    txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                Else
        '                    txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                End If
        '            End If

        '            If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
        '                txtCus1Dp.Text = Format(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)), "###,###,##0.0000")

        '                If rs_QUCSTEMT.Tables.Count > 0 Then
        '                    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                        txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")
        '                        'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")

        '                        'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                        For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                            If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                    txtCus1Dp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                            (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                                End If

        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                    dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                    txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                                End If
        '                            End If
        '                            dblCstEmtPert = 0
        '                            dblCstEmtAmt = 0
        '                        Next
        '                    End If
        '                End If
        '                txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '                'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If

        '                If cboCus2No.Text <> "" Then
        '                    If optMU.Checked = True Then
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    Else
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    End If

        '                    If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                    End If
        '                End If
        '            Else
        '                txtCus1Dp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")

        '                If rs_QUCSTEMT.Tables.Count > 0 Then
        '                    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                        txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")
        '                        'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml) / dr(0)("ysi_selrat")), "###,###,##0.0000")

        '                        'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                        For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                            If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                    txtCus1Dp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                            (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                                End If

        '                                If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                    dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                    txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                                End If
        '                            End If
        '                            dblCstEmtPert = 0
        '                            dblCstEmtAmt = 0
        '                        Next
        '                    End If
        '                End If
        '                txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '                'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '                If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If

        '                If cboCus2No.Text <> "" Then
        '                    If optMU.Checked = True Then
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    Else
        '                        txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                        'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    End If

        '                    If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                        MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                    End If
        '                End If
        '            End If
        '        End If
        '    Else
        '        txtCus1Sp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")
        '        'txtCus1Sp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")

        '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

        '        strCurExRat = CStr(dr(0)("yce_selrat"))
        '        strCurExEffDat = Format(dr(0)("yce_effdat"), "yyyy-MM-dd")

        '        If rs_QUCSTEMT.Tables.Count > 0 Then
        '            If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                    If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                        If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))) <> 0 Then
        '                            txtCus1Sp.Text = CStr((CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / _
        '                                                   (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_percent_d"))))) * 100)
        '                        End If

        '                        If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d"))) <> 0 Then
        '                            dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("cce_amt_d")))
        '                            txtCus1Sp.Text = CStr(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) + dblCstEmtAmt)
        '                        End If
        '                    End If
        '                    dblCstEmtPert = 0
        '                    dblCstEmtAmt = 0
        '                Next
        '            End If
        '        End If
        '        txtCus1Sp.Text = Format(round2(txtCus1Sp.Text), "###,###,##0.0000")
        '        'txtCus1Sp.Text = Format(roundup(txtCus1Sp.Text), "###,###,##0.0000")

        '        If cboCus2No.Text <> "" Then
        '            If optMU.Checked = True Then
        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '            Else
        '                txtCus2Sp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                'txtCus2Sp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '            End If
        '        End If

        '        If txtDiscnt.Text = "" Or Val(txtDiscnt.Text) = 0 Then
        '            txtCus1Dp.Text = Format(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)), "###,###,##0.0000")

        '            If rs_QUCSTEMT.Tables.Count > 0 Then
        '                If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                    '*** Exclude the cost calculated in SP
        '                    txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")
        '                    'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")
        '                    'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                    For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                        If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                txtCus1Dp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                        (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                            End If

        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                            End If
        '                        End If
        '                        dblCstEmtPert = 0
        '                        dblCstEmtAmt = 0
        '                    Next
        '                End If
        '            End If
        '            txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '            'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '            End If

        '            If cboCus2No.Text <> "" Then
        '                If optMU.Checked = True Then
        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                Else
        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                End If

        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If
        '            End If
        '        Else
        '            txtCus1Dp.Text = Format(round2(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")
        '            'txtCus1Dp.Text = Format(roundup(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 - (txtDiscnt.Text / 100))), "###,###,##0.0000")

        '            If rs_QUCSTEMT.Tables.Count > 0 Then
        '                If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
        '                    '*** Exclude the cost calculated in SP
        '                    txtCus1Dp.Text = Format(round2(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")
        '                    'txtCus1Dp.Text = Format(roundup(Eval(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), fml)), "###,###,##0.0000")
        '                    'rs_QUCSTEMT.sort = " qce_ceseq asc"
        '                    For i = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1
        '                        If rs_QUCSTEMT.Tables("RESULT").Rows(i)("mode").ToString <> "DEL" Then
        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))) <> 0 Then
        '                                txtCus1Dp.Text = CStr(((CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / _
        '                                                        (100 - CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_percent"))))) * 100))
        '                            End If

        '                            If CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt"))) <> 0 Then
        '                                dblCstEmtAmt = CDec(IIf(IsDBNull(rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")) = True, 0, rs_QUCSTEMT.Tables("RESULT").Rows(i)("qce_amt")))
        '                                txtCus1Dp.Text = CStr(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) + dblCstEmtAmt)
        '                            End If
        '                        End If
        '                        dblCstEmtPert = 0
        '                        dblCstEmtAmt = 0
        '                    Next
        '                End If
        '            End If
        '            txtCus1Dp.Text = Format(round2(txtCus1Dp.Text), "###,###,##0.0000")
        '            'txtCus1Dp.Text = Format(roundup(txtCus1Dp.Text), "###,###,##0.0000")

        '            If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then 'gsCompany = "UCPP" Then
        '                'If CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then 'gsCompany = "UCPP" Then
        '                MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '            End If

        '            If cboCus2No.Text <> "" Then
        '                If optMU.Checked = True Then
        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                Else
        '                    txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                    'txtCus2Dp.Text = Format(roundup(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - txtGrsMgn.Text / 100)), "###,###,##0.0000")
        '                End If
        '                If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < round2(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then 'gsCompany = "UCPP" Then
        '                    'If CDec(IIf(txtCus2Dp.Text = "", 0, txtCus2Dp.Text)) < roundup(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc")) And rs_IMVENINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString <> "E" Then 'gsCompany = "UCPP" Then
        '                    MsgBox("Discounted Price is less than Basic Price, need to authorize.")
        '                End If
        '            End If
        '        End If
        '    End If
        'End If

        If IsNthCaMrk = True Then
            '*** Phase 2 comment it
            'rs_CUMCAMRK.Tables.Clear()
            'rs_CUMCAMRK = Nothing
            fml = ""
        End If

        If IsNthVenInf = True Then
            rs_IMVENINF.Tables.Clear()
            'rs_IMVENINF = Nothing
        End If

        If IsNthIM = True Then
            rs_IMBASINF.Tables.Clear()
            'rs_IMBASINF = Nothing
        End If
    End Sub

    '*** Phase 2
    Private Sub CalItmNoVenBasPrc()
        If cboUM.Text <> "" And _
            cboFtyPrcTrm.Text <> "" And cboDtlPrcTrm.Text <> "" And cboTranTrm.Text <> "" And txtColCde.Text <> "" Then
            txtPckItr.Text = ""
            txtPeriod.Text = ""
            txtInrdin.Text = Format(0, "##0.####")
            txtInrwin.Text = Format(0, "##0.####")
            txtInrhin.Text = Format(0, "##0.####")
            txtMtrdin.Text = Format(0, "##0.####")
            txtMtrwin.Text = Format(0, "##0.####")
            txtMtrhin.Text = Format(0, "##0.####")

            txtInrdcm.Text = Format(0, "##0.####")
            txtInrwcm.Text = Format(0, "##0.####")
            txtInrhcm.Text = Format(0, "##0.####")
            txtMtrdcm.Text = Format(0, "##0.####")
            txtMtrwcm.Text = Format(0, "##0.####")
            txtMtrhcm.Text = Format(0, "##0.####")

            txtGrswgt.Text = Format(0, "##0.####")
            txtNetwgt.Text = Format(0, "##0.####")

            Dim strCusno As String

            'Call ABUASST(txtItmNo.Text, "CHKPCK_A")

            Dim cus1no As String
            Dim cus2no As String
            Dim venno As String

            If Trim(cboCus1No.Text) = "" Then
                cus1no = ""
            Else
                cus1no = Trim(Split(cboCus1No.Text, "-")(0))
            End If

            If Trim(cboCus2No.Text) = "" Then
                cus2no = ""
            Else
                cus2no = Trim(Split(cboCus2No.Text, "-")(0))
            End If

            If Trim(cboItmNoVen.text) = "" Then
                venno = ""
            Else
                venno = Trim(Split(cboItmNoVen.text, "-")(1))
            End If

            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            gspStr = "sp_select_IMCALFML_QUM00001 '" & cus1no & "','" & cus2no & "','" & venno & "','" & txtFCurCde.Text.Trim & "','" & Val(txtFtyPrc.Text) & "'"

            rtnLong = execute_SQLStatement(gspStr, rs_IMVENINF, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading CalItmNoVenBasPrc sp_select_IMCALFML_QUM00001 :" & rtnStr)
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count = 0 Then
                MsgBox("Cannot find a formula for calculate the basic price.")
                Exit Sub
            End If

            If rs_IMVENINF.Tables("RESULT").Rows.Count > 0 Then
                'txtFCurCde.Text = rs_IMVENINF.Tables("RESULT").Rows(0)("imu_curcde")
                txtFtyPrc.Text = Format(Val(txtFtyPrc.Text), "########0.0000")
                txtFtyCst.Text = Format(Val(txtFtyCst.Text), "########0.0000")

                '*** Calcualte Basic Price in Customer Currency
                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") = 0 Then
                    'txtQutItmSts.Text = "INCOMPLETE"
                    txtQutItmSts.Text = "I - Inactive"
                End If

                If rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString <> txtCurCde2.Text Then
                    dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")
                    If txtCurCde2.Text = dr(0)("ysi_cde") Then
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_IMVENINF.Tables("RESULT").Rows(0)("imu_bcurcde").ToString & "'")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    Else
                        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & txtCurCde2.Text & "'")
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(round(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc") / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                    End If
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = Format(rs_IMVENINF.Tables("RESULT").Rows(0)("imu_basprc"), "########0.0000")
                End If

                txtBasPrc.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc")
                txtVenTyp.Text = "E"
                txtItmCat.Text = "Standard"

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm") = cboTranTrm.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus1no") = ""
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cus2no") = ""
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_effdat") = "1900-01-01"
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_expdat") = "1900-01-01"

                txtPrcKey.Text = "Standard"
                txtEffDat.Text = ""
                txtExpDat.Text = ""

                Call LoadPrcEmtFromCU(cus1no, cus2no, txtVenTyp.Text.Trim, txtItmCat.Text.Trim, venno, cboDtlPrcTrm.Text, cboTranTrm.Text)
                cmdPrcEmt.Enabled = True


                Call GetAllDisplay(Me)
                gbPanelCstEmt.SendToBack()
                gbPanelCstEmt.Visible = True
                Call release_TabControl()


                'Call cmdPrcEmt.PerformClick()
                'Call cmdPanPrcEmtUpdate.PerformClick()
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
                'txtQutItmSts.Text = "INCOMPLETE"
                txtQutItmSts.Text = "I - Inactive"
            End If

            Call updateMOQMOA()
        Else 'else of "If cboUM.Text <> "" And .....
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_basprc") = 0
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_pckseq") = 0
            'txtHstRef.Text = ""
            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            txtCBM.Text = ""

            txtPeriod.Text = ""
            'txtQutDat.Text = ""

            txtMoq.Text = ""
            txtMoa.Text = ""
            '*** Reset Original MOQ/MOA value
            ORI_MOQ = "0"
            ORI_MOA = "0"
            ORI_MOFLAG = ""
            optMOQ.Checked = False
            optMOA.Checked = False

            txtSmpPrc.Text = ""
            'txtDiscnt.Text = "0"
            'txtDiscntP.Text = "0"

            cboDtlPrcTrm.Text = ""
            cboFtyPrcTrm.Text = ""   ' factory price term
            '*** Phase 2
            cboTranTrm.Text = ""
            txtBasPrc.Text = "0"

            txtCus1Sp.Text = "0"
            txtCus1SpP.Text = "0"
            txtCus2Sp.Text = "0"
            txtCus1Dp.Text = "0"
            txtCus1DpP.Text = "0"
            txtCus2Dp.Text = "0"
            txtFtyPrc.Text = ""
            txtFtyCst.Text = ""
            txtPckItr.Text = ""
            txtSmpUnt.Text = ""

            txtPrcKey.Text = ""
            txtEffDat.Text = ""
            txtExpDat.Text = ""
        End If
    End Sub

    Private Sub DeleteClickCheck()
        Dim qutseq As Integer
        Dim flag_handle_to As Boolean

        '''20140321
        flag_handle_to = False
        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" _
        And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" Then
            flag_handle_to = True
            '''20140321
            gspStr = "sp_select_TOORDDTL '" & cboCoCde.Text & "','" & "T" & txtQutNo.Text & "'"
            rtnLong = execute_SQLStatement(gspStr, rs_TOORDDTL2, rtnStr)

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading txtQutNoKeyPress sp_select_QUOTNDTL :" & rtnStr)
                Exit Sub
            End If

        End If

        If chkDelete.Checked = True Then
            If rs_QUOTNDTL.Tables.Count > 0 Then
                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
                    ''empty item
                    If txtItmNo.Text = "" Then
                        '''***)using flag to indicate delete, instead of row delete
                        '''rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Delete()
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("Del") = "Y"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*DEL*~"
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*DEL*~"

                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
                            Call reset_QUOTNDTL()
                            cmdBackD.Enabled = False
                            cmdNextD.Enabled = False
                        Else
                            ''
                            sReadingIndexQ = 0
                            'Call Display_Detail()
                            cmdBackD.Enabled = False
                            cmdNextD.Enabled = True
                            cboColCde.Enabled = False
                            cboPcking.Enabled = False

                            If txtItmNo.Enabled And txtItmNo.Visible Then txtItmNo.Focus()
                        End If

                        '''not empty item
                    Else

                        '''20140321
                        ''' check to & msg  checked  handle Array
                        'check
                        'Dim temp_qut_seq As Integer
                        Dim tmp_itmno, tmp_ItmNoVen, tmp_colcde, tmp_untcde, tmp_inrqty, tmp_mtrqty As String
                        Dim tmp_cft, tmp_cbm, tmp_ftyprctrm, tmp_dtlprctrm, tmp_trantrm As String
                        Dim temp_to_seq As Integer

                        'temp_qut_seq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")
                        tmp_itmno = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString)
                        tmp_colcde = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_colcde").ToString)
                        tmp_untcde = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_untcde").ToString)
                        tmp_inrqty = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrqty").ToString)
                        tmp_mtrqty = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrqty").ToString)
                        tmp_ftyprctrm = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_ftyprctrm").ToString)
                        tmp_dtlprctrm = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_prctrm").ToString)
                        tmp_trantrm = Trim(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_trantrm").ToString)

                        If flag_handle_to = True And Not rs_TOORDDTL2.Tables("RESULT") Is Nothing Then
                            For index3 As Integer = 0 To rs_TOORDDTL2.Tables("RESULT").Rows.Count - 1
                                temp_to_seq = rs_TOORDDTL2.Tables("RESULT").Rows(index3).Item("tod_toordseq")

                                'If temp_qut_seq = temp_to_seq Then
                                If tmp_itmno = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_ftyitmno").ToString) And _
                                     Microsoft.VisualBasic.Left(tmp_colcde, 6) = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_colcde").ToString) And _
                                        tmp_untcde = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_pckunt").ToString) And _
                                        tmp_inrqty = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_inrqty").ToString) And _
                                        tmp_mtrqty = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_mtrqty").ToString) And _
                                        tmp_ftyprctrm = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_ftyprctrm").ToString) And _
                                        tmp_dtlprctrm = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_hkprctrm").ToString) And _
                                        tmp_trantrm = Trim(rs_TOORDDTL2.Tables("RESULT").Rows(index3)("tod_trantrm").ToString) Then
                                    'all match

                                    flag_delete_to_seq(sReadingIndexQ) = temp_to_seq
                                    MsgBox("When delete & save, will set the related TO quantity to zero. (TO Number:" & "T" & txtQutNo.Text & ", TO seq:" & temp_to_seq & ")")
                                End If
                            Next
                            'handle array

                        End If


                        If Add_flag = True Or Insert_flag = True Then
                            'not empty item??
                            If txtItmNo.Text <> "" And txtItmNo.Enabled = True Then
                                If not_exist_ITEM() = True Then
                                    '''***)using flag to indicate delete, instead of row delete
                                    '''  rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Delete()
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("Del") = "Y"
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*DEL*~"
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*DEL*~"

                                    If rs_QUOTNDTL.Tables("RESULT").Rows.Count = 0 Then
                                        Call reset_QUOTNDTL()
                                        cmdBackD.Enabled = False
                                        cmdNextD.Enabled = False
                                    Else
                                        sReadingIndexQ = 0
                                        'Call Display_Detail()
                                        cmdBackD.Enabled = False
                                        cmdNextD.Enabled = True
                                        cboColCde.Enabled = False
                                        cboPcking.Enabled = False
                                        If txtItmNo.Enabled And txtItmNo.Visible Then txtItmNo.Focus()
                                    End If
                                    Exit Sub
                                End If
                            End If
                        End If

                        '*** check for Discontinued New Item
                        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" And _
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString = "OLD" Then

                            Dim rsIMBASINF As New DataSet

                            '' Cursor = Cursors.WaitCursor

                            gsCompany = Trim(cboCoCde.Text)
                            Call Update_gs_Value(gsCompany)

                            gspStr = "sp_select_IMBASINF_Q_Check_Dis '" & cboCoCde.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString & "'"
                            rtnLong = execute_SQLStatement(gspStr, rsIMBASINF, rtnStr)
                            gspStr = ""

                            '' Cursor = Cursors.Default

                            If rtnLong <> RC_SUCCESS Then
                                MsgBox("Error on loading DeleteClickCheck sp_select_IMBASINF_Q_Check_Dis :" & rtnStr)
                                Exit Sub
                            End If

                            If rsIMBASINF.Tables("RESULT").Rows.Count > 0 Then
                                Dim counter As Integer
                                For counter = 0 To rsIMBASINF.Tables("RESULT").Rows.Count - 1
                                    If rsIMBASINF.Tables("RESULT").Rows(0)("ibi_itmsts") = "DIS" Then
                                        '''20130807 allow delete item chkDelete.Enabled = False
                                        cmdSave.Enabled = True
                                        Exit For
                                    End If
                                Next
                            End If
                        End If

                        Recordstatus = True
                    End If
                ElseIf rs_QUOTNDTL.Tables("RESULT").Rows.Count = 1 Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("Del") = "N"
                    chkDelete.Checked = False

                    If flgRenewing = False Then
                        MsgBox("This Quotation just has one detail line record only, cannot delete.")
                    End If
                    If txtItmNo.Enabled And txtItmNo.Visible Then txtItmNo.Focus()
                    'Exit Sub
                End If
            End If

            ''
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "N"

        End If

        qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")

        Call display_Detail(qutseq)

        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("del") = "Y" Then
            Exit Sub
        End If

        flag_cmdInsRow_Click = False
    End Sub

    Private Function delete_All() As Boolean
        Dim count_all As Integer
        Dim count_del As Integer

        no_Display_Detail = True

        count_all = rs_QUOTNDTL.Tables("RESULT").Rows.Count
        dr = rs_QUOTNDTL.Tables("RESULT").Select("Del = 'Y'")
        count_del = dr.Length

        If count_all = count_del Then
            delete_All = True
        Else
            delete_All = False
        End If

        no_Display_Detail = False
    End Function
    Private Function not_to_delete_All() As Boolean
        Dim count_all As Integer
        Dim count_del As Integer

        no_Display_Detail = True

        count_all = rs_QUOTNDTL.Tables("RESULT").Rows.Count
        dr = rs_QUOTNDTL.Tables("RESULT").Select("Del = 'Y'")
        count_del = dr.Length


        If count_all = count_del + 1 Then
            not_to_delete_All = True
        Else
            not_to_delete_All = False
        End If

        no_Display_Detail = False
    End Function


    Private Sub check_approval(ByVal dMU As Double)

        ''avoid DBNULL
        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
            Exit Sub
        End If



        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                If IIf(IsDBNull(txtSubTtlPercChgP.Text), 0, Val(txtSubTtlPercChgP.Text)) - IIf(IsDBNull(dMU), 0, dMU) > Val(txtMaxApprovePercP.Text) Then
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" Then
                        MsgBox("Discount is over the Max Percentage (" + txtMaxApprovePercP.Text + _
                               "%), the whole Quotation after save will be freeze and in 'Wait for Approve' status. It needs authorized people to approve and release it.")
                    End If
                End If

                If IIf(IsDBNull(txtSubTtlPercChgP.Text), 0, Val(txtSubTtlPercChgP.Text)) - IIf(IsDBNull(dMU), 0, dMU) > Val(txtMaxApprovePercP.Text) Then
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" Then
                        If chkApproveDtl.Checked = True And chkApproveDtl.Enabled = True Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = "Y"
                            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
                            End If
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = "N"
                        End If
                    End If
                Else
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve").ToString <> "Y" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = ""
                    Else
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = "Y"
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub check_Status()
        auth = False

        no_Display_Detail = True

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                '*** Phase 2 comment it
                ''*** Check logic to check discount price less than fty price/ basic price
                'If rs_QUOTNDTL.Tables("RESULT").Rows(index)("vbi_ventyp").ToString = "I" Or _
                '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("vbi_ventyp").ToString = "J" Then
                '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
                '        Call GetApprPert()
                '    End If

                '    If (Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) > CDbl(strApprMax) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) < CDbl(strApprMin) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) < rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                '        auth = True
                '    End If
                'Else
                '    If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") <> rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde").ToString <> "" Then
                '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                '        If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") = dr(0)("ysi_cde") Then
                '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde").ToString & "'")
                '            'ftyprc = Format(roundup(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) * dr(0)("ysi_selrat")), "########0.0000")
                '            ftyprc = Format(round(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                '        Else
                '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde").ToString & "'")
                '            'ftyprc = Format(roundup(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) / dr(0)("ysi_selrat")), "########0.0000")
                '            ftyprc = Format(round(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                '        End If
                '    Else
                '        ftyprc = Format(CDbl(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString)), "########0.0000")
                '    End If

                '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
                '        Call GetApprPert()
                '    End If

                '    If (Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) > CDbl(strApprMax) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) < CDbl(strApprMin) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) < ftyprc) And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                '        auth = True
                '    End If
                'End If
                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString = "N" And _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                    auth = True
                    Exit For
                End If
            Next
        End If

        no_Display_Detail = False
    End Sub

    Private Sub save_Header()
        Dim message As String
        Dim rsM As New DataSet
        Dim relatn As String

        save_fail = False

        If optActive.Checked = True And optPassive.Checked = False Then
            relatn = "A"
        ElseIf optActive.Checked = False And optPassive.Checked = True Then
            relatn = "P"
        ElseIf optActive.Checked = False And optPassive.Checked = False Then
            relatn = ""
        End If

        Dim cus2no As String
        '*** Phase 2
        Dim saldiv, srname As String
        '*** Phase 2 comment it
        Dim salrep As String
        Dim cusagt As String
        Dim smpprd As String
        Dim smpfgt As String
        Dim prctrm As String
        Dim PayTrm As String
        Dim CurCde As String
        '*** Phase 2
        Dim dept, year, desc As String

        If cboCus2No.Text = "" Then
            cus2no = ""
        Else
            cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
        End If
        '*** Phase 2 comment it
        'If cboSalRep.Text = "" Then
        '    salrep = ""
        'Else
        '    salrep = Microsoft.VisualBasic.Left(cboSalRep.Text, InStr(cboSalRep.Text, " - ") - 1)
        'End If
        If cboSalDiv.Text.Trim = "" Then
            saldiv = ""
        Else
            saldiv = cboSalDiv.Text.Trim
        End If
        If cboSalRep.Text.Trim = "" Then
            srname = ""
        Else
            srname = Split(cboSalRep.Text.Trim, "(")(1)
            srname = srname.Substring(0, srname.Length - 1)
        End If

        If cboCusAgt.Text = "" Then
            cusagt = ""
        Else
            cusagt = Microsoft.VisualBasic.Left(cboCusAgt.Text, InStr(cboCusAgt.Text, " - ") - 1)
        End If
        If cboSmpPrd.Text = "" Then
            smpprd = ""
        Else
            smpprd = Microsoft.VisualBasic.Left(cboSmpPrd.Text, InStr(cboSmpPrd.Text, " - ") - 1)
        End If
        If cboSmpFgt.Text = "" Then
            smpfgt = ""
        Else
            smpfgt = Microsoft.VisualBasic.Left(cboSmpFgt.Text, InStr(cboSmpFgt.Text, " - ") - 1)
        End If
        If txtPrcTrm.Text = "" Then
            prctrm = ""
        Else
            prctrm = Microsoft.VisualBasic.Left(txtPrcTrm.Text, InStr(txtPrcTrm.Text, " - ") - 1)
        End If
        If txtPayTrm.Text = "" Then
            PayTrm = ""
        Else
            PayTrm = Microsoft.VisualBasic.Left(txtPayTrm.Text, InStr(txtPayTrm.Text, " - ") - 1)
        End If
        If txtCurCde.Text = "" Then
            CurCde = ""
        Else
            CurCde = Microsoft.VisualBasic.Left(txtCurCde.Text, InStr(txtCurCde.Text, " - ") - 1)
        End If
        '*** Phase 2
        If txtDeptH.Text.Trim = "" Then
            dept = ""
        Else
            dept = txtDeptH.Text.Trim
        End If
        If cboYear.Text.Trim = "" Then
            year = ""
        Else
            year = cboYear.Text.Trim
        End If
        If txtDesc.Text.Trim = "" Then
            desc = ""
        Else
            desc = txtDesc.Text.Trim
        End If

        If chkCancel.Checked = False And auth = False Then
            qutsts = "A"
        ElseIf chkCancel.Checked = False And auth = True Then
            qutsts = "W"
        ElseIf chkCancel.Checked = True Then
            qutsts = "C"
        End If

        Dim strSeason As String

        strSeason = ""

        If rs_Season.Tables.Count > 0 Then
            If rs_Season.Tables("RESULT").Rows.Count > 0 Then
                dr = rs_Season.Tables("RESULT").Select("ysi_dsc = '" + cboSeason.Text + "'")

                If dr.Length > 0 Then
                    strSeason = dr(0)("ysi_dsc")
                Else
                    strSeason = ""
                End If
            End If
        End If

        If strApprMax = "N/A" Then
            strApprMax = "3"
        End If

        If strApprMin = "N/A" Then
            strApprMin = "3"
        End If

        '*** Change status from Wait for Approve to Active
        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "W" And chkApprove.Checked = True And chkCancel.Checked = False Then
            qutsts = "A"
        End If

        '*******************************************************
        '*** check whether has Old Item
        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                If (Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts").ToString, 3) = "OLD" And _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitm").ToString <> "Y") Or _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pdabpdiff").ToString = "Y" Then
                    If rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                        qutsts = "H"
                        Exit For
                    End If
                End If
            Next
        End If
        '*******************************************************

        If Add_flag = True Then
            '*** Add QUOTNHDR
            '' Cursor = Cursors.WaitCursor

            gsCompany = Trim(cboCoCde.Text)
            Call Update_gs_Value(gsCompany)

            'gspStr = "sp_insert_QUOTNHDR '" & cboCoCde.Text & "','" & qutNo & "','" & _
            '        Microsoft.VisualBasic.Left(txtIssDat.Text, 10) & "','" & Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & _
            '        Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & _
            '        cus2no & "','" & relatn & "','" & Replace(txtCus1Ad.Text, "'", "''") & "','" & Replace(txtCus2Ad.Text, "'", "''") & "','" & _
            '        txtCus1St.Text & "','" & txtCus1Cy.Text & "','" & txtCus1Zp.Text & "','" & _
            '        txtCus2St.Text & "','" & txtCus2Cy.Text & "','" & txtCus2Zp.Text & "','" & _
            '        Replace(cboCus1Cp.Text, "'", "''") & "','" & Replace(cboCus2Cp.Text, "'", "''") & "','" & salrep & "','" & cusagt & "','" & _
            '        Microsoft.VisualBasic.Left(txtValDat.Text, 10) & "','" & smpprd & "','" & smpfgt & "','" & prctrm & "','" & _
            '        PayTrm & "','" & CurCde & "','" & qutsts & "','" & Replace(txtRmk.Text, "'", "''") & "','" & IIf(chkPC_hdr.Checked = True, "Y", "") & "','" & _
            '        IIf(Trim(cboYear.Text) = "", "", Trim(cboYear.Text)) & "','" & strSeason & "','" & IIf(Trim(txtDesc.Text) = "", "", Trim(txtDesc.Text)) & "','" & _
            '        Replace(strApprMax, "-", "") & "','" & Replace(strApprMin, "-", "") & "','" & _
            '        strCurExRat & "','" & strCurExEffDat & "','" & gsUsrID & "'"
            gspStr = "sp_insert_QUOTNHDR '" & cboCoCde.Text & "','" & qutNo & "','" & _
                    Microsoft.VisualBasic.Left(txtIssDat.Text, 10) & "','" & Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & _
                    IIf(InStr(cboCus1No.Text, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1), "") & "','" & _
                    cus2no & "','" & relatn & "','" & Replace(txtCus1Ad.Text, "'", "''") & "','" & Replace(txtCus2Ad.Text, "'", "''") & "','" & _
                    txtCus1St.Text & "','" & txtCus1Cy.Text & "','" & txtCus1Zp.Text & "','" & _
                    txtCus2St.Text & "','" & txtCus2Cy.Text & "','" & txtCus2Zp.Text & "','" & _
                    Replace(cboCus1Cp.Text, "'", "''") & "','" & Replace(cboCus2Cp.Text, "'", "''") & "','','" & cusagt & "','" & _
                    Microsoft.VisualBasic.Left(txtValDat.Text, 10) & "','" & smpprd & "','" & smpfgt & "','" & prctrm & "','" & _
                    PayTrm & "','" & CurCde & "','" & qutsts & "','" & Replace(txtRmk.Text, "'", "''") & "','" & IIf(chkPC_hdr.Checked = True, "Y", "") & "','" & _
                    year & "','" & strSeason & "','" & desc & "','" & _
                    Replace(strApprMax, "-", "") & "','" & Replace(strApprMin, "-", "") & "','" & _
                    strCurExRat & "','" & strCurExEffDat & "','" & cboCus1CgInt.Text.Trim & "','" & cboCus1CgExt.Text.Trim & "','" & dept & "','" & _
                    saldiv & "','" & srname & "','" & gsUsrID & "'"
            message = "sp_insert_QUOTNHDR"
        Else
            If Not ChecktimeStamp() Then
                MsgBox("The record has been modified by other users, please refresh and try again.")
                '' Cursor = Cursors.Default
                save_ok = False
                save_fail = True
                Exit Sub
            Else
                '***********************************Cancel Sample Order Detail if Quot Status is Cancel*****************
                If qutsts = "C" And Add_flag = False And Trim(txtQutNo.Text) <> "" Then
                    If MsgBox("Confirm to Cancel this Quotation", vbQuestion + vbYesNo, "Question") = vbYes Then
                        Dim SmpRs As New DataSet

                        '' Cursor = Cursors.WaitCursor

                        gsCompany = Trim(cboCoCde.Text)
                        Call Update_gs_Value(gsCompany)

                        gspStr = "sp_update_SAORDDTL_Cancel '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & gsUsrID & "'"
                        rtnLong = execute_SQLStatement(gspStr, SmpRs, rtnStr)
                        gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Update Sample Fail")
                            Exit Sub
                        End If

                        IsUpdated = True
                        save_fail = False
                    Else
                        IsUpdated = False
                        save_fail = True
                        Exit Sub
                    End If
                    '' Cursor = Cursors.Default
                End If
                '*******************************************************************************************************

                '' Cursor = Cursors.WaitCursor

                gsCompany = Trim(cboCoCde.Text)
                Call Update_gs_Value(gsCompany)

                'gspStr = "sp_update_QUOTNHDR '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & Microsoft.VisualBasic.Left(txtIssDat.Text, 10) & "','" & _
                '        Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "','" & _
                '        cus2no & "','" & relatn & "','" & Replace(txtCus1Ad.Text, "'", "''") & "','" & Replace(txtCus2Ad.Text, "'", "''") & "','" & _
                '        txtCus1St.Text & "','" & txtCus1Cy.Text & "','" & txtCus1Zp.Text & "','" & _
                '        txtCus2St.Text & "','" & txtCus2Cy.Text & "','" & txtCus2Zp.Text & "','" & _
                '        Replace(cboCus1Cp.Text, "'", "''") & "','" & Replace(cboCus2Cp.Text, "'", "''") & "','" & salrep & "','" & cusagt & "','" & _
                '        Microsoft.VisualBasic.Left(txtValDat.Text, 10) & "','" & smpprd & "','" & smpfgt & "','" & prctrm & "','" & _
                '        PayTrm & "','" & CurCde & "','" & qutsts & "','" & Replace(txtRmk.Text, "'", "''") & "','" & IIf(chkPC_hdr.Checked = True, "Y", "") & "','" & _
                '        IIf(Trim(cboYear.Text) = "", "", Trim(cboYear.Text)) & "','" & strSeason & "','" & _
                '        IIf(Trim(txtDesc.Text) = "", "", Trim(txtDesc.Text)) & "','" & Replace(strApprMax, "-", "") & "','" & Replace(strApprMin, "-", "") & "','" & _
                '        strCurExRat & "','" & strCurExEffDat & "','" & gsUsrID & "'"
                gspStr = "sp_update_QUOTNHDR '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & Microsoft.VisualBasic.Left(txtIssDat.Text, 10) & "','" & _
                        Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & IIf(InStr(cboCus1No.Text, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1), "") & "','" & _
                        cus2no & "','" & relatn & "','" & Replace(txtCus1Ad.Text, "'", "''") & "','" & Replace(txtCus2Ad.Text, "'", "''") & "','" & _
                        txtCus1St.Text & "','" & txtCus1Cy.Text & "','" & txtCus1Zp.Text & "','" & _
                        txtCus2St.Text & "','" & txtCus2Cy.Text & "','" & txtCus2Zp.Text & "','" & _
                        Replace(cboCus1Cp.Text, "'", "''") & "','" & Replace(cboCus2Cp.Text, "'", "''") & "','','" & cusagt & "','" & _
                        Microsoft.VisualBasic.Left(txtValDat.Text, 10) & "','" & smpprd & "','" & smpfgt & "','" & prctrm & "','" & _
                        PayTrm & "','" & CurCde & "','" & qutsts & "','" & Replace(txtRmk.Text, "'", "''") & "','" & IIf(chkPC_hdr.Checked = True, "Y", "") & "','" & _
                        year & "','" & strSeason & "','" & desc & "','" & _
                        Replace(strApprMax, "-", "") & "','" & Replace(strApprMin, "-", "") & "','" & _
                        strCurExRat & "','" & strCurExEffDat & "','" & cboCus1CgInt.Text.Trim & "','" & cboCus1CgExt.Text.Trim & "','" & dept & "','" & _
                        saldiv & "','" & srname & "','" & gsUsrID & "'"
                message = "sp_update_QUOTNHDR"
            End If
        End If

        If gspStr > "" Then  '*** if there is something to do with s ...
            'rsM = objBSGate.Modify(gsConnStr, "sp_general", S)

            rtnLong = execute_SQLStatement(gspStr, rsM, rtnStr)
            gspStr = ""

            '' Cursor = Cursors.Default

            If rtnLong <> RC_SUCCESS Then
                MsgBox("Error on loading save_Header " & message & " :" & rtnStr)
                Exit Sub
            Else
                IsUpdated = True
            End If
        End If
    End Sub



    Private Function ChecktimeStamp() As Boolean
        '*** Compare the current record's timestamp and the DB timestamp
        Dim Save_TimeStamp As Long

        Dim rs_CheckTimeStamp As New DataSet

        '' Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_QUOTNHDR '" & cboCoCde.Text & "','" & txtQutNo.Text & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_CheckTimeStamp, rtnStr)
        gspStr = ""

        '' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading ChecktimeStamp sp_select_QUOTNHDR :" & rtnStr)
            Exit Function
        End If

        Save_TimeStamp = CLng(rs_CheckTimeStamp.Tables("RESULT").Rows(0)("quh_timstp"))

        If CLng(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_timstp")) <> Save_TimeStamp Then
            ChecktimeStamp = False
        Else
            ChecktimeStamp = True
        End If
    End Function

    Private Sub save_Detail()
        Dim rs As New DataSet

        Dim seq As Integer
        Dim itmsts As String
        Dim hrmcde As String
        Dim venno As String
        Dim cus1no As String
        Dim cus1na As String
        Dim cus2no As String
        Dim cus2na As String

        Dim strCustItmCat As String

        save_fail = False

        If cboItmSts.Text = "" Then
            itmsts = ""
        Else
            itmsts = Microsoft.VisualBasic.Left(cboItmSts.Text, InStr(cboItmSts.Text, " - ") - 1)
        End If
        If cboHrmCde.Text = "" Then
            hrmcde = ""
        Else
            If InStr(cboHrmCde.Text, " - ") > 0 Then
                hrmcde = Microsoft.VisualBasic.Left(cboHrmCde.Text, InStr(cboHrmCde.Text, " - ") - 1)
            Else
                hrmcde = cboHrmCde.Text
            End If
        End If
        If cboVenNo.Text = "" Or InStr(cboVenNo.Text, " - ") - 1 < 0 Then
            venno = ""
        Else
            venno = Microsoft.VisualBasic.Left(cboVenNo.Text, InStr(cboVenNo.Text, " - ") - 1)
        End If

        cus1no = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
        cus1na = Microsoft.VisualBasic.Right(cboCus1No.Text, Len(cboCus1No.Text) - InStr(cboCus1No.Text, " - ") - 2)

        If cboCus2No.Text <> "" Then
            cus2no = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
            cus2na = Microsoft.VisualBasic.Right(cboCus2No.Text, Len(cboCus2No.Text) - InStr(cboCus2No.Text, " - ") - 2)
        Else
            cus2no = ""
            cus2na = ""
        End If

        Dim approve As String
        approve = ""

        auth = False

        no_Display_Detail = True

        '''0825??
        'If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
        '    Exit Sub
        'End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                strCustItmCat = ""

                If rs_CustItmCat.Tables.Count > 0 Then
                    If rs_CustItmCat.Tables("RESULT").Rows.Count > 0 Then
                        dr = rs_CustItmCat.Tables("RESULT").Select("crp_rpdsc = '" + rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcat").ToString + "'")

                        If dr.Length > 0 Then
                            strCustItmCat = dr(0)("crp_rpcde")
                        Else
                            strCustItmCat = ""
                        End If
                    End If
                End If

                '*** Phase 2
                Dim itmvenno As String

                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno") = "" Then
                    itmvenno = ""
                Else
                    If InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno").ToString, " - ") - 1 >= 0 Then

                        If Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_itmnovenno"), " - ")(0)) > 1000 And _
                        Val(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_itmnovenno"), " - ")(0)) < 9999 _
                                    Then
                            itmvenno = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno").ToString, "-")(0)
                        Else
                            itmvenno = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno").ToString, "-")(1)
                        End If
                    Else
                        ''no -
                        itmvenno = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnovenno").ToString, "-")(0)
                    End If


                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde").ToString <> "" And _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde").ToString <> "" And _
                    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc").ToString) > 0 And _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts").ToString <> "I - Inactive" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") = "A - Active"
                Else
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") = "I - Inactive"
                End If

                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString = "N" Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") = "W - Wait for Approval"
                End If

                '*** Phase 2 comment it
                '*** Check logic to check discount price less than fty price/basic price
                'If rs_QUOTNDTL.Tables("RESULT").Rows(index)("vbi_ventyp").ToString = "I" Or _
                '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("vbi_ventyp").ToString = "J" Then
                '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
                '        Call GetApprPert()
                '    End If

                '    If (Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) > CDbl(strApprMax) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) < CDbl(strApprMin) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) < rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" Then
                '        auth = True

                '        If chkApprove.Checked = True And chkApprove.Enabled = True Then
                '            approve = "Y"
                '            If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
                '                rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '            End If
                '        Else
                '            approve = "N"
                '        End If
                '    Else
                '        If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" Then
                '            approve = ""
                '        Else
                '            approve = "Y"
                '        End If

                '        If chkApprove.Checked = True And chkApprove.Enabled = True Then
                '            If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
                '                rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '            End If
                '        End If
                '    End If

                '    If (Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "W" And qutsts = "A") Or Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Then
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '    End If
                'Else
                '    If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") <> rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde").ToString <> "" Then
                '        dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_def = 'Y'")

                '        If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") = dr(0)("ysi_cde") Then
                '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde").ToString & "'")
                '            'ftyprc = Format(roundup(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) * dr(0)("ysi_selrat")), "########0.0000")
                '            ftyprc = Format(round(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) * dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                '        Else
                '            dr = rs_CUBASINF_CR.Tables("RESULT").Select("ysi_cde = " & "'" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde").ToString & "'")
                '            'ftyprc = Format(roundup(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) / dr(0)("ysi_selrat")), "########0.0000")
                '            ftyprc = Format(round(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) / dr(0)("ysi_selrat"), txtInvRndP.Text), "########0.0000")
                '        End If
                '    Else
                '        ftyprc = Format(Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString), "########0.0000")
                '    End If

                '    '****************** All Company only have 3% discount allownace for no need to appprove *********
                '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
                '        Call GetApprPert()
                '    End If

                '    If (Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) > CDbl(strApprMax) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) < CDbl(strApprMin) Or _
                '        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) < ftyprc) And _
                '        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" Then
                '        auth = True

                '        If chkApprove.Checked = True And chkApprove.Enabled = True Then
                '            approve = "Y"
                '            If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
                '                rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '            End If
                '        Else
                '            approve = "N"
                '        End If
                '    Else
                '        If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" Then
                '            approve = ""
                '        Else
                '            approve = "Y"
                '        End If

                '        If chkApprove.Checked = True And chkApprove.Enabled = True Then
                '            If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
                '                rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '            End If
                '        End If

                '        If (Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "W" And qutsts = "A") Or Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Then
                '            rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                '        End If
                '    End If
                'End If


                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString = "NEW" And _
                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                    '*** Phase 2 comment it
                    'If UBound(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString, " - ")) > 0 Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString, " - ")(0)
                    'Else
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") = ""
                    'End If

                    'If UBound(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString, " - ")) > 0 Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString, " - ")(0)
                    'Else
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") = ""
                    'End If

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_insert_QUOTNDTL '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmdsc").ToString, "'", "''") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alsitmno") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alscolcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_conftr") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_contopc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pcprc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hstref") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscol") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_coldsc").ToString, "'", "''") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckseq") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2dp").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_onetim") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moflag") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoa").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpqty").ToString) & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hrmcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dtyrat").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dept") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususd").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscad").ToString) & "','" & _
                        IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1 >= 0, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1, 0)), "") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_subcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venitm") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftycst").ToString) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_note").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_image") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhin") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhin") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhcm") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhcm") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grswgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_netwgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cosmth") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpprc").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusitm") & "','" & cus1no & "','" & Replace(cus1na, "'", "''") & "','" & cus2no & "','" & Replace(cus2na, "'", "''") & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) = True, "", rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grsmgn").ToString) & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbm") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbmsts") & "','" & Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckitr").ToString, "'", "''") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_stkqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpunt") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmtyp") & "','" & _
                        qutsts & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") & "','" & _
                        IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1 >= 0, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1, 0)), "") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cussub") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusstyno") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_upc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_specpck") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitmno") & "','" & strCustItmCat & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatfml") & "','" & IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")) & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")), "", rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")) & "','" & _
                        Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imrmk").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_rndsts") & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")) & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moqunttyp") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1no") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2no") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_effdat") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_expdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotyp") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoreal") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotmp") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoven") & "','" & itmvenno & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imgpth") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususdcur") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscadcur") & "','" & _
                        cboDV.Text.Trim & "','" & _
                        cboTV.Text.Trim & "','" & _
                        cboFA.Text.Trim & "','" & _
                        cboTOFty.Text.Trim & "','" & _
                        txtTOOrdQty.Text.Trim & "','" & _
                        txtTORemark.Text.Trim & "','" & _
                        txtDTLFtyShpDateStr.Text & "','" & _
                        txtDTLFtyShpDateEnd.Text & "','" & _
                        txtDTLCustShpDateStr.Text & "','" & _
                        txtDTLCustShpDateEnd.Text & "','" & _
                        gsUsrID & "'"
                    'gspStr = "sp_insert_QUOTNDTL '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmdsc").ToString, "'", "''") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alsitmno") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alscolcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_conftr") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_contopc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pcprc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hstref") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscol") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_coldsc").ToString, "'", "''") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckseq") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2dp").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_onetim") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moflag") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoa").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpqty").ToString) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hrmcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dtyrat").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dept") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususd").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscad").ToString) & "','" & _
                    '    Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_subcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venitm") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftycst").ToString) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_note").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_image") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhin") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhin") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhcm") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhcm") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grswgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_netwgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cosmth") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpprc").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusitm") & "','" & cus1no & "','" & Replace(cus1na, "'", "''") & "','" & cus2no & "','" & Replace(cus2na, "'", "''") & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) = True, "", rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grsmgn").ToString) & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbm") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbmsts") & "','" & Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & approve & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckitr").ToString, "'", "''") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_stkqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpunt") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmtyp") & "','" & _
                    '    qutsts & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") & "','" & _
                    '    Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cussub") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusstyno") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_upc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_specpck") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitmno") & "','" & strCustItmCat & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatfml") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu") & "','" & _
                    '    Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imrmk").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_rndsts") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moqunttyp") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1no") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2no") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_effdat") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_expdat") & "','" & gsUsrID & "'"

                    If gspStr > "" Then  '*** if there is something to do with s ...
                        'rs = objBSGate.Enquire(gsConnStr, "sp_general", S)

                        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                        gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading save_Detail sp_insert_QUOTNDTL :" & rtnStr)
                            Exit Sub
                        End If

                        IsUpdated = True
                        seq = rs.Tables("RESULT").Rows(0)(0).ToString

                        '*** Phase 2
                        '' Cursor = Cursors.WaitCursor

                        gsCompany = Trim(cboCoCde.Text)
                        Call Update_gs_Value(gsCompany)

                        If rs_QUPRCEMT.Tables("RESULT").Rows.Count = 0 Then
                            MsgBox("Please Enter Price Elements.")
                            Exit Sub
                        End If

                        gspStr = "sp_insert_QUPRCEMT '" & _
                                cboCoCde.Text & "','" & _
                                IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_qutseq") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_itmno") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_untcde") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_inrqty") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mtrqty") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cft") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cbm") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprctrm") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_prctrm") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_trantrm") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus1no") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus2no") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cat") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_venno") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_ventranflg") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fcurcde") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftycst") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprc") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_curcde") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_basprc") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mu") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mumin") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muprc") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muminprc") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1sp") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1dp") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufamt") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othdisper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvamt") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_spmuper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dpmuper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cumu") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pm") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cush") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_thccusper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_upsper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_labper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_faper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cstbufper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pliper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dmdper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_rbtper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_subttlper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pkgper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_comper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_icmper") & "','" & _
                                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_stdprc") & "','" & _
                                gsUsrID & "'"

                        If gspStr > "" Then  '*** if there is something to do with s ...
                            'rs = objBSGate.Modify(gsConnStr, "sp_general", S)

                            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                            gspStr = ""

                            '' Cursor = Cursors.Default

                            If rtnLong <> RC_SUCCESS Then
                                MsgBox("Error on loading save_Detail sp_insert_QUPRCEMT :" & rtnStr)
                                Exit Sub
                            Else
                                IsUpdated = True
                            End If
                        End If

                        If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
                            dr = rs_QUCPTBKD.Tables("RESULT").Select("qcb_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                            If dr.Length > 0 Then
                                Call save_Component(seq)
                            End If
                        End If

                        If rs_QUASSINF.Tables("RESULT").Rows.Count > 0 Then
                            dr = rs_QUASSINF.Tables("RESULT").Select("qai_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                            If dr.Length > 0 Then
                                Call save_Assortment(seq, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno"))
                            End If
                        End If

                        '*** Phase 2 comment it
                        ''*** For MM Team Target
                        'If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUADDINF.Tables("RESULT").Select("qdi_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_AddInfo(seq)
                        '    End If
                        'End If

                        'If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUCSTEMT.Tables("RESULT").Select("qce_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_CstEmt(seq)
                        '    End If
                        'End If

                        'If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUELCDTL.Tables("RESULT").Select("qed_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_ELCDTL(seq)
                        '    End If
                        'End If

                        'If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUELC.Tables("RESULT").Select("qec_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_ELC(seq)
                        '    End If
                        'End If
                    End If
                ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString = "UPD" And _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString <> "Y" Then
                    '*** Phase 2 comment it
                    'If UBound(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString, " - ")) > 0 Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm").ToString, " - ")(0)
                    'Else
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") = ""
                    'End If

                    'If UBound(Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString, " - ")) > 0 Then
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") = Split(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm").ToString, " - ")(0)
                    'Else
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") = ""
                    'End If

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_update_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmdsc").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alsitmno") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alscolcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_conftr") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_contopc") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pcprc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hstref") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscol") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_coldsc").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckseq") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1sp").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2dp").ToString) & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_onetim") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moflag") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moq").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hrmcde") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dtyrat").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dept") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususd").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscad").ToString) & "','" & _
                        IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1 >= 0, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1, 0)), "") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_subcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venitm") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftycst").ToString) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_note").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_image") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhin") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhin") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhcm") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhcm") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grswgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_netwgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cosmth") & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpprc").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusitm") & "','" & cus1no & "','" & Replace(cus1na, "'", "''") & "','" & cus2no & "','" & Replace(cus2na, "'", "''") & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) = True, "", rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grsmgn").ToString) & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbmsts") & "','" & _
                        Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pdabpdiff") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckitr").ToString, "'", "''") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_stkqty").ToString) & "','" & _
                        Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpunt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") & "','" & _
                        IIf(InStr(cboSmpPrd.Text, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(cboSmpPrd.Text, IIf(InStr(cboSmpPrd.Text, " - ") - 1 >= 0, InStr(cboSmpPrd.Text, " - ") - 1, 0)), "") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmtyp") & "','" & _
                        qutsts & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") & "','" & IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1 >= 0, Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, IIf(InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1 >= 0, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1, 0)), "") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cussub") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusstyno") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_upc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_specpck") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitmno") & "','" & strCustItmCat & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatfml") & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")) & "','" & _
                        IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imrmk").ToString, "'", "''") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_rndsts") & "','" & IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moqunttyp") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1no") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2no") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_effdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_expdat") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotyp") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoreal") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotmp") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoven") & "','" & itmvenno & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imgpth") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususdcur") & "','" & _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscadcur") & "','" & _
                        cboDV.Text.Trim & "','" & _
                        cboTV.Text.Trim & "','" & _
                        cboFA.Text.Trim & "','" & _
                        cboTOFty.Text.Trim & "'," & _
                        IIf(IsNumeric(txtTOOrdQty.Text.Trim), txtTOOrdQty.Text.Trim, "0") & ",'" & _
                        txtTORemark.Text.Trim & "','" & _
                        txtDTLFtyShpDateStr.Text & "','" & _
                        txtDTLFtyShpDateEnd.Text & "','" & _
                        txtDTLCustShpDateStr.Text & "','" & _
                        txtDTLCustShpDateEnd.Text & "','" & _
                         gsUsrID & "'"
                    'gspStr = "sp_update_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmdsc").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alsitmno") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alscolcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_conftr") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_contopc") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pcprc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hstref") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_colcde") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscol") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_coldsc").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckseq") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_untcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrqty").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrqty").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cft").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_curcde") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1sp").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2sp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1dp").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2dp").ToString) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_onetim") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_discnt").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moflag") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoq").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_orgmoa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moq").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moa").ToString) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_hrmcde") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dtyrat").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_dept") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususd").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscad").ToString) & "','" & Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venno").ToString, " - ") - 1) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_subcde") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_venitm") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprc").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftycst").ToString) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_note").ToString, "'", "''") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_image") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhin") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwin") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhin") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_inrhcm") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrdcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrwcm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_mtrhcm") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grswgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_netwgt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cosmth") & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpprc").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusitm") & "','" & cus1no & "','" & Replace(cus1na, "'", "''") & "','" & cus2no & "','" & Replace(cus2na, "'", "''") & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) = True, "", rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prcsec")) & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_grsmgn").ToString) & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_basprc")) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_tbmsts") & "','" & Microsoft.VisualBasic.Left(txtRvsDat.Text, 10) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pdabpdiff") & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pckitr").ToString, "'", "''") & "','" & Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_stkqty").ToString) & "','" & _
                    '    Val(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusqty").ToString) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_smpunt") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_fcurcde") & "','" & Microsoft.VisualBasic.Left(cboSmpPrd.Text, InStr(cboSmpPrd.Text, " - ") - 1) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmtyp") & "','" & _
                    '    qutsts & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_prctrm") & "','" & Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, InStr(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusven").ToString, " - ") - 1) & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cussub") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftyprctrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cusstyno") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cbm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_upc") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_specpck") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_ftytmpitmno") & "','" & strCustItmCat & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatfml") & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_custitmcatamt")) & "','" & _
                    '    IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_pmu")) & "','" & Replace(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imrmk").ToString, "'", "''") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_rndsts") & "','" & IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")), 0, rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_calpmu")) & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_moqunttyp") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus1no") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cus2no") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_trantrm") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_effdat") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_expdat") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotyp") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoreal") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotmp") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoven") & "','" & itmvenno & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_imgpth") & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cususdcur") & "','" & _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_cuscadcur") & "','" & _
                    '    cboDV.Text.Trim & "','" & _
                    '    cboTV.Text.Trim & "','" & _
                    '    cboFA.Text.Trim & "','" & _
                    '    cboTOFty.Text.Trim & "','" & _
                    '    IIf(IsNumeric(txtTOOrdQty.Text.Trim), CInt(txtTOOrdQty.Text.Trim), "0") & "','" & _
                    '    txtTORemark.Text.Trim & "','" & _
                    '    txtDTLFtyShpDateStr.Text & "','" & _
                    '    txtDTLFtyShpDateEnd.Text & "','" & _
                    '    txtDTLCustShpDateStr.Text & "','" & _
                    '    txtDTLCustShpDateEnd.Text & "','" & _
                    '     gsUsrID & "'"

                    If gspStr > "" Then  '*** if there is something to do with s ...
                        'rs = objBSGate.Enquire(gsConnStr, "sp_general", S)

                        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                        'gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading save_Detail sp_update_QUOTNDTL :" & rtnStr)
                            Exit Sub
                        End If

                        '*** Phase 2
                        If rs_QUPRCEMT.Tables("RESULT").Rows.Count > 0 Then
                            dr = rs_QUPRCEMT.Tables("RESULT").Select("qpe_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                            If dr.Length > 0 Then
                                '' Cursor = Cursors.WaitCursor

                                gsCompany = Trim(cboCoCde.Text)
                                Call Update_gs_Value(gsCompany)

                                gspStr = "sp_update_QUPRCEMT '" & _
                                        cboCoCde.Text & "','" & _
                                        IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_qutseq") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_itmno") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_untcde") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_inrqty") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mtrqty") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cft") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cbm") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprctrm") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_prctrm") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_trantrm") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus1no") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus2no") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cat") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_venno") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_ventranflg") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fcurcde") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftycst") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprc") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_curcde") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_basprc") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mu") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mumin") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muprc") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muminprc") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1sp") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1dp") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufamt") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othdisper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvamt") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_spmuper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dpmuper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cumu") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pm") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cush") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_thccusper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_upsper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_labper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_faper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cstbufper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pliper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dmdper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_rbtper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_subttlper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pkgper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_comper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_icmper") & "','" & _
                                        rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_stdprc") & "','" & _
                                        gsUsrID & "'"
                            End If

                            If gspStr > "" Then  '*** if there is something to do with s ...
                                'rs = objBSGate.Modify(gsConnStr, "sp_general", S)

                                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                                gspStr = ""

                                '' Cursor = Cursors.Default

                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading save_Detail sp_update_QUPRCEMT :" & rtnStr)
                                    Exit Sub
                                Else
                                    IsUpdated = True
                                End If
                            End If
                        End If

                        If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
                            dr = rs_QUCPTBKD.Tables("RESULT").Select("qcb_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                            If dr.Length > 0 Then
                                Call save_Component(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"))
                            End If
                        End If

                        If rs_QUASSINF.Tables("RESULT").Rows.Count > 0 Then
                            dr = rs_QUASSINF.Tables("RESULT").Select("qai_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                            If dr.Length > 0 Then
                                Call save_Assortment(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"), rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno"))
                            End If
                        End If

                        '*** Phase 2 comment it
                        ''*** For MM Team Target
                        'If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUADDINF.Tables("RESULT").Select("qdi_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_AddInfo(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"))
                        '    End If
                        'End If

                        'If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUCSTEMT.Tables("RESULT").Select("qce_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_CstEmt(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"))
                        '    End If
                        'End If

                        'If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUELCDTL.Tables("RESULT").Select("qed_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_ELCDTL(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"))
                        '    End If
                        'End If

                        'If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
                        '    dr = rs_QUELC.Tables("RESULT").Select("qec_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString)

                        '    If dr.Length > 0 Then
                        '        Call save_ELC(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq"))
                        '    End If
                        'End If

                        IsUpdated = True
                    End If
                ElseIf rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" And _
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("Del").ToString = "Y" Then
                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_physical_delete_QUOTNDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "'"

                    If gspStr > "" Then  '*** if there is something to do with s ...
                        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                        gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading save_Detail sp_physical_delete_QUOTNDTL :" & rtnStr)
                            Exit Sub
                        Else
                            IsUpdated = True
                        End If
                    End If

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_physical_delete_QUCPTBKD '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "'"

                    If gspStr > "" Then  '*** if there is something to do with s ...
                        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                        gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading save_Detail sp_physical_delete_QUCPTBKD :" & rtnStr)
                            Exit Sub
                        Else
                            IsUpdated = True
                        End If
                    End If

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_physical_delete_QUASSINF '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "'"

                    If gspStr > "" Then  '*** if there is something to do with s ...
                        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                        gspStr = ""

                        '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading save_Detail sp_physical_delete_QUASSINF :" & rtnStr)
                            Exit Sub
                        Else
                            IsUpdated = True
                        End If
                    End If

                    '*** Phase 2 comment it
                    '*** Addition Information
                    'If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
                    '    gsCompany = Trim(cboCoCde.Text)
                    '    Call Update_gs_Value(gsCompany)

                    '    gspStr = "sp_physical_delete_QUADDINF '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "'"

                    '    If gspStr > "" Then  '*** if there is something to do with s ...
                    '        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    '        gspStr = ""
                    '        If rtnLong <> RC_SUCCESS Then
                    '            MsgBox("Error on loading save_Detail sp_physical_delete_QUADDINF :" & rtnStr)
                    '            Exit Sub
                    '        Else
                    '            IsUpdated = True
                    '        End If
                    '    End If
                    'End If

                    ''*** Cost Element
                    'If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
                    '   '' Cursor = Cursors.WaitCursor

                    '    gsCompany = Trim(cboCoCde.Text)
                    '    Call Update_gs_Value(gsCompany)

                    '    gspStr = "sp_physical_delete_QUCSTEMT '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & _
                    '                                rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "','" & _
                    '                                rs_QUCSTEMT.Tables("RESULT").Rows(0)("qce_ceseq").ToString & "'"

                    '    If gspStr > "" Then  '*** if there is something to do with s ...
                    '        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    '        gspStr = ""

                    '       '' Cursor = Cursors.Default

                    '        If rtnLong <> RC_SUCCESS Then
                    '            MsgBox("Error on loading save_Detail sp_physical_delete_QUCSTEMT :" & rtnStr)
                    '            Exit Sub
                    '        Else
                    '            IsUpdated = True
                    '        End If
                    '    End If
                    'End If

                    ''*** ELC
                    'If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
                    '   '' Cursor = Cursors.WaitCursor

                    '    gsCompany = Trim(cboCoCde.Text)
                    '    Call Update_gs_Value(gsCompany)

                    '    gspStr = "sp_physical_delete_QUELC '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & _
                    '                                rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "','" & _
                    '                                rs_QUELC.Tables("RESULT").Rows(0)("qec_grpcde").ToString & "'"

                    '    If gspStr > "" Then  '*** if there is something to do with s ...
                    '        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    '        gspStr = ""

                    '       '' Cursor = Cursors.Default

                    '        If rtnLong <> RC_SUCCESS Then
                    '            MsgBox("Error on loading save_Detail sp_physical_delete_QUELC :" & rtnStr)
                    '            Exit Sub
                    '        Else
                    '            IsUpdated = True
                    '        End If
                    '    End If
                    'End If

                    ''*** ELCDTL
                    'If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
                    '   '' Cursor = Cursors.WaitCursor

                    '    gsCompany = Trim(cboCoCde.Text)
                    '    Call Update_gs_Value(gsCompany)

                    '    gspStr = "sp_physical_delete_QUELCDTL '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & _
                    '                                rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutseq").ToString & "','" & _
                    '                                rs_QUELCDTL.Tables("RESULT").Rows(0)("qed_grpcde").ToString & "','" & _
                    '                                rs_QUELCDTL.Tables("RESULT").Rows(0)("qed_seq").ToString & "'"

                    '    If gspStr > "" Then  '*** if there is something to do with s ...
                    '        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    '        gspStr = ""

                    '       '' Cursor = Cursors.Default

                    '        If rtnLong <> RC_SUCCESS Then
                    '            MsgBox("Error on loading save_Detail sp_physical_delete_QUELCDTL :" & rtnStr)
                    '            Exit Sub
                    '        Else
                    '            IsUpdated = True
                    '        End If
                    '    End If
                    'End If
                End If
            Next
        End If

        no_Display_Detail = False
    End Sub

    Private Sub save_Component(ByVal seq As Integer)
        Dim message As String = ""
        Dim rs As New DataSet

        If rs_QUCPTBKD.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUCPTBKD.Tables("RESULT").Rows.Count - 1

                '*** Delete QUCPTBKD
                If rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode").ToString = "DEL" Or _
                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("DEL").ToString = "Y" Then
                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_physical_delete_QUCPTBKD_itmno '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & _
                                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_itmno").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cptseq").ToString & "'"
                    message = "sp_physical_delete_QUCPTBKD_itmno"

                    '*** Update QUCPTBKD
                ElseIf rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode").ToString = "UPD" And _
                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("DEL").ToString <> "Y" Then

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_update_QUCPTBKD '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_itmno").ToString & "','" & _
                                                CInt(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cptseq")) & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cpt").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_curcde").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cst").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct").ToString & "','" & _
                                                CInt(rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct")) & "','" & _
                                                gsUsrID & "'"
                    message = "sp_update_QUCPTBKD"

                    '*** Add QUCPTBKD
                ElseIf rs_QUCPTBKD.Tables("RESULT").Rows(index)("mode").ToString = "NEW" And _
                    rs_QUCPTBKD.Tables("RESULT").Rows(index)("DEL").ToString <> "Y" Then

                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_insert_QUCPTBKD '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_itmno").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cptseq").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cpt").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_curcde").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cst").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_cstpct").ToString & "','" & _
                                                rs_QUCPTBKD.Tables("RESULT").Rows(index)("qcb_pct").ToString & "','" & _
                                                gsUsrID & "'"
                    message = "sp_insert_QUCPTBKD"
                End If

                If gspStr > "" Then  '*** if there is something to do with s ...
                    'rs = objBSGate.Modify(gsConnStr, "sp_general", S)

                    rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    gspStr = ""

                    '' Cursor = Cursors.Default

                    If rtnLong <> RC_SUCCESS Then
                        MsgBox("Error on loading save_Component " & message & " :" & rtnStr)
                        Exit Sub
                    Else
                        IsUpdated = True
                    End If
                End If
            Next
        End If
    End Sub

    Private Sub save_Assortment(ByVal seq As Integer, ByVal itmno As String)
        Dim message As String = ""
        Dim rs As New DataSet
        Dim drAss() As DataRow

        drAss = rs_QUASSINF.Tables("RESULT").Select("qai_qutseq = '" & seq & "' and qai_itmno = '" & itmno & "'")

        If drAss.Length > 0 Then
            For index As Integer = 0 To drAss.Length - 1

                '*** Delete QUASSINF
                If drAss(index)("mode").ToString = "DEL" Then
                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_physical_delete_QUASSINF_itmno '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & _
                                                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq").ToString & "','" & _
                                                drAss(index)("qai_itmno").ToString & "','" & _
                                                drAss(index)("qai_assitm").ToString & "','" & _
                                                drAss(index)("qai_colcde").ToString & "'"
                    message = "sp_physical_delete_QUASSINF_itmno"

                    '*** Add QUASSINF
                ElseIf drAss(index)("mode").ToString = "NEW" Then
                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_insert_QUASSINF '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
                                                UCase(drAss(index)("qai_itmno").ToString) & "','" & _
                                                UCase(drAss(index)("qai_assitm").ToString) & "','" & _
                                                drAss(index)("qai_assdsc").ToString & "','" & _
                                                drAss(index)("qai_cusitm").ToString & "','" & _
                                                drAss(index)("qai_colcde").ToString & "','" & _
                                                drAss(index)("qai_coldsc").ToString & "','" & _
                                                drAss(index)("qai_alsitmno").ToString & "','" & _
                                                drAss(index)("qai_alscolcde").ToString & "','" & _
                                                drAss(index)("qai_cussku").ToString & "','" & _
                                                drAss(index)("qai_upcean").ToString & "','" & _
                                                drAss(index)("qai_cusrtl").ToString & "','" & _
                                                drAss(index)("qai_untcde").ToString & "','" & _
                                                drAss(index)("qai_inrqty").ToString & "','" & _
                                                drAss(index)("qai_mtrqty").ToString & "','" & _
                                                IIf(Trim(drAss(index)("qai_imperiod").ToString) = "" Or _
                                                    IsDBNull(drAss(index)("qai_imperiod")), _
                                                    "", drAss(index)("qai_imperiod").ToString & "-01") & "','" & _
                                                gsUsrID & "'"
                    message = "sp_insert_QUASSINF"

                    '*** Update QUASSINF
                ElseIf drAss(index)("mode").ToString = "UPD" Then
                    '' Cursor = Cursors.WaitCursor

                    gsCompany = Trim(cboCoCde.Text)
                    Call Update_gs_Value(gsCompany)

                    gspStr = "sp_update_QUASSINF '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & _
                                                drAss(index)("qai_qutseq").ToString & "','" & _
                                                UCase(drAss(index)("qai_itmno").ToString) & "','" & _
                                                UCase(drAss(index)("qai_assitm").ToString) & "','" & _
                                                drAss(index)("qai_assdsc").ToString & "','" & _
                                                drAss(index)("qai_cusitm").ToString & "','" & _
                                                drAss(index)("qai_colcde").ToString & "','" & _
                                                drAss(index)("qai_coldsc").ToString & "','" & _
                                                drAss(index)("qai_cussku").ToString & "','" & _
                                                drAss(index)("qai_upcean").ToString & "','" & _
                                                drAss(index)("qai_cusrtl").ToString & "','" & _
                                                drAss(index)("qai_untcde").ToString & "','" & _
                                                drAss(index)("qai_inrqty").ToString & "','" & _
                                                drAss(index)("qai_mtrqty").ToString & "','" & _
                                                IIf(Trim(drAss(index)("qai_imperiod").ToString) = "" Or _
                                                    IsDBNull(drAss(index)("qai_imperiod")), _
                                                    "", drAss(index)("qai_imperiod").ToString & "-01") & "','" & _
                                                gsUsrID & "'"
                    message = "sp_update_QUASSINF"
                End If

                If gspStr > "" Then  '*** if there is something to do with s ...
                    rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
                    gspStr = ""

                    '' Cursor = Cursors.Default

                    If rtnLong <> RC_SUCCESS Then
                        MsgBox("Error on loading save_Assortment " & message & " :" & rtnStr)
                        Exit Sub
                    Else
                        IsUpdated = True
                    End If
                End If
            Next
        End If
    End Sub

    Private Sub Cal_DTL_Price()
        '***************For Cal Sample Price****************************
        '*** Conversion Factor
        gspStr = "sp_select_CUBASINF_Q '" & cboCoCde.Text & "','" & cboUM.Text & "','Conversion'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYCONFTR, rtnStr)
        gspStr = ""
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading Cal_DTL_Price sp_select_CUBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
            txtSmpUnt.Text = cboUM.Text
            If txtCus1Dp.Text = "" Then
                txtSmpPrc.Text = ""
            Else
                txtSmpPrc.Text = Format(Val(txtCus1Dp.Text), "###,###,##0.0000")
            End If
        Else
            txtSmpUnt.Text = "PC"
            If txtCus1Dp.Text = "" Then
                txtSmpPrc.Text = ""
            Else
                If InStr(txtCus1Dp.Text, ".") > 0 And txtCus1Dp.Text <> "." Then
                    If Len(Microsoft.VisualBasic.Right(txtCus1Dp.Text, Len(txtCus1Dp.Text) - InStr(txtCus1Dp.Text, "."))) = 4 Then
                        If Microsoft.VisualBasic.Right(txtCus1Dp.Text, 2) = "00" Then
                            If isABUAssortment(txtItmNo.Text) = False Then
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                            Else
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                            End If
                        Else
                            If isABUAssortment(txtItmNo.Text) = False Then
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                            Else
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                            End If
                        End If
                    ElseIf Len(Microsoft.VisualBasic.Right(txtCus1Dp.Text, Len(txtCus1Dp.Text) - InStr(txtCus1Dp.Text, "."))) = 3 Then
                        If Microsoft.VisualBasic.Right(txtCus1Dp.Text, 1) = "0" Then
                            If isABUAssortment(txtItmNo.Text) = False Then
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                            Else
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                            End If
                        Else
                            If isABUAssortment(txtItmNo.Text) = False Then
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                            Else
                                'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                                txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                            End If
                        End If
                    Else
                        If isABUAssortment(txtItmNo.Text) = False Then
                            'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                            txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                        Else
                            'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                            txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                        End If
                    End If
                Else
                    If txtCus1Dp.Text = "." Then
                        txtSmpPrc.Text = 0
                    Else
                        If isABUAssortment(txtItmNo.Text) = False Then
                            'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")), "###,###,##0.0000")
                            txtSmpPrc.Text = Format(round(txtCus1Dp.Text / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), txtInvRndP.Text), "###,###,##0.0000")
                        Else
                            'txtSmpPrc.Text = Format(round2(txtCus1Dp.Text / txtUMFtr.Text), "###,###,##0.0000")
                            txtSmpPrc.Text = Format(round(txtCus1Dp.Text / get_umftr(), txtInvRndP.Text), "###,###,##0.0000")
                        End If
                    End If
                End If
            End If
        End If

        '***************For Cal Cust2 discount Price********************
        If txtCus2Sp.Text <> "" And cboCus2No.Text <> "" Then
            If optGM.Checked = True Then
                If chkPC.Checked = True Then
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) / (1 - Val(txtGrsMgn.Text) / 100)) *get_umftr(), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text) *get_umftr(), "###,###,##0.0000")
                Else
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If
            Else
                If chkPC.Checked = True Then
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) * (1 + Val(txtGrsMgn.Text) / 100)) *get_umftr(), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtPCPrc.Text = "", 0, txtPCPrc.Text)) * (1 + Val(txtGrsMgn.Text) / 100), txtInvRndP.Text) *get_umftr(), "###,###,##0.0000")
                Else
                    'txtCus2Dp.Text = Format(round2(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(txtGrsMgn.Text) / 100)), "###,###,##0.0000")
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If
            End If
        End If
        '***************************************************************
    End Sub

    Private Function GetCtrlValue(ByVal Ctrl As Control) As String
        If TypeOf Ctrl Is ComboBox Then
            If Ctrl.Text <> "" Then
                If UBound(Split(Ctrl.Text, " - ")) > 0 Then
                    GetCtrlValue = Split(Ctrl.Text, " - ")(0)
                Else
                    GetCtrlValue = Ctrl.Text
                End If
            Else
                GetCtrlValue = ""
            End If
        Else
            GetCtrlValue = ""
        End If
    End Function

    Private Sub returnSelectedRecordsHandler(ByVal sender As Object, _
                                            ByVal returnedRecords As DataSet, _
                                            ByVal returnedMode As String)
        If returnedMode = "UPD" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = returnedMode
        End If

        rs_QUASSINF = returnedRecords.Copy
    End Sub

    Private Sub returnSelectedRecordsHandler_Browse(ByVal sender As Object)
        If Len(gsSearchKey) > 0 And txtItmNo.Enabled = True Then
            txtItmNo.Text = gsSearchKey
            txtItmNo.Refresh()
            txtItmNo_Press()
        End If
    End Sub

    Public Sub copyQuotation()
        copy_flag = True

        Dim flgConAllToPC As Boolean

        If chkPC_hdr.Checked = True Then
            flgConAllToPC = True
        Else
            flgConAllToPC = False
        End If

        If copyQutCoCde <> cboCoCde.Text Then
            cboCoCde.Text = copyQutCoCde
            Call cboCoCdeClick()
        End If

        rs_QUOTNDTL.Tables.Clear()
        rs_QUCPTBKD.Tables.Clear()
        '*** Phase 2
        rs_QUPRCEMT.Tables.Clear()

        rs_QUASSINF.Tables.Clear()
        '*** Phase 2 comment it
        'rs_QUCSTEMT.Tables.Clear()
        'rs_QUADDINF.Tables.Clear()
        'rs_QUELC.Tables.Clear()
        'rs_QUELCDTL.Tables.Clear()

        Call cmdClearClick()

        Call cmdAddClick()

        cboCus1No.Text = copyQutCus1noFull
        Call cboCus1NoClick()

        cboCus2No.Text = copyQutCus2noFull
        Call cboCus2NoClick()

        rs_QUOTNDTL = rs_QUOTNDTL_Copy.Copy
        rs_QUCPTBKD = rs_QUCPTBKD_Copy.Copy
        rs_QUASSINF = rs_QUASSINF_Copy.Copy
        rs_QUCSTEMT = rs_QUCSTEMT_Copy.Copy
        rs_QUADDINF = rs_QUADDINF_Copy.Copy
        rs_QUELC = rs_QUELC_Copy.Copy
        rs_QUELCDTL = rs_QUELCDTL_Copy.Copy

        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 1 Then
                cmdNextD.Enabled = True
                QuotCopyFlag = True
            End If
        End If

        sReadingIndexQ = 0
        no_Display_Detail = False
        'Call Display_Detail()
        no_Display_Detail = True

        If rs_QUOTNDTL.Tables.Count > 0 Then
            If rs_QUOTNDTL.Tables("RESULT").Rows.Count  > sReadingIndexQ Then
                '*** Phase 2 comment it
                'Call cboCustItmCatPress()

                If IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd")) > 0 Then
                    txtCusUsd.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd"), "###,###,##0.0000")
                Else
                    txtCusUsd.Text = ""
                End If

                If IIf(IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad")) = True, 0, rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad")) > 0 Then
                    txtCusCad.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad"), "###,###,##0.0000")
                Else
                    txtCusCad.Text = ""
                End If

                '*** Phase 2 comment it
                'Call CalculatePMU(txtCusUsd)
            End If
        End If

        If flgConAllToPC = True Then
            chkPC_hdr.Checked = True
        Else
            chkPC_hdr.Checked = False
        End If

        flgConAllToPC = False

        If rs_QUCPTBKD.Tables.Count > 0 Then
            sFilter = "qcb_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode = 'NEW'"
            rs_QUCPTBKD.Tables("RESULT").DefaultView.RowFilter = sFilter
            dgMatBkd.DataSource = rs_QUCPTBKD.Tables("RESULT").DefaultView
            Call Display_Component()
        End If

        If rs_QUASSINF.Tables.Count > 0 Then
            sFilter = "qai_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode <> 'DEL'"
            rs_QUASSINF.Tables("RESULT").DefaultView.RowFilter = sFilter

            If rs_QUASSINF.Tables("RESULT").DefaultView.Count = 0 Then
                cmdAss.Enabled = False
            Else
                cmdAss.Enabled = True
            End If
        Else
            cmdAss.Enabled = False
        End If

        '*** Phase 2 comment it
        'If rs_QUCSTEMT.Tables.Count > 0 Then
        '    sFilter = "qce_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode <> 'DEL'"
        '    rs_QUCSTEMT.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        'If rs_QUADDINF.Tables.Count > 0 Then
        '    sFilter = "qdi_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode <> 'DEL' and yqa_display <> 'N'"
        '    rs_QUADDINF.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        'If rs_QUELC.Tables.Count > 0 Then
        '    sFilter = "qec_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode <> 'DEL'"
        '    rs_QUELC.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If

        'If rs_QUELCDTL.Tables.Count > 0 Then
        '    sFilter = "qed_qutseq = " & rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutseq") & " and mode <> 'DEL'"
        '    rs_QUELCDTL.Tables("RESULT").DefaultView.RowFilter = sFilter
        'End If
    End Sub

    '*** Phase 2
    'Private Sub rbItmNorbItmNoTmprbItmNoVen_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbItmNo.CheckedChanged, rbItmNoTmp.CheckedChanged, rbItmNoVen.CheckedChanged
    '    If Insert_flag = True Then
    '        If rbItmNo.Checked Then
    '            txtItmNo.Enabled = True
    '            txtItmNoTmp.Enabled = False
    '            txtItmNoVen.Enabled = False
    '            cboItmNoVen.Enabled = False
    '            txtColCde.Visible = False
    '            txtColCde.Text = ""
    '            txtPcking.Visible = False
    '            txtPcking.Text = ""
    '        ElseIf txtItmNoTmp.Text <> "" Then
    '            txtItmNo.Enabled = False
    '            txtItmNoTmp.Enabled = True
    '            txtItmNoVen.Enabled = False
    '            cboItmNoVen.Enabled = False
    '            txtColCde.Visible = False
    '            txtColCde.Text = ""
    '            txtPcking.Visible = False
    '            txtPcking.Text = ""
    '        Else
    '            txtItmNo.Enabled = False
    '            txtItmNoTmp.Enabled = False
    '            txtItmNoVen.Enabled = True
    '            txtColCde.Visible = True
    '            txtColCde.Enabled = False
    '            txtColCde.Text = ""
    '            txtPcking.Visible = True
    '            txtPcking.Enabled = False
    '            txtPcking.Text = ""
    '        End If
    '    End If
    'End Sub





    Private Sub Insert_rs_QUPRCEMT()
        Dim insertIt As Boolean = True

        For index As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Rows.Count - 1
            If rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_qutseq").ToString.Trim = txtSeq.Text.Trim Then
                insertIt = False
                Exit For
            End If
        Next

        If sReadingIndexQ > rs_QUPRCEMT.Tables("RESULT").Rows.Count - 1 Then
            insertIt = True
        End If

        If insertIt Then
            drNewRow = rs_QUPRCEMT.Tables("RESULT").NewRow
            drNewRow("qpe_qutseq") = IIf(IsNumeric(txtSeq.Text.Trim), txtSeq.Text.Trim, 0)
            drNewRow("qpe_itmno") = txtItmNo.Text.Trim
            drNewRow("qpe_untcde") = cboUM.Text.Trim

            If txtInrQty.Text.Trim = "" Then
                txtInrQty.Text = "0"
            End If
            drNewRow("qpe_inrqty") = txtInrQty.Text.Trim

            If txtMtrQty.Text.Trim = "" Then
                txtMtrQty.Text = "0"
            End If
            drNewRow("qpe_mtrqty") = txtMtrQty.Text.Trim

            If txtCft.Text.Trim = "" Then
                txtCft.Text = "0"
            End If
            drNewRow("qpe_cft") = txtCft.Text.Trim

            If txtCBM.Text.Trim = "" Then
                txtCBM.Text = "0"
            End If
            drNewRow("qpe_cbm") = txtCBM.Text.Trim
            drNewRow("qpe_ftyprctrm") = cboFtyPrcTrm.Text.Trim
            drNewRow("qpe_prctrm") = cboDtlPrcTrm.Text.Trim
            drNewRow("qpe_trantrm") = cboTranTrm.Text.Trim
            drNewRow("qpe_fml_cus1no") = Split(txtCus1NoP.Text.Trim, "-")(0).Trim
            drNewRow("qpe_fml_cus2no") = Split(txtCus2NoP.Text.Trim, "-")(0).Trim
            drNewRow("qpe_fml_prctrm") = txtPrcTrmP.Text.Trim
            drNewRow("qpe_fml_trantrm") = txtTranTrmP.Text.Trim

            drNewRow("qpe_fml_cat") = txtItmCatP.Text.Trim
            drNewRow("qpe_fml_venno") = txtVenTypP.Text.Trim
            '0627
            ''drNewRow("qpe_PV") = txtVenNoP.Text.Trim

            drNewRow("qpe_fml_ventranflg") = txtVenTranP.Text.Trim
            drNewRow("qpe_fcurcde") = txtFtyCstCurrP.Text.Trim
            drNewRow("qpe_ftycst") = IIf(IsNumeric(txtFtyCstP.Text.Trim), txtFtyCstP.Text.Trim, "0")
            drNewRow("qpe_ftyprc") = IIf(IsNumeric(txtFtyPrcP.Text.Trim), txtFtyPrcP.Text.Trim, "0")
            drNewRow("qpe_curcde") = txtCurCde2P.Text.Trim
            drNewRow("qpe_basprc") = IIf(IsNumeric(txtBasPrcP.Text.Trim), txtBasPrcP.Text.Trim, "0")
            drNewRow("qpe_mu") = txtMUP.Text.Trim
            drNewRow("qpe_mumin") = Split(lblMUMinP.Text.Trim, " ")(1).Substring(0, Split(lblMUMinP.Text.Trim, " ")(1).Length - 2)

            If txtMinMUPriceP.Text = "" Then
                txtMinMUPriceP.Text = "0"
            End If
            drNewRow("qpe_muminprc") = txtMinMUPriceP.Text.Trim

            If txtMUPriceP.Text.Trim = "" Then
                txtMUPriceP.Text = "0"
            End If

            drNewRow("qpe_muprc") = txtMUPriceP.Text.Trim
            drNewRow("qpe_cus1sp") = IIf(IsNumeric(txtCus1SpP.Text.Trim), txtCus1SpP.Text.Trim, "0")
            drNewRow("qpe_cus1dp") = IIf(IsNumeric(txtCus1DpP.Text.Trim), txtCus1DpP.Text.Trim, "0")
            drNewRow("qpe_cushcstbufper") = txtCushCostBufPercP.Text.Trim
            drNewRow("qpe_cushcstbufamt") = txtCushCostBufAmtP.Text.Trim
            drNewRow("qpe_othdisper") = txtOtherDisLmtPercP.Text.Trim
            drNewRow("qpe_maxapvper") = txtMaxApprovePercP.Text.Trim
            drNewRow("qpe_maxapvamt") = txtMaxApproveAmtP.Text.Trim
            drNewRow("qpe_spmuper") = txtStdPrcMUPercP.Text.Trim
            drNewRow("qpe_dpmuper") = txtAdjPrcMUPercP.Text.Trim
            drNewRow("qpe_cumu") = txtCustMUPercChgP.Text.Trim
            drNewRow("qpe_pm") = txtProMarPercChgP.Text.Trim
            drNewRow("qpe_cush") = txtCushPercChgP.Text.Trim
            drNewRow("qpe_thccusper") = txtTHCCustPercChgP.Text.Trim
            drNewRow("qpe_upsper") = txtUPSPercChgP.Text.Trim
            drNewRow("qpe_labper") = txtLabPercChgP.Text.Trim
            drNewRow("qpe_faper") = txtFAPercChgP.Text.Trim
            drNewRow("qpe_cstbufper") = txtCostBufPercChgP.Text.Trim
            drNewRow("qpe_othper") = txtOthersPercChgP.Text.Trim
            drNewRow("qpe_pliper") = txtPLIPercChgP.Text.Trim
            drNewRow("qpe_dmdper") = txtDefMDPercChgP.Text.Trim
            drNewRow("qpe_rbtper") = txtRebatePercChgP.Text.Trim
            drNewRow("qpe_subttlper") = txtSubTtlPercChgP.Text.Trim

            If txtPckCst1P.Text.Trim = "" Then
                txtPckCst1P.Text = "0"
            End If
            drNewRow("qpe_pkgper") = txtPckCst1P.Text.Trim

            drNewRow("qpe_comper") = txtComm1P.Text.Trim

            If txtItmComm1P.Text.Trim = "" Then
                txtItmComm1P.Text = "0"
            End If

            drNewRow("qpe_icmper") = txtItmComm1P.Text.Trim
            drNewRow("qpe_stdprc") = txtStdPrcP.Text.Trim
            rs_QUPRCEMT.Tables("RESULT").Rows.Add(drNewRow)
        End If
    End Sub

    Private Sub Update_rs_QUPRCEMT()
        For index As Integer = 0 To rs_QUPRCEMT.Tables("RESULT").Rows.Count - 1
            If rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_qutseq").ToString.Trim = txtSeq.Text.Trim Then
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_itmno") = txtItmNo.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_untcde") = cboUM.Text.Trim

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_inrqty") = IIf(IsNumeric(txtInrQty.Text.Trim), txtInrQty.Text.Trim, "0")

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mtrqty") = IIf(IsNumeric(txtMtrQty.Text.Trim), txtMtrQty.Text.Trim, "0")

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cft") = IIf(IsNumeric(txtCft.Text.Trim), txtCft.Text.Trim, "0")

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cbm") = IIf(IsNumeric(txtCBM.Text.Trim), txtCBM.Text.Trim, "0")

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprctrm") = cboFtyPrcTrm.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_prctrm") = cboDtlPrcTrm.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_trantrm") = cboTranTrm.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus1no") = Split(txtCus1NoP.Text.Trim, "-")(0).Trim
                '0627
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cus2no") = Split(txtCus2NoP.Text.Trim, "-")(0).Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_prctrm") = txtPrcTrmP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_trantrm") = txtTranTrmP.Text.Trim

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_cat") = txtItmCatP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fml_venno") = txtVenTypP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_fcurcde") = txtFtyCstCurrP.Text.Trim


                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftycst") = IIf(IsNumeric(txtFtyCstP.Text.Trim), txtFtyCstP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_ftyprc") = IIf(IsNumeric(txtFtyPrcP.Text.Trim), txtFtyPrcP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_curcde") = txtCurCde2P.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_basprc") = IIf(IsNumeric(txtBasPrcP.Text.Trim), txtBasPrcP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mu") = txtMUP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_mumin") = Split(lblMUMinP.Text.Trim, " ")(1).Substring(0, Split(lblMUMinP.Text.Trim, " ")(1).Length - 2)
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muminprc") = IIf(IsNumeric(txtMinMUPriceP.Text.Trim), txtMinMUPriceP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_muprc") = IIf(IsNumeric(txtMUPriceP.Text.Trim), txtMUPriceP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1sp") = IIf(IsNumeric(txtCus1SpP.Text.Trim), txtCus1SpP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cus1dp") = IIf(IsNumeric(txtCus1DpP.Text.Trim), txtCus1DpP.Text.Trim, "0")
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufper") = txtCushCostBufPercP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cushcstbufamt") = txtCushCostBufAmtP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othdisper") = txtOtherDisLmtPercP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvper") = txtMaxApprovePercP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_maxapvamt") = txtMaxApproveAmtP.Text.Trim

                If IsNumeric(txtStdPrcMUPercP.Text.Trim) Then
                    rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_spmuper") = txtStdPrcMUPercP.Text.Trim
                End If

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dpmuper") = txtAdjPrcMUPercP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cumu") = txtCustMUPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pm") = txtProMarPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cush") = txtCushPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_thccusper") = txtTHCCustPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_upsper") = txtUPSPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_labper") = txtLabPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_faper") = txtFAPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_cstbufper") = txtCostBufPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_othper") = txtOthersPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pliper") = txtPLIPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_dmdper") = txtDefMDPercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_rbtper") = txtRebatePercChgP.Text.Trim
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_subttlper") = txtSubTtlPercChgP.Text.Trim

                If IsNumeric(txtPckCst1P.Text.Trim) Then
                    rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_pkgper") = txtPckCst1P.Text.Trim
                End If

                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_comper") = txtComm1P.Text.Trim


                If IsNumeric(txtItmComm1P.Text.Trim) Then
                    rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_icmper") = txtItmComm1P.Text.Trim
                End If
                rs_QUPRCEMT.Tables("RESULT").Rows(index)("qpe_stdprc") = txtStdPrcP.Text.Trim
                Exit For
            End If
        Next
    End Sub











    Private Sub cmdItmNoConv_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdItmNoConv.Click
        bIsShowPanels = True

        If txtItmNoTmp.Text <> "" Then
            If txtItmNoTmp.Text <> "" Then
               '' Cursor = Cursors.WaitCursor

                Dim cus1no As String
                Dim cus2no As String

                If Trim(cboCus1No.Text) = "" Then
                    cus1no = ""
                Else
                    cus1no = Trim(Split(cboCus1No.Text, "-")(0))
                End If

                If Trim(cboCus2No.Text) = "" Then
                    cus2no = ""
                Else
                    cus2no = Trim(Split(cboCus2No.Text, "-")(0))
                End If

                gspStr = "sp_select_IMTMPREL_Q '','" & txtItmNoTmp.Text.Trim & "','" & cus1no & "','" & cus2no & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
                gspStr = ""

               '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading cmdItmNoConv_Click sp_select_IMTMPREL :" & rtnStr)
                    Exit Sub
                End If

                For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
                    rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                Dim rs_IMTMPINF As New DataSet

                rs_IMTMPINF.Tables.Clear()

                If rs_IMTMPREL.Tables("RESULT").Rows.Count > 0 Then
                    For index As Integer = 1 To rs_IMTMPREL.Tables("RESULT").Rows.Count
                        rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("ID") = index

                        gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("itr_itmno").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_pckunt").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_inrqty").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_mtrqty").ToString.Trim & "','" & _
                                                                cus1no & "','" & cus2no & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_ftyprctrm").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_hkprctrm").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_trantrm").ToString.Trim & "','" & _
                                                                gsUsrID & "'"
                        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPINF, rtnStr)
                        gspStr = ""

                       '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading cmdItmNoConv_Click sp_select_QUOTNDTL_Vendor :" & rtnStr)
                            Exit Sub
                        End If

                        If rs_IMTMPINF.Tables("RESULT").Rows.Count = 0 Then
                            rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv") = "N"
                            rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Reason") = "No valid pricing"
                        End If
                    Next

                    dgPanItmNoConv.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView
                    txtPanItmNoConvFrm.Text = "1"
                    txtPanItmNoConvTo.Text = rs_IMTMPREL.Tables("RESULT").DefaultView.Count
                    Call ShowGrdIMTMP()
                    PanelItmNoConv.Visible = True
                    PanelItmNoConv.BringToFront()
                Else
                    rs_IMTMPREL.Tables.Clear()
                    MsgBox("No record found")
                End If
            End If
        ElseIf txtItmNoVen.Text <> "" Then

        End If
    End Sub

    Private Sub ShowGrdIMTMP()
        If txtItmNoTmp.Text <> "" Then
            With dgPanItmNoConv
                If rs_IMTMPREL.Tables("RESULT").Rows.Count > 0 Then
                    Dim i, j As Integer

                    For i = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
                        .Columns(i).ReadOnly = True
                        .Columns(i).Visible = False
                        .Columns(i).SortMode = DataGridViewColumnSortMode.NotSortable
                    Next

                    j = 0
                    .Columns(j).Width = 65
                    .Columns(j).HeaderText = "Convert?"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 30
                    .Columns(j).HeaderText = "ID"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 100
                    .Columns(j).HeaderText = "Item No."
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 90
                    .Columns(j).HeaderText = "Color"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 250
                    .Columns(j).HeaderText = "Packing & Terms"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 120
                    .Columns(j).HeaderText = "Reason"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True
                End If
            End With
        ElseIf txtItmNoVen.Text <> "" Then

        End If
    End Sub
    Private Sub ShowGrdIMTMP_S()
        If txtItmNoTmp.Text <> "" Or cboItmNoVen.text.Trim <> "" Then
            With dgPanItmNoSelect
                If rs_IMTMPREL.Tables("RESULT").Rows.Count > 0 Then
                    Dim i, j As Integer

                    For i = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
                        .Columns(i).ReadOnly = True
                        .Columns(i).Visible = False
                        .Columns(i).SortMode = DataGridViewColumnSortMode.NotSortable
                    Next

                    j = 0
                    .Columns(j).Width = 200
                    .Columns(j).HeaderText = "Select One Real Item"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 30
                    .Columns(j).HeaderText = "ID"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 100
                    .Columns(j).HeaderText = "Item No."
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 90
                    .Columns(j).HeaderText = "Color"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 10
                    .Columns(j).Visible = False

                    j = j + 1
                    .Columns(j).Width = 250
                    .Columns(j).HeaderText = "Packing & Terms"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True

                    j = j + 1
                    .Columns(j).Width = 120
                    .Columns(j).HeaderText = "Reason"
                    .Columns(j).ReadOnly = True
                    .Columns(j).Visible = True
                End If
            End With
        ElseIf txtItmNoVen.Text <> "" Then

        End If
    End Sub


    Private Sub txtPanItmNoConvFrm_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPanItmNoConvFrm.KeyPress
        If e.KeyChar = Chr(8) Then Exit Sub
        If e.KeyChar >= Chr(48) And e.KeyChar <= Chr(57) Then Exit Sub
        e.KeyChar = Chr(0)
    End Sub

    Private Sub txtPanItmNoConvTo_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPanItmNoConvTo.KeyPress
        If e.KeyChar = Chr(8) Then Exit Sub
        If e.KeyChar >= Chr(48) And e.KeyChar <= Chr(57) Then Exit Sub
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmdPanItmNoConvApply_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanItmNoConvApply.Click
        Dim intFm As Long
        Dim intTo As Long

        If txtItmNoTmp.Text <> "" Then
            If rs_IMTMPREL.Tables.Count = 0 Then Exit Sub
            If rs_IMTMPREL.Tables("RESULT").DefaultView.Count <= 0 Then Exit Sub

            If Val(txtPanItmNoConvFrm.Text) = "0" Then
                MsgBox("The apply range cannot be 0")
                txtPanItmNoConvFrm.SelectAll()
                Exit Sub
            End If

            If Val(txtPanItmNoConvTo.Text) > rs_IMTMPREL.Tables("RESULT").DefaultView.Count Then
                MsgBox("The apply range cannot larger than the total number of records.")
                txtPanItmNoConvTo.SelectAll()
                Exit Sub
            End If

            If Val(txtPanItmNoConvFrm.Text) > Val(txtPanItmNoConvTo.Text) Then
                MsgBox("The apply range is invalid.")
                txtPanItmNoConvFrm.SelectAll()
                Exit Sub
            End If

            intFm = CLng(txtPanItmNoConvFrm.Text)
            intTo = CLng(txtPanItmNoConvTo.Text)

            If intTo > rs_IMTMPREL.Tables("RESULT").DefaultView.Count Then
                intTo = rs_IMTMPREL.Tables("RESULT").DefaultView.Count
            End If

            For index As Integer = intFm To intTo
                If rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv").ToString.Trim <> "N" Then
                    rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv") = "Y"
                End If
            Next
            rs_IMTMPREL.Tables("RESULT").AcceptChanges()
        ElseIf txtItmNoVen.Text <> "" Then

        End If
    End Sub

    Private Sub cmdPanItmNoConvClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanItmNoConvClear.Click
        If txtItmNoTmp.Text <> "" Then
            For index As Integer = 1 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count
                If rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv").ToString.Trim <> "N" Then
                    rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv") = ""
                End If
            Next
            rs_IMTMPREL.Tables("RESULT").AcceptChanges()
        ElseIf txtItmNoVen.Text <> "" Then

        End If
    End Sub

    Private Sub dgPanItmNoConv_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgPanItmNoConv.CellClick
        If e.RowIndex >= 0 And e.ColumnIndex = 0 Then
            If rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv").ToString.Trim <> "Y" Then
                rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv") = "Y"
            Else
                rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv") = "N"
            End If
            rs_IMTMPREL.Tables("RESULT").AcceptChanges()
        End If

        Dim Y_count As Integer
        Y_count = 0

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count - 1
            If rs_IMTMPREL.Tables("RESULT").DefaultView(i)("Conv") = "Y" Then
                Y_count = Y_count + 1
            End If
        Next

        If Y_count <> 1 Then
            MsgBox("Please select one item to convert only!")
            cmdPanItmNoConvOk.Enabled = False
        Else
            cmdPanItmNoConvOk.Enabled = True
        End If

    End Sub



    Private Sub dgPanItmNoSelect_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgPanItmNoSelect.CellClick
        Dim counter_i As Integer
        Dim i As Integer
        counter_i = 0

        If rs_IMTMPREL.Tables("RESULT").Rows.Count > 0 Then
            If e.RowIndex >= 0 And e.ColumnIndex = 0 Then

                If rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv").ToString.Trim <> "Y" Then
                    rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv") = "Y"
                Else
                    rs_IMTMPREL.Tables("RESULT").DefaultView(e.RowIndex)("Conv") = "N"
                End If
                rs_IMTMPREL.Tables("RESULT").AcceptChanges()

            End If
        End If



        For i = 0 To rs_IMTMPREL.Tables("RESULT").Rows.Count - 1
            If rs_IMTMPREL.Tables("RESULT").DefaultView(i)("Conv").ToString.Trim = "Y" Then
                counter_i = counter_i + 1
            End If
        Next

        If counter_i <> 1 Then
            MsgBox("Please select one item number only.")
            cmdPanelItmNoSelectOk.Enabled = False
        Else
            cmdPanelItmNoSelectOk.Enabled = True
        End If

    End Sub

    Private Sub cmdPanItmNoConvOk_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanItmNoConvOk.Click
        Dim isConvert As Boolean = False

        If txtItmNoTmp.Text.Trim <> "" Or txtItmNoVen.Text.Trim <> "" Then
            For index As Integer = 0 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count - 1
                If rs_IMTMPREL.Tables("RESULT").DefaultView(index)("Conv").ToString = "Y" Then
                    isConvert = True
                    Exit For
                End If
            Next

            If isConvert = True Then

                For index As Integer = 0 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count - 1
                    If rs_IMTMPREL.Tables("RESULT").DefaultView(index)("Conv").ToString = "Y" Then
                        'set the item number
                        txtItmNoReal.Text = rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_itmno").ToString.ToUpper.Trim
                        txtItmNo.Text = txtItmNoReal.Text
                        '                        Call fillcboCusVen(txtItmNo.Text)
                        '                        Call fillcboDV(txtItmNo.Text)
                        '                        Call fillcboTV(txtItmNo.Text)
                        '                        Call fillcboFA(txtItmNo.Text)
                        '                       Call fillcboItmNoVen(txtItmNo.Text)

                        Call txtItmNo_Press()
                        If not_exist_ITEM() = True Then
                        
                            txtItmNoReal.Text = ""
                            txtItmNoVen.Enabled = True

                            cmdPanItmNoConvQuit.PerformClick()

                            Exit Sub
                        End If

                        Call display_combo(rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_color").ToString.ToUpper.Trim, cboColCde)
                        Call cboColCdeClick()
                        Call display_combo(rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_pck").ToString.ToUpper, cboPcking)
                        Call cboPckingClick()
                    End If
                Next
            End If
            cmdPanItmNoConvQuit.PerformClick()
        ElseIf txtItmNoVen.Text <> "" Then

        End If

        bIsShowPanels = False
        PanelItmNoConv.SendToBack()
        PanelItmNoConv.Visible = False
        rs_IMTMPREL.Tables.Clear()
        'rs_IMVENREL.Tables.Clear()
    End Sub

    Private Sub cmdPanelItmNoSelectOk_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanelItmNoSelectOk.Click
        Dim isSelect As Boolean = False

        For index As Integer = 0 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count - 1
            If rs_IMTMPREL.Tables("RESULT").DefaultView(index)("Conv").ToString = "Y" Then
                isSelect = True
                Exit For
            End If
        Next

        If isSelect = True Then

            For index As Integer = 0 To rs_IMTMPREL.Tables("RESULT").DefaultView.Count - 1
                If rs_IMTMPREL.Tables("RESULT").DefaultView(index)("Conv").ToString = "Y" Then
                    'set the item number
                    Dim tmp_color As String
                    Dim tmp_pack As String

                    tmp_color = rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_color").ToString.ToUpper.Trim
                    tmp_pack = rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_pck").ToString.ToUpper

         
                    If not_exist_ITEM() = True Then
                        MsgBox("Item cannot be quoted because :" + Chr(13) + Chr(10) + _
                        " - Item not found" + Chr(13) + Chr(10) + _
                        " - It is a BOM Item" + Chr(13) + Chr(10) + _
                        " - It is a Discontinued / Inactive / Old Item / To be confirmed Item" + Chr(13) + Chr(10) + _
                        " - It is held by the system" + Chr(13) + Chr(10) + _
                        " - Vendor is not available", vbExclamation, "Warning fu")

                        PanelItmNoSelect.Visible = False
                        PanelItmNoSelect.SendToBack()

       
                        Exit Sub
                    End If

                    txtItmNoReal.Text = rs_IMTMPREL.Tables("RESULT").DefaultView(index)("itr_itmno").ToString.ToUpper.Trim
                    txtItmNo.Text = txtItmNoReal.Text

                    Call txtItmNo_Press()

                    Call display_combo(tmp_color, cboColCde)
                    Call cboColCdeClick()

                    '20130807  dulplicate display, itr_pck no cbm filed!
                    'Call display_combo(tmp_pack, cboPcking)
                    'Call cboPckingClick()

                End If
            Next
        End If
        '            cmdPanItmNoConvQuit.PerformClick()



        bIsShowPanels = False


        PanelItmNoSelect.SendToBack()
        PanelItmNoSelect.Visible = False

        rs_IMTMPREL.Tables.Clear()
        'rs_IMVENREL.Tables.Clear()
    End Sub





    Private Sub cmdPanItmNoConvQuit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPanItmNoConvQuit.Click
        bIsShowPanels = False
        PanelItmNoConv.SendToBack()
        PanelItmNoConv.Visible = False
        rs_IMTMPREL.Tables.Clear()
        'rs_IMVENREL.Tables.Clear()
    End Sub


    Private Sub txtColCde_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtColCde.KeyPress
        If e.KeyChar.Equals(Chr(13)) Then
            txtColCde.Text = UCase(Trim(txtColCde.Text))
        End If

        If e.KeyChar.Equals(Chr(13)) And txtColCde.Text <> "" Then
            gbPacking.Enabled = True
            cboUM.Enabled = True
            txtInrQty.Enabled = True
            txtMtrQty.Enabled = True
            txtCft.Enabled = True
            txtCBM.Enabled = True
            cboFtyPrcTrm.Enabled = True
            cboDtlPrcTrm.Enabled = True
            cboTranTrm.Enabled = True
            cboUM.Visible = True
            txtInrQty.Visible = True
            txtMtrQty.Visible = True
            txtCft.Visible = True
            txtCBM.Visible = True
            cboFtyPrcTrm.Visible = True
            cboDtlPrcTrm.Visible = True
            cboTranTrm.Visible = True

            lblUM.Visible = True
            lblInrQty.Visible = True
            lblMtrQty.Visible = True
            lblCft.Visible = True
            lblCBM.Visible = True
            lblFtyPrcTrm.Visible = True
            lblDtlPrcTrm.Visible = True
            lblTranTrm.Visible = True
            lblPckingTerm.Visible = False

            cboUM.Text = ""
            txtInrQty.Text = ""
            txtMtrQty.Text = ""
            txtCft.Text = ""
            txtCBM.Text = ""
            cboFtyPrcTrm.Text = ""
            cboDtlPrcTrm.Text = ""
            cboTranTrm.Text = ""
            cboUM.Focus()
        End If

        packtermcontrol("ItemNotInIM")
     
    End Sub








 












    Private Sub cmdImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdImage.Click
        Try
            frmImage.pbImage.Load(pth)
        Catch ex As Exception

        End Try
        frmImage.ShowDialog()
    End Sub

    '*** Phase 2 comment it
    'Private Sub GetApprPert()
    '    Dim strCusno As String
    '    Dim rsTmp As New DataSet

    '    strCusno = ""

    '    If strApprMax = "N/A" Or strApprMin = "N/A" Then
    '        If cboCus2No.Text <> "" Then
    '            strCusno = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)

    '           '' Cursor = Cursors.WaitCursor

    '            gsCompany = Trim(cboCoCde.Text)
    '            Call Update_gs_Value(gsCompany)

    '            gspStr = "sp_select_CUPRCINF '" & cboCoCde.Text & "','" & strCusno & "'"
    '            rtnLong = execute_SQLStatement(gspStr, rsTmp, rtnStr)
    '            gspStr = ""

    '           '' Cursor = Cursors.Default

    '            If rtnLong <> RC_SUCCESS Then
    '                MsgBox("Error on loading GetApprPert sp_select_CUPRCINF 1:" & rtnStr)
    '                Exit Sub
    '            End If

    '            If rsTmp.Tables("RESULT").Rows.Count = 0 Then
    '                strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '            End If
    '        Else
    '            strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '        End If

    '        If strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) Then
    '           '' Cursor = Cursors.WaitCursor

    '            gsCompany = Trim(cboCoCde.Text)
    '            Call Update_gs_Value(gsCompany)

    '            gspStr = "sp_select_CUPRCINF '" & cboCoCde.Text & "','" & strCusno & "'"
    '            rtnLong = execute_SQLStatement(gspStr, rsTmp, rtnStr)
    '            gspStr = ""

    '           '' Cursor = Cursors.Default

    '            If rtnLong <> RC_SUCCESS Then
    '                MsgBox("Error on loading GetApprPert sp_select_CUPRCINF 2:" & rtnStr)
    '                Exit Sub
    '            End If
    '        End If

    '        If rsTmp.Tables.Count = 0 Then
    '            strApprMax = "3"
    '            strApprMin = "-" + "3"
    '        Else
    '            If rsTmp.Tables("RESULT").Rows.Count = 0 Then
    '                strApprMax = "3"
    '                strApprMin = "-" + "3"
    '            Else
    '                strApprMax = CStr(rsTmp.Tables("RESULT").Rows(0)("cpi_quplus"))
    '                strApprMin = "-" + CStr(rsTmp.Tables("RESULT").Rows(0)("cpi_quminus"))
    '            End If
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub AddRndSts()
    '    cboRndSts.Items.Clear()
    '    cboRndSts.Text = ""
    '    cboRndSts.Items.Add("")
    '    cboRndSts.Items.Add("First")
    '    cboRndSts.Items.Add("Second")
    '    cboRndSts.Items.Add("Third")
    '    cboRndSts.Items.Add("Fourth")
    '    cboRndSts.Items.Add("Fifth")
    'End Sub

    '*** Phase 2 comment it
    'Private Sub cboRndSts_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
    '    Dim i As Integer
    '    Dim Y As Integer
    '    Dim inCombo As Boolean

    '    i = cboRndSts.Items.Count
    '    If cboRndSts.Text <> "" And cboRndSts.Enabled = True And cboRndSts.Items.Count > 0 Then
    '        For Y = 0 To i - 1
    '            If cboRndSts.Text = cboRndSts.Items(Y).ToString Then
    '                inCombo = True
    '            End If
    '        Next

    '        If inCombo = False Then
    '            MsgBox("Rnd Sts. - Data is Invalid, please select in Drop Down List.")
    '            e.Cancel = True
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub save_AddInfo(ByVal seq As Integer)
    '    Dim message As String = ""
    '    Dim rs As New DataSet

    '    If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
    '        For index As Integer = 0 To rs_QUADDINF.Tables("RESULT").Rows.Count - 1

    '            '*** Delete QUADDINF
    '            If rs_QUADDINF.Tables("RESULT").Rows(index)("mode").ToString = "DEL" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_physical_delete_QUADDINF '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "'"
    '                message = "sp_physical_delete_QUADDINF"

    '                '*** Add QUADDINF
    '            ElseIf rs_QUADDINF.Tables("RESULT").Rows(index)("mode").ToString = "NEW" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_insert_QUADDINF '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_fldid").ToString & "','" & _
    '                                            rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_value").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_insert_QUADDINF"

    '                '*** Update QUADDINF
    '            ElseIf rs_QUADDINF.Tables("RESULT").Rows(index)("mode").ToString = "UPD" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_update_QUADDINF '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & _
    '                                            rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_qutseq").ToString & "','" & _
    '                                            rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_fldid").ToString & "','" & _
    '                                            rs_QUADDINF.Tables("RESULT").Rows(index)("qdi_value").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_update_QUADDINF"
    '            End If

    '            If gspStr > "" Then  '*** if there is something to do with s ...
    '                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                gspStr = ""

    '               '' Cursor = Cursors.Default

    '                If rtnLong <> RC_SUCCESS Then
    '                    MsgBox("Error on loading save_AddInfo " & message & " :" & rtnStr)
    '                    Exit Sub
    '                Else
    '                    IsUpdated = True
    '                End If
    '            End If
    '        Next
    '    End If
    'End Sub

    'Private Sub save_CstEmt(ByVal seq As Integer)
    '    Dim message As String = ""
    '    Dim rs As New DataSet

    '    If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
    '        For index As Integer = 0 To rs_QUCSTEMT.Tables("RESULT").Rows.Count - 1

    '            '*** Delete QUCSTEMT
    '            If rs_QUCSTEMT.Tables("RESULT").Rows(index)("mode").ToString = "DEL" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_physical_delete_QUCSTEMT '" & cboCoCde.Text & "','" & txtQutNo.Text & "','" & seq & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_ceseq").ToString & "'"
    '                message = "sp_physical_delete_QUCSTEMT"

    '                '*** Insert QUCSTEMT
    '            ElseIf rs_QUCSTEMT.Tables("RESULT").Rows(index)("mode").ToString = "NEW" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_insert_QUCSTEMT '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_ceseq").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_cecde").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("cce_percent_d").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_percent").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_curcde").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("cce_amt_d").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_insert_QUCSTEMT"

    '                '*** Update QUCSTEMT
    '            ElseIf rs_QUCSTEMT.Tables("RESULT").Rows(index)("mode").ToString = "UPD" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_update_QUCSTEMT '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_ceseq").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_cecde").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("cce_percent_d").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_percent").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_curcde").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("cce_amt_d").ToString & "','" & _
    '                                            rs_QUCSTEMT.Tables("RESULT").Rows(index)("qce_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_update_QUCSTEMT"
    '            End If

    '            If gspStr > "" Then  '*** if there is something to do with s ...
    '                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                gspStr = ""

    '               '' Cursor = Cursors.Default

    '                If rtnLong <> RC_SUCCESS Then
    '                    MsgBox("Error on loading save_CstEmt " & message & " :" & rtnStr)
    '                    Exit Sub
    '                Else
    '                    IsUpdated = True
    '                End If
    '            End If
    '        Next
    '    End If
    'End Sub

    'Private Sub save_ELCDTL(ByVal seq As Integer)
    '    Dim message As String = ""
    '    Dim rs As New DataSet

    '    If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '        For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1

    '            '*** Delete QUELCDTL
    '            If rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString = "DEL" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_physical_delete_QUELCDTL '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_grpcde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_seq").ToString & "'"
    '                message = "sp_physical_delete_QUELCDTL"

    '                '*** Insert QUELCDTL
    '            ElseIf rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString = "NEW" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_insert_QUELCDTL '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_grpcde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_seq").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_cecde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_percent").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_curcde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_insert_QUELCDTL"

    '                '*** Update QUELCDTL
    '            ElseIf rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString = "UPD" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_update_QUELCDTL '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_grpcde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_seq").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_cecde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_percent").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_curcde").ToString & "','" & _
    '                                            rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_update_QUELCDTL"
    '            End If

    '            If gspStr > "" Then  '*** if there is something to do with s ...
    '                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                gspStr = ""

    '               '' Cursor = Cursors.Default

    '                If rtnLong <> RC_SUCCESS Then
    '                    MsgBox("Error on loading save_ELCDTL " & message & " :" & rtnStr)
    '                    Exit Sub
    '                Else
    '                    IsUpdated = True
    '                End If
    '            End If
    '        Next
    '    End If
    'End Sub

    'Private Sub save_ELC(ByVal seq As Integer)
    '    Dim message As String = ""
    '    Dim rs As New DataSet

    '    If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '        For index As Integer = 0 To rs_QUELC.Tables("RESULT").Rows.Count - 1

    '            '*** Delete QUELC
    '            If rs_QUELC.Tables("RESULT").Rows(index)("mode").ToString = "DEL" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_physical_delete_QUELC '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_grpcde").ToString & "'"
    '                message = "sp_physical_delete_QUELC"

    '                '*** Insert QUELC
    '            ElseIf rs_QUELC.Tables("RESULT").Rows(index)("mode").ToString = "NEW" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_insert_QUELC '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_grpcde").ToString & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_curcde").ToString & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_insert_QUELC"

    '                '*** Update QUELC
    '            ElseIf rs_QUELC.Tables("RESULT").Rows(index)("mode").ToString = "UPD" Then
    '               '' Cursor = Cursors.WaitCursor

    '                gsCompany = Trim(cboCoCde.Text)
    '                Call Update_gs_Value(gsCompany)

    '                gspStr = "sp_update_QUELC '" & cboCoCde.Text & "','" & IIf(Add_flag = True, qutNo, txtQutNo.Text) & "','" & seq & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_grpcde").ToString & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_curcde").ToString & "','" & _
    '                                            rs_QUELC.Tables("RESULT").Rows(index)("qec_amt").ToString & "','" & _
    '                                            gsUsrID & "'"
    '                message = "sp_update_QUELC"
    '            End If

    '            If gspStr > "" Then  '*** if there is something to do with s ...
    '                rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                gspStr = ""

    '               '' Cursor = Cursors.Default

    '                If rtnLong <> RC_SUCCESS Then
    '                    MsgBox("Error on loading save_ELC " & message & " :" & rtnStr)
    '                    Exit Sub
    '                Else
    '                    IsUpdated = True
    '                End If
    '            End If
    '        Next
    '    End If
    'End Sub

    'Private Sub cmdTBM_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmdTBM.Click
    '    '--- Update Company Code before execute ---
    '    gsCompany = Trim(cboCoCde.Text)
    '    Call Update_gs_Value(gsCompany)
    '    '------------------------------------------

    '    toBeMod = New QUM00001_2
    '    toBeMod.ma = Me

    '    toBeMod.ShowDialog()

    '    If isABUAssortment(txtItmNo.Text) = True Then
    '        Call ABUASST(txtItmNo.Text, "SHOW")
    '    Else
    '        Call ABUASST(txtItmNo.Text, "HIDE")
    '        Call ABUASST(txtItmNo.Text, "HIDEPRC")
    '    End If

    '    If chkPC.Checked = True Then
    '        Dim dblTmp As Double

    '        dblTmp = txtPCPrc.Text
    '        txtPCPrc.Text = ""
    '        chkPC.Checked = False
    '        chkPC.Checked = True

    '        Call txtPCPrc_GotFocus(sender, e)
    '        txtPCPrc.Text = dblTmp
    '        Call txtPCPrc_LostFocus(sender, e)
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub LoadAddInf()
    '    Dim strCus1No As String
    '    Dim strCus2No As String

    '    If cboCus1No.Text = "" Then
    '        strCus1No = ""
    '    Else
    '        strCus1No = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '    End If

    '    If cboCus2No.Text = "" Then
    '        strCus2No = ""
    '    Else
    '        strCus2No = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)
    '    End If

    '   '' Cursor = Cursors.WaitCursor

    '    gsCompany = Trim(cboCoCde.Text)
    '    Call Update_gs_Value(gsCompany)

    '    gspStr = "sp_select_syquaddinf '" & cboCoCde.Text & "','" & strCus1No & "','" & strCus2No & "','1'"
    '    rtnLong = execute_SQLStatement(gspStr, rs_SYQUADDINF, rtnStr)
    '    gspStr = ""

    '   '' Cursor = Cursors.Default

    '    If rtnLong <> RC_SUCCESS Then
    '        MsgBox("Error on loading LoadAddInf sp_select_syquaddinf :" & rtnStr)
    '        Exit Sub
    '    End If

    '    dgAddInf.DataSource = Nothing

    '    If rs_SYQUADDINF.Tables("RESULT").Rows.Count > 0 Then
    '        btcQUM00001.TabPages(3).Enabled = True
    '    Else
    '        btcQUM00001.TabPages(3).Enabled = False
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub txtSeq_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtSeq.TextChanged
    '    txtHSeq.Text = txtSeq.Text
    'End Sub

    '*** Phase 2 comment it
    'Private Sub cboCustItmCat_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboCustItmCat.KeyUp
    '    If cboCustItmCat.Text.Length > 0 Then
    '        Call auto_search_combo(cboCustItmCat, e.KeyCode)
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub txtCALPMU_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCALPMU.GotFocus
    '    txtCALPMU.SelectAll()
    'End Sub

    '*** Phase 2 comment it
    'Private Sub dgCstEmt_CellBeginEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellCancelEventArgs)
    '    ori_qce_amt = rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt").ToString
    '    ori_qce_percent = rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent")
    'End Sub

    'Private Sub dgCstEmt_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs)
    '    If rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("cce_chg") = "N" Then
    '        rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt") = ori_qce_amt
    '        rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent") = ori_qce_percent
    '        ori_qce_amt = 0
    '        ori_qce_percent = 0
    '        MsgBox("Value is not allowed to change.")
    '        Exit Sub
    '    End If

    '    If CDec(rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt")) < 0 Or CDec(rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent")) < 0 Then
    '        rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt") = ori_qce_amt
    '        rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent") = ori_qce_percent
    '        ori_qce_amt = 0
    '        ori_qce_percent = 0
    '        MsgBox("Value cannot be negative.")
    '        Exit Sub
    '    End If

    '    If e.ColumnIndex = 6 Then
    '        If rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt") <> 0 Then
    '            MsgBox("Percent / Amount is either one!")
    '            rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent") = 0
    '        Else
    '            If rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("mode").ToString <> "NEW" Then
    '                Recordstatus = True
    '                rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("mode") = "UPD"
    '            End If
    '            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '                Recordstatus = True
    '            End If
    '        End If
    '    ElseIf e.ColumnIndex = 9 Then
    '        If rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_percent") <> 0 Then
    '            MsgBox("Percent / Amount is either one!")
    '            rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("qce_amt") = 0
    '        Else
    '            If rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("mode").ToString <> "NEW" Then
    '                Recordstatus = True
    '                rs_QUCSTEMT.Tables("RESULT").Rows(e.RowIndex)("mode") = "UPD"
    '            End If

    '            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '                Recordstatus = True
    '            End If
    '        End If
    '    End If

    '    dgCstEmt.Refresh()
    '    Call CalculatePrc(False)
    'End Sub

    'Private Sub dgELCDtl_CellBeginEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellCancelEventArgs) Handles dgELCDtl.CellBeginEdit
    '    ori_qed_percent = rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("qed_percent")
    'End Sub

    'Private Sub dgELCDtl_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgELCDtl.CellEndEdit
    '    If rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("ced_chg").ToString = "N" Then
    '        rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("qed_percent") = ori_qed_percent
    '        ori_qed_percent = "0"
    '        MsgBox("Value is not allowed to change.")
    '        Exit Sub
    '    End If

    '    If CDec(rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("qed_percent")) < 0 Then
    '        rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("qed_percent") = ori_qed_percent
    '        ori_qed_percent = "0"
    '        MsgBox("Value cannot be negative.")
    '        Exit Sub
    '    End If

    '    If e.ColumnIndex = 8 Then
    '        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '            Recordstatus = True
    '            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '        End If
    '        If rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("mode").ToString <> "NEW" Then
    '            rs_QUELCDTL.Tables("RESULT").Rows(e.RowIndex)("mode") = "UPD"
    '            Recordstatus = True
    '        End If

    '        '*** Phase 2 comment it
    '        'Call CalculateELC()
    '    End If
    'End Sub

    'Private Sub dgAddInf_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgAddInf.CellEndEdit
    '    If e.ColumnIndex > 0 Then
    '        If rs_QUADDINF.Tables("RESULT").Rows(e.RowIndex)("mode").ToString <> "NEW" Then
    '            rs_QUADDINF.Tables("RESULT").Rows(e.RowIndex)("mode") = "UPD"
    '            Recordstatus = True
    '        End If

    '        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '            Recordstatus = True
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub txtCALPMU_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCALPMU.KeyPress
    '    If e.KeyChar > Chr(0) Then
    '        e.KeyChar = Chr(check_numeric_size(txtCALPMU.Text, Asc(e.KeyChar), txtCALPMU.SelectionStart, 9, 4))

    '        If e.KeyChar = Chr(13) Then
    '            Call CalculatePMU(txtCALPMU)
    '        End If
    '    Else
    '        e.KeyChar = Chr(0)
    '    End If
    'End Sub

    'Private Sub txtCALPMU_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCALPMU.LostFocus
    '    If Trim(txtCALPMU.Text) = "" Then
    '        txtCALPMU.Text = "0"
    '    End If

    '    If IsNumeric(CDbl(IIf(txtCALPMU.Text = "", 0, txtCALPMU.Text))) = True Then
    '        Call CalculatePMU(txtCALPMU)
    '    Else
    '        MsgBox("Please input numeric value.")
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub CalculateELC()
    '    Dim decAjdPrc As Double
    '    Dim rsTmp As New DataSet
    '    Dim strQudSeq As String
    '    Dim strGrpCde As String
    '    Dim strGrpCde_old As String
    '    Dim dblTtl As Double

    '    dblTtl = 0

    '    If rs_QUELCDTL.Tables.Count > 0 Then
    '        If rs_QUELCDTL.Tables("RESULT").DefaultView.Count > 0 Then
    '            If CDec(IIf(Trim(txtCus2Dp.Text) = "", "0", txtCus2Dp.Text)) <> 0 Then
    '                decAjdPrc = CDec(IIf(Trim(txtCus2Dp.Text) = "", "0", txtCus2Dp.Text))
    '            Else
    '                decAjdPrc = CDec(IIf(Trim(txtCus1Dp.Text) = "", "0", txtCus1Dp.Text))
    '            End If

    '            For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").DefaultView.Count - 1
    '                If Trim(rs_QUELCDTL.Tables("RESULT").DefaultView(index)("ced_cedsc").ToString) = "Transportation" And _
    '                        rs_QUELCDTL.Tables("RESULT").DefaultView(index)("mode").ToString <> "DEL" Then
    '                    If decAjdPrc = 0 Then
    '                        rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_amt") = 0
    '                        rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_percent") = 0
    '                    Else
    '                        rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_percent") = round((rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_amt") / decAjdPrc) * 100, 2)
    '                    End If
    '                Else
    '                    rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_amt") = (rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_percent") * decAjdPrc) / 100
    '                End If
    '            Next

    '            strGrpCde_old = rs_QUELCDTL.Tables("RESULT").DefaultView(0)("qed_grpcde")

    '            For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").DefaultView.Count - 1
    '                strQudSeq = rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_qutseq")
    '                strGrpCde = rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_grpcde")

    '                If strGrpCde <> strGrpCde_old Then
    '                    dblTtl = 0
    '                End If

    '                If rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_qutseq").ToString = strQudSeq And _
    '                    rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_grpcde").ToString = strGrpCde Then
    '                    If rs_QUELCDTL.Tables("RESULT").DefaultView(index)("mode") <> "DEL" Then
    '                        dblTtl = dblTtl + CDec(IIf(IsDBNull(rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_amt")) = True, 0, rs_QUELCDTL.Tables("RESULT").DefaultView(index)("qed_amt")))
    '                    End If
    '                End If

    '                If rs_QUELC.Tables("RESULT").DefaultView.Count > 0 Then
    '                    For index1 As Integer = 0 To rs_QUELC.Tables("RESULT").DefaultView.Count - 1
    '                        If rs_QUELC.Tables("RESULT").DefaultView(index1)("mode").ToString <> "DEL" Then
    '                            If rs_QUELC.Tables("RESULT").DefaultView(index1)("qec_grpcde").ToString = strGrpCde Then
    '                                rs_QUELC.Tables("RESULT").DefaultView(index1)("qec_amt") = dblTtl + decAjdPrc
    '                                '*** Phase 2 comment it
    '                                'Call cboCustItmCatPress()
    '                                'Call CheckRetailPrc()

    '                                If flgUpdItm = False And flgRenewing = False Then
    '                                    If rs_QUELC.Tables("RESULT").DefaultView(index1)("mode").ToString <> "NEW" Then
    '                                        rs_QUELC.Tables("RESULT").DefaultView(index1)("mode") = "UPD"
    '                                        Recordstatus = True
    '                                    End If
    '                                End If
    '                                'Exit Sub
    '                            End If
    '                        End If
    '                    Next
    '                End If
    '                strGrpCde_old = strGrpCde
    '            Next
    '        End If

    '        If rs_QUELCDTL.Tables("RESULT").DefaultView.Count > 0 Then
    '            dgELCDtl.Refresh()
    '        End If

    '        If rs_QUELC.Tables.Count > 0 Then
    '            If rs_QUELC.Tables("RESULT").DefaultView.Count > 0 Then
    '                dgELC.Refresh()
    '            End If
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub CalculateELCDuty(ByVal dblDuty As Double)
    '    If rs_QUELCDTL.Tables.Count > 0 Then
    '        If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '            For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
    '                If rs_QUELCDTL.Tables("RESULT").Rows(index)("ced_cedsc").ToString = "Duty" And _
    '                    rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString <> "DEL" Then
    '                    rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_percent") = dblDuty

    '                    If flgUpdItm = False And flgRenewing = False Then
    '                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '                            Recordstatus = True
    '                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '                        End If

    '                        If rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString <> "NEW" Then
    '                            rs_QUELCDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
    '                            Recordstatus = True
    '                        End If
    '                    End If

    '                    Call CalculateELC()
    '                End If
    '            Next
    '        End If

    '        If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '            dgELCDtl.Refresh()
    '        End If

    '        If rs_QUELC.Tables.Count > 0 Then
    '            If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '                dgELC.Refresh()
    '            End If
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub CalculateELCTran()
    '    Dim intMtr As Integer
    '    Dim dblTrans As Double
    '    Dim rs As New DataSet
    '    Dim dblFlgRat As Double
    '    Dim strCusno As String
    '    Dim strPrcTrm As String
    '    Dim decAjdPrc As Double

    '    If IsNumeric(Trim(txtMtrdin.Text)) = False Then
    '        Exit Sub
    '    End If

    '    If IsNumeric(Trim(txtMtrwin.Text)) = False Then
    '        Exit Sub
    '    End If

    '    If IsNumeric(Trim(txtMtrhin.Text)) = False Then
    '        Exit Sub
    '    End If

    '    If Trim(cboDtlPrcTrm.Text) = "" Or Trim(cboDtlPrcTrm.Text) = "-" Then
    '        Exit Sub
    '    End If

    '    If rs_QUELCDTL.Tables.Count > 0 Then
    '        If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '            For index As Integer = 0 To rs_QUELCDTL.Tables("RESULT").Rows.Count - 1
    '                If Trim(rs_QUELCDTL.Tables("RESULT").Rows(index)("ced_cedsc").ToString) = "Transportation" And _
    '                        rs_QUELCDTL.Tables("RESULT").Rows(index)("mode").ToString <> "DEL" Then
    '                    If rs.Tables.Count = 0 Then
    '                        '*** Get Frieght Rate From Customer
    '                        If Trim(cboDtlPrcTrm.Text) <> "" Then
    '                            strPrcTrm = Microsoft.VisualBasic.Left(cboDtlPrcTrm.Text, InStr(cboDtlPrcTrm.Text, " - ") - 1)
    '                        Else
    '                            strPrcTrm = ""
    '                        End If

    '                        If Trim(cboCus2No.Text) <> "" Then
    '                            strCusno = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus2No.Text, " - ") - 1)

    '                           '' Cursor = Cursors.WaitCursor

    '                            gsCompany = Trim(cboCoCde.Text)
    '                            Call Update_gs_Value(gsCompany)

    '                            gspStr = "sp_select_CUFLGRAT_qu '" & cboCoCde.Text & "','" & strCusno & "','" & strPrcTrm & "','" & gsUsrID & "'"
    '                            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                            gspStr = ""

    '                           '' Cursor = Cursors.Default

    '                            If rtnLong <> RC_SUCCESS Then
    '                                MsgBox("Error on loading CalculateELCTran sp_select_CUFLGRAT_qu 1 :" & rtnStr)
    '                                Exit Sub
    '                            End If

    '                            If rs.Tables("RESULT").Rows.Count = 0 Then
    '                                strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '                            End If
    '                        Else
    '                            strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '                        End If

    '                        If strCusno = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) Then
    '                           '' Cursor = Cursors.WaitCursor

    '                            gsCompany = Trim(cboCoCde.Text)
    '                            Call Update_gs_Value(gsCompany)

    '                            gspStr = "sp_select_CUFLGRAT_qu '" & cboCoCde.Text & "','" & strCusno & "','" & strPrcTrm & "','" & gsUsrID & "'"
    '                            rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
    '                            gspStr = ""

    '                           '' Cursor = Cursors.Default

    '                            If rtnLong <> RC_SUCCESS Then
    '                                MsgBox("Error on loading CalculateELCTran sp_select_CUFLGRAT_qu 2 :" & rtnStr)
    '                                Exit Sub
    '                            End If
    '                        End If

    '                        'rs_FlgRat = CopyRS(rs(1))
    '                        If rs.Tables("RESULT").Rows.Count > 0 Then
    '                            dblFlgRat = CDbl(IIf(IsDBNull(rs.Tables("RESULT").Rows(0)("cfr_flgrat")) = True, 0, rs.Tables("RESULT").Rows(0)("cfr_flgrat")))
    '                        Else
    '                            dblFlgRat = 0
    '                            MsgBox("Freight Rate is not maintained.")
    '                        End If
    '                    End If

    '                    If Trim(txtMtrdin.Text) = "" Then
    '                        txtMtrdin.Text = "0"
    '                    End If

    '                    If Trim(txtMtrwin.Text) = "" Then
    '                        txtMtrwin.Text = "0"
    '                    End If

    '                    If Trim(txtMtrhin.Text) = "" Then
    '                        txtMtrhin.Text = "0"
    '                    End If

    '                    If cboPcking.Text <> "" Then
    '                        intMtr = CInt(IIf(txtMtrQty.Text = "", 0, txtMtrQty.Text))
    '                    Else
    '                        intMtr = 0
    '                    End If

    '                    If flgUpdItm = False And flgRenewing = False Then
    '                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '                            Recordstatus = True
    '                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '                        End If
    '                        If rs_QUELCDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode").ToString <> "NEW" Then
    '                            rs_QUELCDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
    '                            Recordstatus = True
    '                        End If
    '                    End If

    '                    If CDec(IIf(Trim(txtCus2Dp.Text) = "", "0", txtCus2Dp.Text)) <> 0 Then
    '                        decAjdPrc = CDec(IIf(Trim(txtCus2Dp.Text) = "", "0", txtCus2Dp.Text))
    '                    Else
    '                        decAjdPrc = CDec(IIf(Trim(txtCus1Dp.Text) = "", "0", txtCus1Dp.Text))
    '                    End If

    '                    If Trim(txtCft.Text) = "" Then
    '                        txtCft.Text = "0"
    '                    End If

    '                    dblTrans = ((CDbl(IIf(txtCft.Text = "", 0, txtCft.Text))) / intMtr) * dblFlgRat

    '                    If decAjdPrc = 0 Then
    '                        rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_amt") = 0
    '                        rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_percent") = 0
    '                    Else
    '                        rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_amt") = dblTrans
    '                        rs_QUELCDTL.Tables("RESULT").Rows(index)("qed_percent") = round((dblTrans / decAjdPrc) * 100, 2)
    '                    End If

    '                    Call CalculateELC()
    '                End If
    '            Next
    '        End If

    '        If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '            dgELCDtl.Refresh()
    '        End If

    '        If rs_QUELC.Tables.Count > 0 Then
    '            If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '                dgELC.Refresh()
    '            End If
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub CalculatePMU(ByVal c As TextBox)
    '    Dim dblELC As Double
    '    Dim flgHasELC As Boolean

    '    flgHasELC = False
    '    dblELC = 0

    '    If rs_QUELC.Tables.Count > 0 Then
    '        If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '            For index As Integer = 0 To rs_QUELC.Tables("RESULT").Rows.Count - 1
    '                If rs_QUELC.Tables("RESULT").Rows(index)("mode").ToString <> "DEL" Then
    '                    If rs_QUELC.Tables("RESULT").Rows(index)("qec_grpcde").ToString = "001" Then
    '                        dblELC = CDec(IIf(IsDBNull(rs_QUELC.Tables("RESULT").Rows(index)("qec_amt")) = True, 0, rs_QUELC.Tables("RESULT").Rows(index)("qec_amt")))
    '                        flgHasELC = True
    '                        Exit For
    '                    End If
    '                End If
    '            Next
    '        End If
    '    End If

    '    If flgHasELC = True Then
    '        If c.Name = "txtCALPMU" Then
    '            If Trim(txtCALPMU.Text) = "" Then
    '                txtCALPMU.Text = "0"
    '            End If

    '            txtCusUsd.Text = Format(round2(dblELC / (1 - (CDec(IIf(txtCALPMU.Text = "", 0, txtCALPMU.Text)) / 100))), "########0.0000")
    '            'txtCusUsd.Text = Format(roundup(dblELC / (1 - (CDec(IIf(txtCALPMU.Text = "", 0, txtCALPMU.Text)) / 100))), "########0.0000")
    '        ElseIf c.Name = "txtCusUsd" Then
    '            If Trim(txtCusUsd.Text) = "" Then

    '            Else
    '                If CDbl(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)) <> "0" Then
    '                    txtCALPMU.Text = CStr(round2(((CDec(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)) - dblELC) / CDec(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)))) * 100)
    '                    'txtCALPMU.Text = CStr(roundup(((CDec(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)) - dblELC) / CDec(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text)))) * 100)
    '                Else
    '                    txtCALPMU.Text = Format(0, "########0.0000")
    '                End If
    '            End If
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub SetHeaderBarValue(ByVal SetValue As Boolean)
    '    If SetValue = True Then
    '        txtHItmno.Text = txtItmNo.Text
    '        txtHColor.Text = cboColCde.Text
    '        txtHPacking.Text = cboPcking.Text
    '        chkHFtyTmpItm.Checked = chkFtyTmpItm.Checked
    '        chkHTBM.Checked = chkTBM.Checked
    '    Else
    '        txtHItmno.Text = ""
    '        txtHColor.Text = ""
    '        txtHPacking.Text = ""
    '        chkHFtyTmpItm.Checked = False
    '        chkHTBM.Checked = False
    '    End If
    'End Sub

    'Private Sub ShowHeaderBar()
    '    txtHSeq.Enabled = False
    '    txtHItmno.Enabled = False
    '    txtHColor.Enabled = False
    '    txtHPacking.Enabled = False
    '    chkHFtyTmpItm.Enabled = False
    '    chkHTBM.Enabled = False
    'End Sub

    '*** Phase 2 comment it
    'Private Sub ShowGrdCstEmt()
    '    Dim i As Integer

    '    With dgCstEmt
    '        If rs_QUCSTEMT.Tables("RESULT").Rows.Count > 0 Then
    '            For i = 0 To rs_QUCSTEMT.Tables("RESULT").Columns.Count - 1
    '                .Columns(i).ReadOnly = True
    '                .Columns(i).Visible = False
    '            Next

    '            .Columns(4).Width = 160
    '            .Columns(4).HeaderText = "Cost Element"
    '            .Columns(4).ReadOnly = True
    '            .Columns(4).Visible = True
    '            .Columns(5).Width = 45
    '            .Columns(5).HeaderText = ""
    '            .Columns(5).ReadOnly = True
    '            .Columns(5).Visible = True
    '            .Columns(6).Width = 45
    '            .Columns(6).HeaderText = "%"
    '            .Columns(6).ReadOnly = False
    '            .Columns(6).Visible = True
    '            .Columns(7).Width = 45
    '            .Columns(7).HeaderText = ""
    '            .Columns(7).ReadOnly = True
    '            .Columns(7).Visible = True
    '            .Columns(8).Width = 60
    '            .Columns(8).HeaderText = ""
    '            .Columns(8).ReadOnly = True
    '            .Columns(8).Visible = True
    '            .Columns(9).Width = 60
    '            .Columns(9).HeaderText = "Amt"
    '            .Columns(9).ReadOnly = False
    '            .Columns(9).Visible = True
    '        End If
    '    End With
    'End Sub

    '*** Phase 2 comment it
    'Private Sub ShowGrdELCDtl()
    '    Dim i As Integer

    '    With dgELCDtl
    '        If rs_QUELCDTL.Tables("RESULT").Rows.Count > 0 Then
    '            For i = 0 To rs_QUELCDTL.Tables("RESULT").Columns.Count - 1
    '                .Columns(i).ReadOnly = True
    '                .Columns(i).Visible = False
    '            Next

    '            .Columns(3).Width = 40
    '            .Columns(3).HeaderText = "Group"
    '            .Columns(3).ReadOnly = True
    '            .Columns(3).Visible = True
    '            .Columns(4).Width = 80
    '            .Columns(4).HeaderText = "Desc"
    '            .Columns(4).ReadOnly = True
    '            .Columns(4).Visible = True
    '            .Columns(5).Width = 40
    '            .Columns(5).HeaderText = "Seq"
    '            .Columns(5).ReadOnly = True
    '            .Columns(5).Visible = True
    '            .Columns(7).Width = 100
    '            .Columns(7).HeaderText = "Cost Element"
    '            .Columns(7).ReadOnly = True
    '            .Columns(7).Visible = True
    '            .Columns(8).Width = 50
    '            .Columns(8).HeaderText = "%"
    '            .Columns(8).ReadOnly = False
    '            .Columns(8).Visible = True
    '            .Columns(9).Width = 40
    '            .Columns(9).HeaderText = "Curr."
    '            .Columns(9).ReadOnly = True
    '            .Columns(9).Visible = True
    '            .Columns(10).Width = 70
    '            .Columns(10).HeaderText = "Total Amt"
    '            .Columns(10).ReadOnly = True
    '            .Columns(10).Visible = True
    '        End If
    '    End With
    'End Sub

    '*** Phase 2 comment it
    'Private Sub ShowGrdELC()
    '    Dim i As Integer

    '    With dgELC
    '        If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '            For i = 0 To rs_QUELC.Tables("RESULT").Columns.Count - 1
    '                .Columns(i).ReadOnly = True
    '                .Columns(i).Visible = False
    '            Next

    '            .Columns(3).Width = 60
    '            .Columns(3).HeaderText = "Group"
    '            .Columns(3).ReadOnly = True
    '            .Columns(3).Visible = True
    '            .Columns(4).Width = 120
    '            .Columns(4).HeaderText = "Desc"
    '            .Columns(4).ReadOnly = True
    '            .Columns(4).Visible = True
    '            .Columns(5).Width = 60
    '            .Columns(5).HeaderText = "Curr."
    '            .Columns(5).ReadOnly = True
    '            .Columns(5).Visible = True
    '            .Columns(6).Width = 100
    '            .Columns(6).HeaderText = "Total Amt"
    '            .Columns(6).ReadOnly = True
    '            .Columns(6).Visible = True
    '        End If
    '    End With
    'End Sub

    '*** Phase 2 comment it
    'Private Sub ShowGrdAddInf()
    '    Dim i As Integer

    '    With dgAddInf
    '        If rs_QUADDINF.Tables("RESULT").Rows.Count > 0 Then
    '            For i = 0 To rs_QUADDINF.Tables("RESULT").Columns.Count - 1
    '                .Columns(i).ReadOnly = True
    '                .Columns(i).Visible = False
    '            Next

    '            .Columns(4).Width = 250
    '            .Columns(4).HeaderText = "Field"
    '            .Columns(4).ReadOnly = True
    '            .Columns(4).Visible = True
    '            .Columns(5).Width = 400
    '            .Columns(5).HeaderText = "Value"
    '            .Columns(5).ReadOnly = False
    '            .Columns(5).Visible = True
    '        End If
    '    End With
    'End Sub

    '*** Phase 2 comment it
    'Private Sub cboCustItmCat_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCustItmCat.Click
    '    Call cboCustItmCatPress()
    'End Sub

    '*** Phase 2 comment it
    'Private Sub cboCustItmCat_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCustItmCat.KeyPress
    '    If e.KeyChar.Equals(Chr(13)) Then
    '        Call cboCustItmCatPress()
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Function cboCustItmCatPress() As Boolean
    '    Dim S As String = ""
    '    Dim rsTmp As New DataSet
    '    Dim strFml As String
    '    Dim dblELC As Double

    '    strFml = ""
    '    dblELC = 0

    '    If Trim(cboCustItmCat.Text) <> "" Then
    '        rsTmp = rs_CustItmCat.Copy()
    '        txtPMU.Text = ""

    '        If rs_CustItmCat.Tables.Count > 0 Then
    '            If rsTmp.Tables("RESULT").Rows.Count > 0 Then
    '                dr = rsTmp.Tables("RESULT").Select("crp_rpdsc = '" + cboCustItmCat.Text + "'")
    '                For index As Integer = 0 To dr.Length - 1
    '                    strFml = Replace(dr(index)("crp_pmu").ToString, "%", "")
    '                    txtPMU.Text = dr(index)("crp_pmu")
    '                    txtCustItmCatFml.Text = dr(index)("crp_fml")
    '                    txtCALPMU.Text = strFml
    '                Next
    '            Else
    '                strFml = ""
    '            End If
    '        End If

    '        If strFml <> "" Then
    '            If rs_QUELC.Tables.Count > 0 Then
    '                If rs_QUELC.Tables("RESULT").Rows.Count > 0 Then
    '                    For index As Integer = 0 To rs_QUELC.Tables("RESULT").Rows.Count - 1
    '                        If rs_QUELC.Tables("RESULT").Rows(index)("mode").ToString <> "DEL" Then
    '                            If rs_QUELC.Tables("RESULT").Rows(index)("qec_grpcde").ToString = "001" Then
    '                                dblELC = CDec(IIf(IsDBNull(rs_QUELC.Tables("RESULT").Rows(index)("qec_amt")) = True, 0, rs_QUELC.Tables("RESULT").Rows(index)("qec_amt")))
    '                                Exit For
    '                            End If
    '                        End If
    '                    Next
    '                End If
    '            End If

    '            If dblELC <> 0 Then
    '                S = CalculateRetPrc(dblELC, strFml)
    '                txtCusUsd.Text = S
    '                txtCustItmCatAmt.Text = S
    '            Else
    '                txtCusUsd.Text = "0"
    '                txtCusCad.Text = "0"
    '                txtCustItmCatAmt.Text = ""
    '            End If
    '        Else
    '            txtCusUsd.Text = "0"
    '            txtCusCad.Text = "0"
    '            txtCustItmCatAmt.Text = ""
    '        End If

    '        If IsNumeric(CDbl(IIf(txtCusUsd.Text = "", 0, txtCusUsd.Text))) = True Then
    '            Call CalculatePMU(txtCALPMU)
    '        End If
    '    End If
    'End Function

    '*** Phase 2 comment it
    'Private Function CalculateRetPrc(ByVal AdjPrc As Double, ByVal fml As String) As String
    '    Dim d As Double

    '    d = AdjPrc / ((100 - fml) / 100)

    '    If d = -1 Then
    '        CalculateRetPrc = Format(round2(AdjPrc), "###,###,##0.0000")
    '        'CalculateRetPrc = Format(roundup(AdjPrc), "###,###,##0.0000")
    '    Else
    '        CalculateRetPrc = Format(round2(d), "###,###,##0.0000")
    '        'CalculateRetPrc = Format(roundup(d), "###,###,##0.0000")
    '    End If
    'End Function

    '*** Phase 2 comment it
    'Private Sub dgMatBkd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgMatBkd.GotFocus
    '    lblCptBkd.ForeColor = Color.Blue
    '    flggrdMatbkd = True
    'End Sub

    'Private Sub dgMatBkd_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgMatBkd.LostFocus
    '    lblCptBkd.ForeColor = Color.Black
    'End Sub

    '*** Phase 2 comment it
    'Private Sub cboCustItmCat_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboCustItmCat.Validating
    '    Dim i As Integer
    '    Dim Y As Integer
    '    Dim inCombo As Boolean

    '    i = cboCustItmCat.Items.Count
    '    If cboCustItmCat.Text <> "" And cboCustItmCat.Enabled = True And cboCustItmCat.Items.Count > 0 Then
    '        For Y = 0 To i - 1
    '            If cboCustItmCat.Text = cboCustItmCat.Items(Y).ToString Then
    '                inCombo = True
    '            End If
    '        Next

    '        If inCombo = False Then
    '            MsgBox("Customer Item Category - Data is Invalid, please select in Drop Down List.")
    '            e.Cancel = True
    '        End If
    '    End If
    'End Sub

    '*** Phase 2 comment it
    'Private Sub SetCustItmCat()
    '    Dim strCust As String
    '    Dim strDef As String

    '    strDef = ""

    '    rs_CustItmCat.Tables.Clear()
    '    'rs_CustItmCat = Nothing

    '    If Trim(cboCus2No.Text) <> "" Then
    '        strCust = Microsoft.VisualBasic.Left(cboCus2No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '       '' Cursor = Cursors.WaitCursor

    '        gsCompany = Trim(cboCoCde.Text)
    '        Call Update_gs_Value(gsCompany)

    '        gspStr = "sp_select_CURETPRC '" & cboCoCde.Text & "','" & strCust & "'"
    '        rtnLong = execute_SQLStatement(gspStr, rs_CustItmCat, rtnStr)
    '        gspStr = ""

    '       '' Cursor = Cursors.Default

    '        If rtnLong <> RC_SUCCESS Then
    '            MsgBox("Error on loading SetCustItmCat sp_select_CURETPRC 1 :" & rtnStr)
    '           '' Cursor = Cursors.Default
    '            Exit Sub
    '        End If

    '        If rs_CustItmCat.Tables("RESULT").Rows.Count = 0 Then
    '            strCust = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '        End If
    '    Else
    '        strCust = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1)
    '    End If

    '    If strCust = Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) Then
    '       '' Cursor = Cursors.WaitCursor

    '        gsCompany = Trim(cboCoCde.Text)
    '        Call Update_gs_Value(gsCompany)

    '        gspStr = "sp_select_CURETPRC '" & cboCoCde.Text & "','" & strCust & "'"
    '        rtnLong = execute_SQLStatement(gspStr, rs_CustItmCat, rtnStr)
    '        gspStr = ""

    '       '' Cursor = Cursors.Default

    '        If rtnLong <> RC_SUCCESS Then
    '            MsgBox("Error on loading SetCustItmCat sp_select_CURETPRC 2 :" & rtnStr)
    '           '' Cursor = Cursors.Default
    '            Exit Sub
    '        End If
    '    End If

    '    cboCustItmCat.Items.Clear()
    '    cboCustItmCat.Text = ""

    '    If rs_CustItmCat.Tables("RESULT").Rows.Count > 0 Then
    '        cboCustItmCat.Items.Add("")
    '        For index As Integer = 0 To rs_CustItmCat.Tables("RESULT").Rows.Count - 1
    '            cboCustItmCat.Items.Add(rs_CustItmCat.Tables("RESULT").Rows(index)("crp_rpdsc").ToString)
    '            If rs_CustItmCat.Tables("RESULT").Rows(index)("crp_default").ToString = "Y" Then
    '                strDef = rs_CustItmCat.Tables("RESULT").Rows(index)("crp_rpdsc")
    '            End If
    '        Next

    '        cboCustItmCat.Enabled = True
    '        cboCustItmCat.Text = strDef
    '        strDef = ""
    '        Call cboCustItmCatPress()
    '    Else
    '        cboCustItmCat.Enabled = False
    '    End If
    'End Sub

    'Private Sub txtPcking_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtPcking.KeyPress
    '    If e.KeyChar.Equals(Chr(13)) Then
    '        txtPcking.Text = UCase(Trim(txtPcking.Text))
    '    End If

    '    If e.KeyChar.Equals(Chr(13)) And txtPcking.Text <> "" And CountCharacter(txtPcking.Text.Trim, "/") = 6 Then
    '        cboUM.Text = txtPcking.Text.Split("/")(0).Trim
    '        txtInrQty.Text = txtPcking.Text.Split("/")(1).Trim
    '        txtMtrQty.Text = txtPcking.Text.Split("/")(2).Trim
    '        txtCft.Text = txtPcking.Text.Split("/")(3).Trim
    '        cboFtyPrcTrm.Text = txtPcking.Text.Split("/")(4).Trim
    '        cboDtlPrcTrm.Text = txtPcking.Text.Split("/")(5).Trim
    '        cboTranTrm.Text = txtPcking.Text.Split("/")(6).Trim

    '        txtCus1Dp.Focus()
    '    End If
    'End Sub

    'Private Sub txtPcking_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtPcking.Validating
    '    If CountCharacter(txtPcking.Text.Trim, "/") <> 6 Then
    '        MsgBox("Packing - Data is Invalid, please enter a valid Packing and Terms (UM/Inner/Master/CFT/Fty Term/HK Term/Tran Term).")
    '        e.Cancel = True
    '    End If
    'End Sub

    'Public Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer
    '    Dim cnt As Integer = 0

    '    For Each c As Char In value
    '        If c = ch Then cnt += 1
    '    Next

    '    Return cnt
    'End Function

    Private Function check_numeric_size(ByVal val As String, ByVal key As Integer, ByVal pos As Integer, ByVal p As Integer, ByVal d As Integer) As Integer
        val = Trim(val)

        If ((InStr("0123456789.", Chr(key)) = 0) And key > 31) Or _
            ((InStr(val, ".") <> 0) And key > 31 And Chr(key) = ".") Then
            check_numeric_size = 0
        ElseIf UBound(Split(val, ".")) = 0 Then
            If (Len(val) + 1 > p) And key > 31 And (Chr(key) <> ".") Then
                check_numeric_size = 0
            Else
                check_numeric_size = key
            End If
        ElseIf UBound(Split(val, ".")) > 0 Then
            If pos <= Len(Split(val, ".")(0)) Then
                If (Len(Split(val, ".")(0)) + 1 > p) And key > 31 Then
                    check_numeric_size = 0
                Else
                    check_numeric_size = key
                End If
            Else
                If (Len(Split(val, ".")(1)) + 1 > d) And key > 31 Then
                    check_numeric_size = 0
                Else
                    check_numeric_size = key
                End If
            End If
        Else
            check_numeric_size = key
        End If
    End Function

    Private Function ValidateCombo(ByVal Combo1 As ComboBox) As Boolean
        If Combo1.Text = "" Then
            ValidateCombo = True
            Exit Function
        End If
        ValidateCombo = False
        Dim i As Integer
        Dim S As String
        S = Combo1.Text
        For i = 0 To Combo1.Items.Count - 1
            If UCase(Combo1.Items(i).ToString) = UCase(S) Then
                ValidateCombo = True
                Exit Function
            End If
        Next
        If Not ValidateCombo Then
            MsgBox("Invalid Data! Please try again.")
            On Error Resume Next
            Combo1.Focus()
            On Error GoTo 0
        End If
    End Function

    Private Function Eval(ByVal p As Double, ByVal S As String) As Double
        On Error GoTo EvalErr

        Dim Op As String = "* 1"
        Dim end_pos As Integer
        Dim r As Double, temp As Double

        S = Replace(S, " ", "") '*** Remove any space in the string

        '*** If the first character is not '*' or '/',
        '*** Just pack a '*' at the beginning of the string
        If (Mid(S, 1, 1) <> "*") And (Mid(S, 1, 1) <> "/") Then
            S = "*" & S
        End If

        r = p

        While (Len(S) <> 0)
            S = LTrim(S)
            Op = Mid(S, 1, 1)
            S = Mid(LTrim(S), 2, Len(S))

            If (InStr(S, "*") = 0 And InStr(S, "/") = 0) Then
                end_pos = Len(S) + 1
            ElseIf (InStr(S, "*") = 0) Then
                end_pos = InStr(S, "/")
            ElseIf (InStr(S, "/") = 0) Then
                end_pos = InStr(S, "*")
            Else
                If (InStr(S, "*") < InStr(S, "/")) Then
                    end_pos = InStr(S, "*")
                Else
                    end_pos = InStr(S, "/")
                End If
            End If

            temp = CDbl(Mid(S, 1, end_pos - 1))

            If Op = "*" Then
                r = r * temp
            ElseIf Op = "/" Then
                r = r / temp
            End If

            S = Mid(S, end_pos, Len(S))
        End While

        Eval = r
        Exit Function

EvalErr:
        Eval = -1

    End Function

    Public Function SearchImgPath(ByVal itmNo As String) As String
        '*** The objective of this function is to search for the sub-directory
        '*** of an item image.  This sub-directory is defined as the first 3
        '*** characters of a "revised" item number
        '*** converting format of the item no:
        itmNo = revisedItmno(itmNo)
        '*** Take the first 3 characters of the item no.
        SearchImgPath = Microsoft.VisualBasic.Left(itmNo, 8)
    End Function

    Public Function revisedItmno(ByVal itmNo As String) As String
        '*** The objective of this function is to replace any "/" or " /" in
        '*** an item number with an "_"
        '*** converting format of item no:
        itmNo = Replace(itmNo, " /", "_")
        itmNo = Replace(itmNo, "/", "_")
        itmNo = Replace(itmNo, "-", "_")
        itmNo = Replace(itmNo, " ", "")
        revisedItmno = itmNo
    End Function

    Private Function round2(ByVal Value As Double) As Double
        Dim tmp As String

        Value = round(Value, 4)
        tmp = CStr(Value)

        If InStr(tmp, ".") > 0 Then
            If Len(Microsoft.VisualBasic.Right(tmp, Len(tmp) - InStr(tmp, "."))) > 2 Then
                If CDec(Microsoft.VisualBasic.Right(Microsoft.VisualBasic.Left(Microsoft.VisualBasic.Right(tmp, Len(tmp) - InStr(tmp, ".")), 3), 1)) > 0 Then
                    round2 = CDec(tmp) + 0.01
                    round2 = CDec(Microsoft.VisualBasic.Left(CStr(round2), InStr(round2, ".") + 2))
                Else
                    round2 = round(CDec(tmp), 2)
                    Exit Function
                End If
            Else
                round2 = CDec(tmp)
                Exit Function
            End If
        Else
            round2 = CDec(tmp)
            Exit Function
        End If
    End Function
    Function get_vencur(ByVal vendetail As String) As String
        If Not (rs_VNBASINF.Tables("RESULT") Is Nothing) Then
            If rs_VNBASINF.Tables("RESULT").Rows.Count > 0 Then

                For index As Integer = 0 To rs_VNBASINF.Tables("RESULT").Rows.Count - 1
                    If vendetail = (rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") & " - " & _
                                        rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_vensna")) Or vendetail = rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_venno") Then

                        Return rs_VNBASINF.Tables("RESULT").Rows(index)("vbi_curcde")

                    End If
                Next

            End If

        End If
        Return ""
    End Function

    Private Function round(ByVal a As Double, ByVal Value As Double) As Double
        Dim S As String

        S = "0"

        If Value = 0 Then S = "0"
        If Value = 1 Then S = "0.0"
        If Value = 2 Then S = "0.00"
        If Value = 3 Then S = "0.000"
        If Value = 4 Then S = "0.0000"
        If Value = 5 Then S = "0.00000"
        If Value = 6 Then S = "0.000000"
        If Value = 7 Then S = "0.0000000"
        If Value = 8 Then S = "0.00000000"
        If Value = 9 Then S = "0.000000000"
        If Value = 10 Then S = "0.0000000000"

        round = CDbl(Format(a, S))
    End Function

    Private Function roundup(ByVal Value As Double) As Double
        Dim tmp As String

        Value = round(Value, 5)
        tmp = CStr(Value)

        If InStr(tmp, ".") > 0 Then
            If Len(Microsoft.VisualBasic.Right(tmp, Len(tmp) - InStr(tmp, "."))) > 4 Then
                roundup = CDec(tmp) + 0.0001
                roundup = CDec(Microsoft.VisualBasic.Left(CStr(roundup), InStr(roundup, ".") + 4))
                Exit Function
            Else
                roundup = CDec(tmp)
                Exit Function
            End If
        Else
            roundup = CDec(tmp)
            Exit Function
        End If
    End Function



    Private Sub txtItmNo_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNo.LostFocus
        Me.btcQUM00001.TabPages(1).Select()
    End Sub

    Private Sub cboCusals_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCusals.SelectedIndexChanged

    End Sub

    Private Sub txtQutNo_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtQutNo.MouseEnter

    End Sub

    Private Sub txtQutNo_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtQutNo.TextChanged

    End Sub


    Private Sub rbView_A_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles rbView_A.Click

        'dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView
        '        Call display_dgOthDtl("A")
        Call display_dgOthDtl("A")
    End Sub

    Private Sub release_TabControl()
        Dim i As Integer
        For i = 0 To btcQUM00001.TabPages.Count - 1
            Me.btcQUM00001.TabPages(i).Enabled = True
        Next i
        'Me.cmdAdd.Enabled = True
        ''Me.cmdAss.Enabled = True
        ''Me.cmdBackD.Enabled = True
        'Me.cmdBrowse.Enabled = True
        'Me.cmdClear.Enabled = True
        'Me.cmdCopy.Enabled = True
        ''Me.cmdCptBkd.Enabled = True
        'Me.cmdDelete.Enabled = True
        'Me.cmdDelRow.Enabled = True
        'Me.cmdExit.Enabled = True
        'Me.cmdFind.Enabled = True
        'Me.cmdGenSmp.Enabled = True
        'Me.cmdGenTent.Enabled = True
        'Me.cmdImage.Enabled = True
        'Me.cmdInsRow.Enabled = True
        ' Me.cmdNextD.Enabled = True
        'Me.cmdPrcEmt.Enabled = True
        'Me.cmdRenew.Enabled = True
        'Me.cmdSave.Enabled = True
        'Me.cmdSearch.Enabled = True
        'Me.cmdTBM.Enabled = True
        'Me.cmdUpdate.Enabled = True
        'Me.cmdUpdateMO.Enabled = True
        'Me.cmdUpdItm.Enabled = True




        'Select Case sMode
        '    Case "Init"
        '    Case "Add"
        '        cmdGenSmp.Enabled = False
        '        cmdGenTent.Enabled = False
        '    Case "Updating"
        '    Case "Save"
        '    Case "Delete"
        '    Case "ReadOnly"
        '    Case Else  '***"Clear"

        'End Select

        Call SetAllDisplay(Me)


    End Sub

    Private Sub freeze_TabControl(ByVal tabpageno As Integer)
        Call GetAllDisplay(Me)

        Dim i As Integer
        For i = 0 To btcQUM00001.TabPages.Count - 1
            If i = tabpageno Then
                Me.btcQUM00001.TabPages(i).Enabled = True
            Else
                Me.btcQUM00001.TabPages(i).Enabled = False
            End If
        Next i
    End Sub





    Private Sub rbView_P_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles rbView_P.Click
        Call display_dgOthDtl("P")
    End Sub

    Private Sub rbView_T_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles rbView_T.Click
        Call display_dgOthDtl("T")
    End Sub

    Private Sub rbView_S_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles rbView_S.Click
        Call display_dgOthDtl("S")
    End Sub

    Private Sub rbView_F_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles rbView_F.Click
        Call display_dgOthDtl("F")
    End Sub

    Private Sub cmdItmNoConvVen_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdItmNoConvVen.Click
        bIsShowPanels = True

        If txtItmNoVen.Text.Trim <> "" Then
            If cboItmNoVen.text.Trim <> "" Then
               '' Cursor = Cursors.WaitCursor

                Dim cus1no As String
                Dim cus2no As String

                If Trim(cboCus1No.Text) = "" Then
                    cus1no = ""
                Else
                    cus1no = Trim(Split(cboCus1No.Text, "-")(0))
                End If

                If Trim(cboCus2No.Text) = "" Then
                    cus2no = ""
                Else
                    cus2no = Trim(Split(cboCus2No.Text, "-")(0))
                End If


                Dim tmp_cboItmNoVen As String
                tmp_cboItmNoVen = cboItmNoVen.text.Trim()
                If InStr(tmp_cboItmNoVen, " - ") - 1 >= 0 Then
                    tmp_cboItmNoVen = Trim(Split(cboItmNoVen.text, "-")(1))
                End If

                gspStr = "sp_select_IMVENINF_Q '','" & txtItmNoVen.Text.Trim & "','" & tmp_cboItmNoVen & "','" & cus1no & "','" & cus2no & "'"

                ' gspStr = "sp_select_IMVENINF_Q '','" & txtItmNoTmp.Text.Trim & "','" & cus1no & "','" & cus2no & "'"
                rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
                gspStr = ""

               '' Cursor = Cursors.Default

                If rtnLong <> RC_SUCCESS Then
                    MsgBox("Error on loading cmdItmNoConv_Click sp_select_IMTMPREL :" & rtnStr)
                    Exit Sub
                End If

                For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
                    rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
                Next i

                Dim rs_IMTMPINF As New DataSet

                rs_IMTMPINF.Tables.Clear()

                If rs_IMTMPREL.Tables("RESULT").Rows.Count > 0 Then
                    For index As Integer = 1 To rs_IMTMPREL.Tables("RESULT").Rows.Count
                        rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("ID") = index

                        gspStr = "sp_select_QUOTNDTL_Vendor '" & cboCoCde.Text & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("itr_itmno").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_pckunt").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_inrqty").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_mtrqty").ToString.Trim & "','" & _
                                                                cus1no & "','" & cus2no & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_ftyprctrm").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_hkprctrm").ToString.Trim & "','" & _
                                                                rs_IMTMPREL.Tables("RESULT").Rows(index - 1)("imu_trantrm").ToString.Trim & "','" & _
                                                                gsUsrID & "'"
                        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPINF, rtnStr)
                        gspStr = ""

                       '' Cursor = Cursors.Default

                        If rtnLong <> RC_SUCCESS Then
                            MsgBox("Error on loading cmdItmNoConv_Click sp_select_QUOTNDTL_Vendor :" & rtnStr)
                            Exit Sub
                        End If

                        If rs_IMTMPINF.Tables("RESULT").Rows.Count = 0 Then
                            rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Conv") = "N"
                            rs_IMTMPREL.Tables("RESULT").DefaultView(index - 1)("Reason") = "No valid pricing"
                        End If
                    Next

                    dgPanItmNoConv.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView
                    txtPanItmNoConvFrm.Text = "1"
                    txtPanItmNoConvTo.Text = rs_IMTMPREL.Tables("RESULT").DefaultView.Count
                    Call ShowGrdIMTMP()
                    PanelItmNoConv.Visible = True
                    PanelItmNoConv.BringToFront()
                Else
                    rs_IMTMPREL.Tables.Clear()
                    MsgBox("No record found")
                End If
            End If
        ElseIf txtItmNoVen.Text <> "" Then

        End If

    End Sub

    Private Sub cboHrmCde_SelectedIndexChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboHrmCde.SelectedIndexChanged

        Call cboHrmCdeClick()

    End Sub

    Private Sub cboCus1No_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboCus1No.LostFocus
        If cboCus1No.Text.Length > 5 Then
            cboCus1No.Enabled = False
        End If
        If cboCus2No.Items.Count > 0 Then
            cboCus2No.Select()
        Else
            txtDeptH.Select()
        End If
    End Sub

    Private Sub txtFtyPrc_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtFtyPrc.TextChanged

    End Sub

    Private Sub txtItmNoTmp_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoTmp.LostFocus
        txtItmNo.Text = txtItmNoTmp.Text
        '        Call fillcboCusVen(txtItmNo.Text)
        '        Call fillcboDV(txtItmNo.Text)
        '        Call fillcboTV(txtItmNo.Text)
        '        Call fillcboFA(txtItmNo.Text)
        '        Call fillcboPVen(txtItmNo.Text)

    End Sub




    Private Sub fillcboPriCust()

         Dim dr() As DataRow
        '        If addFlag = True Then
        dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno >= '50000'")
        'Else
        'dr = rs_CUBASINF_P.Tables("RESULT").Select("")
        'End If

        If dr.Length > 0 Then
            cboCus1No.Items.Clear()

            For i As Integer = 0 To dr.Length - 1
                cboCus1No.Items.Add(dr(i).Item("cbi_cusno") & " - " & dr(i).Item("cbi_cussna"))
            Next
        End If

    End Sub

    Private Sub cboCoCde_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCoCde.SelectedIndexChanged
        gspStr = "sp_select_CUBASINF_P '" & cboCoCde.Text & "','Primary'"
        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        rtnLong = execute_SQLStatement(gspStr, rs_CUBASINF_P, rtnStr)
        gspStr = ""
        Me.Cursor = Windows.Forms.Cursors.Default
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading QUM00001  sp_select_CUBASINF_P : " & rtnStr)
            Exit Sub
        End If


        Call fillcboPriCust()

    End Sub

    Private Sub txtItmNoReal_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtItmNoReal.LostFocus
        If txtItmNoReal.Text.Trim <> "" Then
            cmdBrowse.Enabled = True
        Else
            cmdBrowse.Enabled = False
        End If

    End Sub


    Private Sub format_cboPanCPTranTerm()
        Dim i As Integer
        cboTranTrm.Items.Clear()
        cboTranTrm.Items.Add("")
        Dim dr() As DataRow = rs_SYSETINF.Tables("RESULT").Select("ysi_typ = '30'")
        For i = 0 To dr.Length - 1
            cboTranTrm.Items.Add(dr(i).Item("ysi_cde").ToString)
        Next i
    End Sub

    Private Sub format_cboUM()
        Dim i As Integer
        cboUM.Items.Clear()
        cboUM.Items.Add("")
        Dim dr() As DataRow = rs_SYSETINF.Tables("RESULT").Select("ysi_typ = '05'")
        For i = 0 To dr.Length - 1
            cboUM.Items.Add(dr(i).Item("ysi_cde").ToString)
        Next i
    End Sub

    Private Sub format_cboHKPRCTerm()
        Dim i As Integer
        cboDtlPrcTrm.Items.Clear()
        cboDtlPrcTrm.Items.Add("")
        Dim dr() As DataRow = rs_SYSETINF.Tables("RESULT").Select("ysi_typ = '03'")
        For i = 0 To dr.Length - 1
            cboDtlPrcTrm.Items.Add(dr(i).Item("ysi_cde").ToString)
        Next i
    End Sub

    Private Sub format_cboFTYPRCTerm()
        Dim i As Integer
        cboFtyPrcTrm.Items.Clear()
        cboFtyPrcTrm.Items.Add("")
        Dim dr() As DataRow = rs_SYSETINF.Tables("RESULT").Select("ysi_typ = '03'")
        For i = 0 To dr.Length - 1
            cboFtyPrcTrm.Items.Add(dr(i).Item("ysi_cde").ToString)
        Next i
    End Sub

    Private Sub format_cboThreeTerms()

        gspStr = "sp_select_CUCALFML '','" & Split(cboCus1No.Text, "-")(0) & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_CUCALFML, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading func_ReadRecordset sp_select_CUCALFML :" & rtnStr)
            Exit Sub
        End If

        Dim tmp_item_found As Boolean

        tmp_item_found = False
        Dim i As Integer
        cboTranTrm.Items.Clear()
        cboTranTrm.Items.Add("")
        For i = 0 To rs_CUCALFML.Tables("RESULT").Rows.Count - 1
            For j As Integer = 0 To i - 1
                If rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_trantrm").ToString = _
                rs_CUCALFML.Tables("RESULT").Rows(j).Item("ccf_trantrm").ToString Then
                    tmp_item_found = True
                End If
            Next
            If tmp_item_found = False Then
                cboTranTrm.Items.Add(rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_trantrm").ToString)
            End If
            tmp_item_found = False
        Next i

        cboDtlPrcTrm.Items.Clear()
        cboDtlPrcTrm.Items.Add("")
        For i = 0 To rs_CUCALFML.Tables("RESULT").Rows.Count - 1
            For j As Integer = 0 To i - 1
                If rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_prctrm").ToString = _
                rs_CUCALFML.Tables("RESULT").Rows(j).Item("ccf_prctrm").ToString Then
                    tmp_item_found = True
                End If
            Next
            If tmp_item_found = False Then
                cboDtlPrcTrm.Items.Add(rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_prctrm").ToString)
            End If
            tmp_item_found = False

        Next i


        cboFtyPrcTrm.Items.Clear()
        cboFtyPrcTrm.Items.Add("")
        For i = 0 To rs_CUCALFML.Tables("RESULT").Rows.Count - 1
            For j As Integer = 0 To i - 1
                If rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_prctrm").ToString = _
                rs_CUCALFML.Tables("RESULT").Rows(j).Item("ccf_prctrm").ToString Then
                    tmp_item_found = True
                End If
            Next
            If tmp_item_found = False Then
                cboFtyPrcTrm.Items.Add(rs_CUCALFML.Tables("RESULT").Rows(i).Item("ccf_prctrm").ToString)
            End If
            tmp_item_found = False
        Next i

    End Sub




    Private Sub GetAllDisplay(ByVal fv As Control)
        'Dim v As Control
        'Dim i As Integer

        'For i = 0 To 99
        '    cmd_enable(i) = 0
        'Next

        'i = 0

        'For Each v In fv.Controls

        '    If TypeOf v Is Button Then

        '        If v.Enabled = True Then
        '            cmd_enable(i) = 1
        '        End If

        '        i = i + 1
        '    End If

        'Next v

    End Sub


    Private Sub SetAllDisplay(ByVal fv As Control)
        'Dim v As Control
        'Dim i As Integer

        'i = 0
        'For Each v In fv.Controls

        '    If TypeOf v Is Button Then

        '        If cmd_enable(i) = 1 Then
        '            v.Enabled = True
        '        Else
        '            v.Enabled = False
        '        End If

        '        i = i + 1
        '    End If

        'Next v

    End Sub





    Private Sub setStatus_dgOthDtl(ByVal Mode As String)
        If Mode = cModeInit Then
            dgOthDtl.DataSource = Nothing
        ElseIf Mode = cModeAdd Then

            With dgOthDtl
                '''***)
                For i As Integer = 0 To .ColumnCount - 1
                    .Columns(i).ReadOnly = False
                Next

                .Columns(dgOthDtl_qud_cussub).ReadOnly = True
                .Columns(dgOthDtl_qud_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_qutno).ReadOnly = True
                .Columns(dgOthDtl_qud_qutno).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus1no).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_cus1no).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qpe_cus1sp).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus1dp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1no).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1sp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2sp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1dp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2dp).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpqty).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpunt).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpprc).ReadOnly = True
                .Columns(dgOthDtl_qud_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qud_curcde).ReadOnly = True
                .Columns(dgOthDtl_qpe_curcde).ReadOnly = True
                .Columns(dgOthDtl_qud_qutseq).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnovenno).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnoven).ReadOnly = True
                .Columns(dgOthDtl_qud_colcde).ReadOnly = True
                '.Columns(dgOthDtl_qud_coldsc).ReadOnly = True
                .Columns(dgOthDtl_qud_untcde).ReadOnly = True
                .Columns(dgOthDtl_qud_inrqty).ReadOnly = True
                .Columns(dgOthDtl_qud_mtrqty).ReadOnly = True
                .Columns(dgOthDtl_qud_cft).ReadOnly = True
                .Columns(dgOthDtl_qud_cbm).ReadOnly = True
                .Columns(dgOthDtl_qpe_cft).ReadOnly = True
                .Columns(dgOthDtl_qpe_cbm).ReadOnly = True

                '.Columns(dgOthDtl_qud_moq).ReadOnly = True
                .Columns(dgOthDtl_qud_moqunttyp).ReadOnly = True
                .Columns(dgOthDtl_qud_moa).ReadOnly = True
                .Columns(dgOthDtl_qud_moflag).ReadOnly = True
                .Columns(dgOthDtl_qud_orgmoq).ReadOnly = True
                .Columns(dgOthDtl_qud_orgmoa).ReadOnly = True
                .Columns(dgOthDtl_qud_itmsts).ReadOnly = True
                .Columns(dgOthDtl_qud_qutitmsts).ReadOnly = True
                .Columns(dgOthDtl_qud_basprc).ReadOnly = True
                .Columns(dgOthDtl_qpe_basprc).ReadOnly = True
                .Columns(dgOthDtl_qud_dtyrat).ReadOnly = True
                .Columns(dgOthDtl_qud_subcde).ReadOnly = True
                .Columns(dgOthDtl_qud_venitm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftyprc).ReadOnly = True
                .Columns(dgOthDtl_qud_ftycst).ReadOnly = True
                .Columns(dgOthDtl_qud_image).ReadOnly = True
                .Columns(dgOthDtl_qud_imgpth).ReadOnly = True
                .Columns(dgOthDtl_qud_cosmth).ReadOnly = True
                .Columns(dgOthDtl_CIHCURR).ReadOnly = True
                .Columns(dgOthDtl_CIHAMT).ReadOnly = True
                .Columns(dgOthDtl_qud_upc).ReadOnly = True
                .Columns(dgOthDtl_qud_alsitmno).ReadOnly = True
                .Columns(dgOthDtl_qud_alscolcde).ReadOnly = True
                .Columns(dgOthDtl_qud_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftyprctrm).ReadOnly = True
                .Columns(dgOthDtl_qud_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_ftyprctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qud_itmno).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnoreal).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnotmp).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnoven).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnovenno).ReadOnly = True
                .Columns(dgOthDtl_qud_colcde).ReadOnly = True
                '.Columns(dgOthDtl_qud_coldsc).ReadOnly = True
                '.Columns(dgOthDtl_qud_cuscol).ReadOnly = True
                .Columns(dgOthDtl_qud_pckseq).ReadOnly = True
                .Columns(dgOthDtl_qud_venno).ReadOnly = True
                .Columns(dgOthDtl_qud_venitm).ReadOnly = True
                .Columns(dgOthDtl_qud_fcurcde).ReadOnly = True
                .Columns(dgOthDtl_qpe_fcurcde).ReadOnly = True
                .Columns(dgOthDtl_qud_conftr).ReadOnly = True
                .Columns(dgOthDtl_qud_ftytmpitm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftytmpitmno).ReadOnly = True
                .Columns(dgOthDtl_qud_packterm).ReadOnly = True
                .Columns(dgOthDtl_qud_qutdat).ReadOnly = True
                .Columns(dgOthDtl_qud_prcsec).ReadOnly = True
                .Columns(dgOthDtl_qud_effdat).ReadOnly = True
                .Columns(dgOthDtl_qud_expdat).ReadOnly = True

                .Columns(dgOthDtl_qpe_cushcstbufper).ReadOnly = True
                .Columns(dgOthDtl_qpe_othdisper).ReadOnly = True
                .Columns(dgOthDtl_qpe_upsper).ReadOnly = True
                .Columns(dgOthDtl_qpe_labper).ReadOnly = True
                .Columns(dgOthDtl_qpe_faper).ReadOnly = True
                .Columns(dgOthDtl_qpe_pliper).ReadOnly = True
                .Columns(dgOthDtl_qpe_dmdper).ReadOnly = True
                .Columns(dgOthDtl_qpe_rbtper).ReadOnly = True
                .Columns(dgOthDtl_qpe_stdprc).ReadOnly = True

                If cboCus2No.Text.Trim = "" Then
                    .Columns(dgOthDtl_qud_grsmgn).ReadOnly = True
                End If
 

            End With

        ElseIf Mode = cModeUpd Then
            With dgOthDtl
                '''***)
                For i As Integer = 0 To .ColumnCount - 1
                    .Columns(i).ReadOnly = False
                Next

                .Columns(dgOthDtl_qud_alsitmno).ReadOnly = True
                .Columns(dgOthDtl_qud_qutno).ReadOnly = True
                .Columns(dgOthDtl_qud_qutseq).ReadOnly = True
                .Columns(dgOthDtl_qpe_qutno).ReadOnly = True
                .Columns(dgOthDtl_qpe_qutseq).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus1no).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_cus1no).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qpe_cus1sp).ReadOnly = True
                '.Columns(dgOthDtl_qpe_cus1dp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1no).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2no).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1sp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2sp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus1dp).ReadOnly = True
                .Columns(dgOthDtl_qud_cus2dp).ReadOnly = True
                .Columns(dgOthDtl_qud_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftyprctrm).ReadOnly = True
                .Columns(dgOthDtl_qud_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_ftyprctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_trantrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_prctrm).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_trantrm).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpqty).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpunt).ReadOnly = True
                '.Columns(dgOthDtl_qud_smpprc).ReadOnly = True
                .Columns(dgOthDtl_qud_curcde).ReadOnly = True
                .Columns(dgOthDtl_qpe_curcde).ReadOnly = True
                .Columns(dgOthDtl_qud_itmno).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnoreal).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnotmp).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnoven).ReadOnly = True
                .Columns(dgOthDtl_qud_itmnovenno).ReadOnly = True
                '.Columns(dgOthDtl_qud_colcde).ReadOnly = True
                '.Columns(dgOthDtl_qud_coldsc).ReadOnly = True
                .Columns(dgOthDtl_qud_alscolcde).ReadOnly = True
                '.Columns(dgOthDtl_qud_cuscol).ReadOnly = True
                .Columns(dgOthDtl_qud_pckseq).ReadOnly = True
                .Columns(dgOthDtl_qud_untcde).ReadOnly = True
                .Columns(dgOthDtl_qud_inrqty).ReadOnly = True
                .Columns(dgOthDtl_qud_mtrqty).ReadOnly = True
                .Columns(dgOthDtl_qpe_cft).ReadOnly = True
                .Columns(dgOthDtl_qpe_cbm).ReadOnly = True
                .Columns(dgOthDtl_qud_cft).ReadOnly = True
                .Columns(dgOthDtl_qud_cbm).ReadOnly = True
                .Columns(dgOthDtl_qud_effdat).ReadOnly = True
                .Columns(dgOthDtl_qud_expdat).ReadOnly = True
                 

                '.Columns(dgOthDtl_qud_moq).ReadOnly = True
                .Columns(dgOthDtl_qud_moqunttyp).ReadOnly = True
                .Columns(dgOthDtl_qud_moa).ReadOnly = True
                .Columns(dgOthDtl_qud_moflag).ReadOnly = True
                .Columns(dgOthDtl_qud_orgmoq).ReadOnly = True
                .Columns(dgOthDtl_qud_orgmoa).ReadOnly = True
                .Columns(dgOthDtl_qud_itmsts).ReadOnly = True
                .Columns(dgOthDtl_qud_qutitmsts).ReadOnly = True
                .Columns(dgOthDtl_qud_dtyrat).ReadOnly = True
                .Columns(dgOthDtl_qud_venno).ReadOnly = True
                .Columns(dgOthDtl_qpe_fml_venno).ReadOnly = True
                .Columns(dgOthDtl_qud_subcde).ReadOnly = True
                .Columns(dgOthDtl_qud_venitm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftyprc).ReadOnly = True
                .Columns(dgOthDtl_qud_ftycst).ReadOnly = True
                .Columns(dgOthDtl_qud_fcurcde).ReadOnly = True
                .Columns(dgOthDtl_qpe_fcurcde).ReadOnly = True
                .Columns(dgOthDtl_qpe_ftycst).ReadOnly = True
                .Columns(dgOthDtl_qpe_ftyprc).ReadOnly = True
                .Columns(dgOthDtl_qud_image).ReadOnly = True
                .Columns(dgOthDtl_qud_imgpth).ReadOnly = True
                .Columns(dgOthDtl_qud_cosmth).ReadOnly = True
                .Columns(dgOthDtl_CIHCURR).ReadOnly = True
                .Columns(dgOthDtl_CIHAMT).ReadOnly = True
                .Columns(dgOthDtl_qud_conftr).ReadOnly = True
                .Columns(dgOthDtl_qud_basprc).ReadOnly = True
                .Columns(dgOthDtl_qpe_basprc).ReadOnly = True
                .Columns(dgOthDtl_qud_ftytmpitm).ReadOnly = True
                .Columns(dgOthDtl_qud_ftytmpitmno).ReadOnly = True
                .Columns(dgOthDtl_qud_upc).ReadOnly = True
                .Columns(dgOthDtl_qud_packterm).ReadOnly = True
                .Columns(dgOthDtl_qud_qutdat).ReadOnly = True
                .Columns(dgOthDtl_qud_prcsec).ReadOnly = True
                .Columns(dgOthDtl_qud_smpprc).ReadOnly = True

                .Columns(dgOthDtl_qpe_cushcstbufper).ReadOnly = True
                .Columns(dgOthDtl_qpe_othdisper).ReadOnly = True
                .Columns(dgOthDtl_qpe_upsper).ReadOnly = True
                .Columns(dgOthDtl_qpe_labper).ReadOnly = True
                .Columns(dgOthDtl_qpe_faper).ReadOnly = True
                .Columns(dgOthDtl_qpe_pliper).ReadOnly = True
                .Columns(dgOthDtl_qpe_dmdper).ReadOnly = True
                .Columns(dgOthDtl_qpe_rbtper).ReadOnly = True
                .Columns(dgOthDtl_qpe_stdprc).ReadOnly = True

                If cboCus2No.Text.Trim = "" Then
                    .Columns(dgOthDtl_qud_grsmgn).ReadOnly = True
                End If
            End With


        ElseIf Mode = cModeSave Then
        ElseIf Mode = cModeDel Then
            dgOthDtl.DataSource = Nothing
        ElseIf Mode = cModeClear Then
            dgOthDtl.DataSource = Nothing
        End If

        'check qut sts  
        If Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "E" Or _
    Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "H" Or _
    Microsoft.VisualBasic.Left(txtQutSts.Text, 1) = "C" Then
            With dgOthDtl
                For i As Integer = 0 To .ColumnCount - 1
                    .Columns(i).ReadOnly = True
                Next
            End With
        End If

    End Sub

    Private Sub dgOthDtl_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgOthDtl.CellEndEdit

    End Sub

    Private Sub dgOthDtl_CellValidating(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellValidatingEventArgs) Handles dgOthDtl.CellValidating
        Dim row As DataGridViewRow = dgOthDtl.CurrentRow
        Dim strNewVal As String

        strNewVal = row.Cells(e.ColumnIndex).EditedFormattedValue.ToString.Trim

        If row.Cells(e.ColumnIndex).IsInEditMode Then
            Select Case e.ColumnIndex
                Case dgOthDtl_qud_cft
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "CFT" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_cbm
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "CBM" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_grswgt
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Gross Weight" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_netwgt
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Net Weight" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_grsmgn
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Gross Margin" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_mu
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "GM/MU %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_cushcstbufper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Mark Up" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_othdisper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Other Discount" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_upsper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "UPS / Sampling (%)" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_labper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Lab Test (%)" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_faper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Factory Audit (%)" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_pliper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "PLI %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_dmdper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Defective Markdown %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_dmdper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Defective Markdown %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_rbtper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Rebate %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_comper
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Commission %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qpe_stdprc
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Pricing (Standard/Customer)" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_stkqty
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Sample Stock Qty" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_cusqty
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Sample Cust Qty" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_smpqty
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Sample Total Qty" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_rndsts
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Sample Stage" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_toqty
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "Total Qty" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_pmu
                    If Not IsNumeric(strNewVal) Then
                        MsgBox("Invalid Value of " & "PMU %" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                    'inner & master
                Case dgOthDtl_inner_in
                    If Not IsNumeric(Replace(Replace(strNewVal, "x", ""), ".", "")) Then
                        MsgBox("Invalid Value of " & "Inner(in) LxWxH" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_inner_cm
                    If Not IsNumeric(Replace(Replace(strNewVal, "x", ""), ".", "")) Then
                        MsgBox("Invalid Value of " & "Inner(cm) LxWxH" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_master_in
                    If Not IsNumeric(Replace(Replace(strNewVal, "x", ""), ".", "")) Then
                        MsgBox("Invalid Value of " & "Master(in) LxWxH" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_master_cm
                    If Not IsNumeric(Replace(Replace(strNewVal, "x", ""), ".", "")) Then
                        MsgBox("Invalid Value of " & "Master(cm) LxWxH" & " [not numeric]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                    'Date
                Case dgOthDtl_qud_effdat
                    If Not IsDate(strNewVal) Then
                        MsgBox("Invalid " & "Effective Date" & ", Date [MM/dd/yyyy]!")
                        e.Cancel = True
                        Exit Sub
                    End If
                Case dgOthDtl_qud_expdat
                    If Not IsDate(strNewVal) Then
                        MsgBox("Invalid " & "Expiry Date" & ", Date [MM/dd/yyyy]!")
                        e.Cancel = True
                        Exit Sub
                    End If
            End Select
        End If
    End Sub

    Private Sub comboBoxCell(ByVal dgv As DataGridView, ByVal typ As String)
        Dim cboCell As New DataGridViewComboBoxCell
        Dim iCol As Integer = dgv.CurrentCell.ColumnIndex
        Dim iRow As Integer = dgv.CurrentCell.RowIndex

        Dim row As DataGridViewRow = dgv.CurrentRow

        'dgv.Rows(iRow).Cells(iCol).ReadOnly = True

        Dim i As Integer

        Select Case typ

            Case "Vendor"
                cboCell.Items.Add("")
                For i = 0 To rs_VNBASINF.Tables("RESULT").Rows.Count - 1
                    cboCell.Items.Add(rs_VNBASINF.Tables("RESULT").Rows(i).Item("vbi_venno") & " - " & rs_VNBASINF.Tables("RESULT").Rows(i).Item("vbi_vensna"))
                Next i




        End Select

        'cboCell.DropDownWidth = 150
        cboCell.DisplayStyle = DataGridViewComboBoxDisplayStyle.ComboBox

        dgv.Rows(iRow).Cells(iCol) = cboCell
        dgv.Rows(iRow).Cells(iCol).ReadOnly = False

    End Sub

    Private Sub dgOthDtl_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgOthDtl.EditingControlShowing
        If dgOthDtl.RowCount = 0 Then
            Exit Sub
        End If

        e.CellStyle.BackColor = Color.White




        Select Case dgOthDtl.CurrentCell.ColumnIndex
            ''items to input
            Case dgOthDtl_qpe_mu, dgOthDtl_qpe_comper, dgOthDtl_qpe_cushcstbufper, dgOthDtl_qpe_othdisper, dgOthDtl_qpe_upsper, dgOthDtl_qpe_labper, dgOthDtl_qpe_faper, dgOthDtl_qpe_pliper, dgOthDtl_qpe_dmdper, dgOthDtl_qpe_rbtper, dgOthDtl_qpe_pkgper, dgOthDtl_qpe_icmper, dgOthDtl_qpe_cus1dp, _
                dgOthDtl_inner_in, dgOthDtl_inner_cm, dgOthDtl_master_in, dgOthDtl_master_cm

                Dim txtbox As TextBox = CType(e.Control, TextBox)
                If Not (txtbox Is Nothing) Then
                    AddHandler txtbox.KeyPress, AddressOf txt_dgOthDtl_KeyPress
                    AddHandler txtbox.TextChanged, AddressOf txt_dgOthDtl_TextChanged
                End If
                'Case dgOthDtl_qpe_prctrm, dgOthDtl_qpe_ftyprctrm
                '    If TypeOf (e.Control) Is DataGridViewComboBoxEditingControl Then
                '        Dim cboBox As ComboBox = CType(e.Control, ComboBox)
                '        If Not cboBox Is Nothing Then
                '            'RemoveHandler cboBox.SelectedIndexChanged, AddressOf cbo_dgOthDtl_SelectedIndexChanged
                '            'AddHandler cboBox.SelectedIndexChanged, AddressOf cbo_dgOthDtl_SelectedIndexChanged
                '        End If
                '    End If
        End Select

        If sMode = "UPDATE" Or sMode = "ADD" Then
            Recordstatus = True
            Dim CREUSR As String = dgOthDtl.Item(dgOthDtl_qud_creusr, dgOthDtl.CurrentCell.RowIndex).Value
            If CREUSR <> "~*ADD*~" And CREUSR <> "~*NEW*~" Then
                dgOthDtl.Item(dgOthDtl_qud_creusr, dgOthDtl.CurrentCell.RowIndex).Value = "~*UPD*~"
            End If
            'If rs_IMPRCINF.Tables("RESULT").Rows(dgOthDtl.CurrentCell.RowIndex).Item("qpe_creusr") <> "~*ADD*~" Then
            '    rs_IMPRCINF.Tables("RESULT").Rows(dgOthDtl.CurrentCell.RowIndex).Item("qpe_creusr") = "~*UPD*~"
            'End If
        End If
    End Sub

    Private Sub txt_dgOthDtl_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)


        Dim iRow As Integer = dgOthDtl.CurrentCell.RowIndex
        Dim iCol As Integer = dgOthDtl.CurrentCell.ColumnIndex

        Dim curvalue As String = dgOthDtl.CurrentCell.EditedFormattedValue


        Select Case dgOthDtl.CurrentCell.ColumnIndex
            Case dgOthDtl_qpe_mu, dgOthDtl_qpe_comper, dgOthDtl_qpe_cushcstbufper, dgOthDtl_qpe_othdisper, dgOthDtl_qpe_upsper, dgOthDtl_qpe_labper, dgOthDtl_qpe_faper, dgOthDtl_qpe_pliper, dgOthDtl_qpe_dmdper, dgOthDtl_qpe_rbtper, dgOthDtl_qpe_cus1dp

                ' Check Numeric
                If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
                    e.KeyChar = ""
                Else
                    If curvalue.IndexOf(".") > 0 And e.KeyChar.ToString() = "." Then
                        e.KeyChar = ""
                    End If
                End If



                flag_dgOthDtl_keypress = True

        End Select


        Select Case dgOthDtl.CurrentCell.ColumnIndex
            Case dgOthDtl_inner_in, dgOthDtl_inner_cm, dgOthDtl_master_in, dgOthDtl_master_cm
                If Not (e.KeyChar = vbBack Or e.KeyChar.ToString() = "x" Or e.KeyChar.ToString() = "." Or (e.KeyChar.ToString() >= "0" And e.KeyChar.ToString() <= "9")) Then
                    e.KeyChar = ""
                End If
                flag_dgOthDtl_keypress = True
        End Select

    End Sub

    Private Sub txt_dgOthDtl_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim iRow As Integer = dgOthDtl.CurrentCell.RowIndex
        Dim iCol As Integer = dgOthDtl.CurrentCell.ColumnIndex

        Dim curvalue As String = dgOthDtl.CurrentCell.EditedFormattedValue
        Dim i As Integer

        Select Case dgOthDtl.CurrentCell.ColumnIndex

            Case dgOthDtl_qpe_cus1dp
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qud_cus1dp") = curvalue
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_cus1dp") = curvalue
                flag_no_update_mu(sReadingIndexQ) = False
            Case dgOthDtl_qpe_mu
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_mu") = curvalue
                flag_no_update_mu(sReadingIndexQ) = False
            Case dgOthDtl_qpe_icmper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_icmper") = curvalue
            Case dgOthDtl_qpe_pkgper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_pkgper") = curvalue
            Case dgOthDtl_qpe_comper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_comper") = curvalue
            Case dgOthDtl_qpe_cushcstbufper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_cushcstbufper") = curvalue
            Case dgOthDtl_qpe_othdisper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_othdisper") = curvalue
            Case dgOthDtl_qpe_upsper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_upsper") = curvalue
            Case dgOthDtl_qpe_labper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_labper") = curvalue
            Case dgOthDtl_qpe_faper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_faper") = curvalue
            Case dgOthDtl_qpe_pliper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_pliper") = curvalue
            Case dgOthDtl_qpe_dmdper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_dmdper") = curvalue
            Case dgOthDtl_qpe_rbtper
                If curvalue = "" Or curvalue = "." Then
                    curvalue = "0"
                End If
                rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qpe_rbtper") = curvalue
        End Select
        If flag_dgOthDtl_keypress = True Then

            ''when prcemt chnage
            ''Call calculate_gbPandelCstEmt(rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qud_qutseq"))


            ''cft, cbm
            Select Case dgOthDtl.CurrentCell.ColumnIndex
                Case dgOthDtl_qpe_mu, dgOthDtl_qpe_icmper, dgOthDtl_qpe_pkgper
                    Call calculate_gbPandelCstEmt(rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qud_qutseq"))
                    '''20130830
                Case dgOthDtl_qpe_cus1dp
                    Call calculate_gbPandelCstEmt_adjprc(rs_QUOTNDTL.Tables("RESULT").Rows(iRow).Item("qud_qutseq"))
                Case dgOthDtl_qud_cft
                    If flag_dgOthDtl_keypress = True Then
                        flag_dgOthDtl_keypress = False
                        Dim cbm_value As Decimal
                        If IsNumeric(curvalue) Then
                            cbm_value = curvalue * CFT_CBM
                            dgOthDtl.Item(dgOthDtl_qud_cbm, iRow).Value = Decimal.Round(cbm_value, 4)
                        End If
                    End If
                Case dgOthDtl_qud_cbm
                    If flag_dgOthDtl_keypress = True Then
                        flag_dgOthDtl_keypress = False
                        Dim cft_value As Decimal
                        If IsNumeric(curvalue) Then
                            cft_value = curvalue * CBM_CFT
                            dgOthDtl.Item(dgOthDtl_qud_cft, iRow).Value = Decimal.Round(cft_value, 4)
                        End If
                    End If
                    'Case dgOthDtl_ipi_grswgt, dgOthDtl_ipi_netwgt
                    '    If flag_dgOthDtl_keypress = True Then
                    '        flag_dgOthDtl_keypress = False
                    '    End If
                Case dgOthDtl_inner_in, dgOthDtl_inner_cm, dgOthDtl_master_in, dgOthDtl_master_cm
                    If flag_dgOthDtl_keypress = True Then
                        flag_dgOthDtl_keypress = False

                        Dim tmpstrarry As String() = Split(curvalue, "x")
                        Dim validformat As Boolean
                        validformat = True
                        If tmpstrarry.Length <> 3 Then
                            validformat = False
                        End If
                        If validformat Then
                            For i = 0 To tmpstrarry.Length - 1
                                If Not IsNumeric(tmpstrarry(i)) Then
                                    validformat = False
                                End If
                            Next i
                        End If

                        If validformat Then
                            Dim resultstr As String
                            Dim tmpvalL As Decimal
                            Dim tmpvalW As Decimal
                            Dim tmpvalH As Decimal

                            resultstr = ""
                            tmpvalL = 0.0
                            tmpvalW = 0.0
                            tmpvalH = 0.0

                            tmpvalL = Split(curvalue, "x")(0)
                            tmpvalW = Split(curvalue, "x")(1)
                            tmpvalH = Split(curvalue, "x")(2)

                            Select Case dgOthDtl.CurrentCell.ColumnIndex
                                Case dgOthDtl_inner_in
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin") = tmpvalH

                                    tmpvalL = Decimal.Round(tmpvalL * In_CM, 4)
                                    tmpvalW = Decimal.Round(tmpvalW * In_CM, 4)
                                    tmpvalH = Decimal.Round(tmpvalH * In_CM, 4)

                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm") = tmpvalH

                                    resultstr = tmpvalL & "x" & tmpvalW & "x" & tmpvalH
                                    dgOthDtl.Item(dgOthDtl_inner_cm, iRow).Value = resultstr
                                Case dgOthDtl_inner_cm
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdcm") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwcm") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhcm") = tmpvalH

                                    tmpvalL = Decimal.Round(tmpvalL * CM_In, 4)
                                    tmpvalW = Decimal.Round(tmpvalW * CM_In, 4)
                                    tmpvalH = Decimal.Round(tmpvalH * CM_In, 4)

                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrdin") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrwin") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_inrhin") = tmpvalH

                                    resultstr = tmpvalL & "x" & tmpvalW & "x" & tmpvalH
                                    dgOthDtl.Item(dgOthDtl_inner_in, iRow).Value = resultstr
                                Case dgOthDtl_master_in
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin") = tmpvalH

                                    tmpvalL = Decimal.Round(tmpvalL * In_CM, 4)
                                    tmpvalW = Decimal.Round(tmpvalW * In_CM, 4)
                                    tmpvalH = Decimal.Round(tmpvalH * In_CM, 4)

                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm") = tmpvalH

                                    resultstr = tmpvalL & "x" & tmpvalW & "x" & tmpvalH
                                    dgOthDtl.Item(dgOthDtl_master_cm, iRow).Value = resultstr

                                    If IsNumeric(tmpvalL) And IsNumeric(tmpvalW) And IsNumeric(tmpvalH) Then
                                        Dim tmp_cbm As Decimal
                                        Dim tmp_cft As Decimal
                                        tmp_cbm = Decimal.Round(tmpvalL * tmpvalW * tmpvalH / 1000000, 4)
                                        tmp_cft = Decimal.Round(tmp_cbm * CBM_CFT, 4)
                                        dgOthDtl.Item(dgOthDtl_qud_cbm, iRow).Value = tmp_cbm
                                        dgOthDtl.Item(dgOthDtl_qud_cft, iRow).Value = tmp_cft
                                    End If
                                Case dgOthDtl_master_cm
                                    If IsNumeric(tmpvalL) And IsNumeric(tmpvalW) And IsNumeric(tmpvalH) Then
                                        Dim tmp_cbm As Decimal
                                        Dim tmp_cft As Decimal
                                        tmp_cbm = Decimal.Round(tmpvalL * tmpvalW * tmpvalH / 1000000, 4)
                                        tmp_cft = Decimal.Round(tmp_cbm * CBM_CFT, 4)
                                        dgOthDtl.Item(dgOthDtl_qud_cbm, iRow).Value = tmp_cbm
                                        dgOthDtl.Item(dgOthDtl_qud_cft, iRow).Value = tmp_cft
                                    End If

                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdcm") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwcm") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhcm") = tmpvalH
                                    tmpvalL = Decimal.Round(tmpvalL * CM_In, 4)
                                    tmpvalW = Decimal.Round(tmpvalW * CM_In, 4)
                                    tmpvalH = Decimal.Round(tmpvalH * CM_In, 4)
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrdin") = tmpvalL
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrwin") = tmpvalW
                                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_mtrhin") = tmpvalH

                                    resultstr = tmpvalL & "x" & tmpvalW & "x" & tmpvalH
                                    dgOthDtl.Item(dgOthDtl_master_in, iRow).Value = resultstr
                            End Select
                        End If

                        flag_dgOthDtl_keypress = False
                    End If
            End Select


            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else

                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If




            dgOthDtl.DataSource = rs_QUOTNDTL.Tables("RESULT").DefaultView

            dgOthDtl.Refresh()






        End If



        Dim qutseq As Integer

        ''reset detail page
        qutseq = dgOthDtl.Item(dgOthDtl_qud_qutseq, dgOthDtl.CurrentCell.RowIndex).Value


        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then

            'If txtItmNo.Text.Trim <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim Then
            txtItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno").ToString.Trim
            Call display_Detail(qutseq)
            ''Call txtItmNo_Press()

            'End If
        End If

    End Sub











    Private Sub txtItmNoTmp_Change()
        bIsShowPanels = True

        '''' Cursor = Cursors.WaitCursor

        Dim cus1no As String
        Dim cus2no As String

        If Trim(cboCus1No.Text) = "" Then
            cus1no = ""
        Else
            cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If Trim(cboCus2No.Text) = "" Then
            cus2no = ""
        Else
            cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If

    
        'case 3       -- temp field, IS REAL ITEM ONLY
        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q3  '" & txtItmNoTmp.Text.Trim & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            MsgBox("The item is a real item!")
            txtItmNoTmp.Text = ""
            txtItmNo.Text = ""
            txtItmNoReal.Text = ""

            ''Call txtItmNo_Press()
            Exit Sub
        End If


        'case 4 temp field,temp# with real #s
        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q '','" & txtItmNoTmp.Text.Trim & "','" & cus1no & "','" & cus2no & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            dgPanItmNoSelect.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView

            Call ShowGrdIMTMP_S()
            '            PanelItmNoSelect.Visible = True
            '           PanelItmNoSelect.BringToFront()
            PanelItmNoSelect.Visible = True
            PanelItmNoSelect.BringToFront()

            cmdItmNoConv.Enabled = True
            cmdItmNoConvVen.Enabled = False



        End If
    End Sub



    Private Sub txtItmNoReal_Change()
        bIsShowPanels = True

        '''' Cursor = Cursors.WaitCursor

        Dim cus1no As String
        Dim cus2no As String

        If Trim(cboCus1No.Text) = "" Then
            cus1no = ""
        Else
            cus1no = Trim(Split(cboCus1No.Text, "-")(0))
        End If

        If Trim(cboCus2No.Text) = "" Then
            cus2no = ""
        Else
            cus2no = Trim(Split(cboCus2No.Text, "-")(0))
        End If


        'case 1B       -- real# field, with temp item #
        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q1  '" & txtItmNoReal.Text.Trim & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then

            txtItmNoTmp.Text = rs_IMTMPREL.Tables("RESULT").Rows(0)("itr_tmpitm")

            Exit Sub
        Else
            txtItmNoTmp.Text = ""


        End If


        'case 2A       -- real# field, but is temp ITEM  (may  have real itm no too)
        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q4  '" & txtItmNoReal.Text.Trim & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            MsgBox("The item is a tempory item!")
            txtItmNoTmp.Text = ""
            txtItmNo.Text = ""
            txtItmNoReal.Text = ""

            ''Call txtItmNo_Press()
            Exit Sub
        End If


        'case 2B, real# field,but is temp# with real #s
        rs_IMTMPREL.Clear()

        gspStr = "sp_select_IMTMPREL_Q '','" & txtItmNoReal.Text.Trim & "','" & cus1no & "','" & cus2no & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_IMTMPREL, rtnStr)
        gspStr = ""

        '''' Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading cmdItmNoSelect_Click sp_select_IMTMPREL :" & rtnStr)
            Exit Sub
        End If

        For i As Integer = 0 To rs_IMTMPREL.Tables("RESULT").Columns.Count - 1
            rs_IMTMPREL.Tables("RESULT").Columns(i).ReadOnly = False
        Next i

        If rs_IMTMPREL.Tables("RESULT").Rows.Count >= 1 Then
            dgPanItmNoSelect.DataSource = rs_IMTMPREL.Tables("RESULT").DefaultView
            Call ShowGrdIMTMP_S()
            '            PanelItmNoSelect.Visible = True
            '           PanelItmNoSelect.BringToFront()
            PanelItmNoSelect.Visible = True
            PanelItmNoSelect.BringToFront()

            cmdItmNoConv.Enabled = True
            cmdItmNoConvVen.Enabled = False



        End If
    End Sub

    Sub set_qutsts()

        If rs_QUOTNHDR.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        If Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "C" Then
            txtQutSts.Text = "C - Cancel"

            Exit Sub
        End If


        'If flag_no_update_mu(sReadingIndexQ) = True Then
        '    Exit Sub
        'End If


        count_sts_E = 0
        count_sts_W = 0

        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                'check sts from dtl
                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts").ToString() = "E" Then
                    count_sts_E = count_sts_E + 1
                ElseIf Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "W" _
                    And rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_apprve") = "N" Then
                    count_sts_W = count_sts_W + 1
                Else
                End If

            Next

        End If


        If count_sts_E = rs_QUOTNDTL.Tables("RESULT").Rows.Count Then
            'E
            txtQutSts.Text = "E-Expiry"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "E"

        ElseIf count_sts_W > 0 Then
            'W
            txtQutSts.Text = "W-Wait for Approval"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "W"
            chkPC_hdr.Enabled = True

        Else
            'A
            txtQutSts.Text = "A-Active"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "A"
            chkPC_hdr.Enabled = True
        End If


        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
        End If

    End Sub

    Sub set_qutsts_after_approve_dtl()

        If rs_QUOTNHDR.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        If Microsoft.VisualBasic.Left(rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts").ToString, 1) = "C" Then
            txtQutSts.Text = "C - Cancel"

            Exit Sub
        End If




        count_sts_E = 0
        count_sts_W = 0

        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                'check sts from dtl
                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts").ToString() = "E" Then
                    count_sts_E = count_sts_E + 1
                ElseIf Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "W" _
                    And rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_apprve") <> "Y" Then
                    count_sts_W = count_sts_W + 1
                Else
                End If

            Next

        End If


        If count_sts_E = rs_QUOTNDTL.Tables("RESULT").Rows.Count Then
            'E
            txtQutSts.Text = "E-Expiry"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "E"

        ElseIf count_sts_W > 0 Then
            'W
            txtQutSts.Text = "W-Wait for Approval"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "W"
            chkPC_hdr.Enabled = True

        Else
            'A
            txtQutSts.Text = "A-Active"
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "A"
            chkPC_hdr.Enabled = True
        End If


        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
        End If

    End Sub


    Sub check_mu(ByVal loc As Integer)



        '1st check
        Call check_mu1()

        If flag_no_update_mu(sReadingIndexQ) = True Then
            Exit Sub
        End If

        If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If


        '2st check for mu
        If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > loc Then
            Exit Sub
        End If

        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu")) Then
            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin")) Then
                If Val(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu")) < Val(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mumin")) Then
                    rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_qutitmsts") = "W - Wait for Approval"
                    rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_apprve") = "N"

                    '''20140128
                    chkApproveDtl.Checked = False
                    chkApprove.Checked = False

                Else
                    '''20140124
                    ''' 
                    If rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_qutitmsts") <> "TBC" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_qutitmsts") = "A - Active"

                        '''20140128
                        rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_apprve") = ""
                        chkApproveDtl.Checked = False

                        'rs_QUOTNDTL.Tables("RESULT").Rows(loc)("qud_apprve") = "Y"

                    End If
                End If
            End If
        End If

        Call set_qutsts()


        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
        End If

        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts")


    End Sub
    Private Sub calculate_gbPandelCstEmt_adjprc(ByVal qutseq As Integer)
        Dim i As Integer
        i = 0

        Dim loc As Integer
        loc = -1

        For i = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
            If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_qutseq") = qutseq Then
                loc = i
            End If
        Next i

        If loc = -1 Then
            Exit Sub
        End If

        Dim calBasicPrice As Decimal

        'Dim calMarkup_Org As Decimal
        'Dim calMarkup_Usr As Decimal

        Dim calPckCstAmt As Decimal
        Dim calCommPer As Decimal
        Dim calCommAmt As Decimal

        Dim calCURounding As Integer

        Dim calAdjustedPrice As Decimal


        ' StdPrc = BP * MU Org = MU Prc Org + PckCst Amt * CommPer + CommAmt
        ' AdjPrc = BP * MU Usr = MU Prc Usr + PckCst Amt * CommPer + CommAmt
        calBasicPrice = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_basprc")
        calAdjustedPrice = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_cus1dp")

        calPckCstAmt = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_pkgper")
        calCommPer = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_comper")
        calCommAmt = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_icmper")

        calCURounding = cus1_rounding'temporary hard code : used in Standard Price and Adjusted Price

        '' ''1. Calculate Markup Price
        Dim resMarkupPrice As Decimal

        ' ''resMarkupPrice = (calAdjustedPrice * (1 - (calCommPer / 100))) - calPckCstAmt

        '' ''2. Calculate Markup %
        Dim resMarkup_Usr As Decimal

        'resMarkup_Usr = round((1 + calPckCstAmt - calBasicPrice / ((calAdjustedPrice - calCommAmt) * (1 - calCommPer / 100))), calCURounding)
        If calAdjustedPrice = 0 Then
            resMarkup_Usr = 0
            resMarkupPrice = 0
        Else
            If ((calAdjustedPrice - calCommAmt) * (1 - calCommPer / 100) - calPckCstAmt) <> 0 Then
                resMarkup_Usr = round(100 * (1 - calBasicPrice / ((calAdjustedPrice - calCommAmt) * (1 - calCommPer / 100) - calPckCstAmt)), calCURounding)
            End If


            If (1 - resMarkup_Usr / 100) <> 0 Then
                resMarkupPrice = round(calBasicPrice / (1 - resMarkup_Usr / 100), calCURounding)
            End If
        End If


            ' ''If resMarkupPrice = 0 Then
            ' ''    resMarkup_Usr = 0
            ' ''Else
            ' ''    resMarkup_Usr = round((1 - (calBasicPrice / resMarkupPrice)) * 100, 4)
            ' ''End If

            ''???
            ''        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = resMarkupPrice
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_muprc") = resMarkupPrice
        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qpe_mu") = resMarkup_Usr


        '4 Calculate Sample Price
        Dim strUM As String
        Dim samplePrice As Decimal
        Dim itmtyp As String
        Dim umftr As Decimal
        

        '20131017
        If cboCus2No.Text <> "" Then
            If optGM.Checked = True Then
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If

                If txtCus1Dp.Text = "" Then
                    txtCus2Dp.Text = Format(round(CDec(0) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                Else
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) / (1 - Val(txtGrsMgn.Text) / 100), txtInvRndP.Text), "###,###,##0.0000")
                End If
            Else
                If txtCus1Sp.Text = "" Then
                    txtCus2Sp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                Else
                    txtCus2Sp.Text = Format(round(CDec(IIf(txtCus1Sp.Text = "", 0, txtCus1Sp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                End If

                If txtCus1Dp.Text = "" Then
                    txtCus2Dp.Text = Format(round(CDec(0) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                Else
                    txtCus2Dp.Text = Format(round(CDec(IIf(txtCus1Dp.Text = "", 0, txtCus1Dp.Text)) * (1 + Val(IIf(txtGrsMgn.Text = "", 0, txtGrsMgn.Text)) / 100), IIf(txtInvRndP.Text = "", 0, txtInvRndP.Text)), "###,###,##0.0000")
                End If
            End If
        End If


        either_cus1dp_or_cus2dp = calAdjustedPrice
        If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then

            If optGM.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
            ElseIf optMU.Checked = True Then
                either_cus1dp_or_cus2dp = txtCus2Dp.Text
            End If
        End If


        strUM = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_untcde")
        gspStr = "sp_select_CUBASINF_Q '','" & strUM & "','Conversion'"
        rtnLong = execute_SQLStatement(gspStr, rs_SYCONFTR, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading calculate_gbPandelCstEmt sp_select_CUBASINF_Q :" & rtnStr)
            Exit Sub
        End If

        If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
            samplePrice = Format(round(either_cus1dp_or_cus2dp, calCURounding), "###,###,##0.000000")
        Else
            samplePrice = Format(round(either_cus1dp_or_cus2dp / rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value"), calCURounding), "###,###,##0.000000")
        End If

        itmtyp = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_itmtyp")
        ''
        umftr = 1

        If itmtyp = "ASS" Then
            If Not IsNumeric(rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr")) Then
                umftr = 1
            Else
                umftr = rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_conftr")
            End If

            samplePrice = Format(round(either_cus1dp_or_cus2dp / umftr, calCURounding), "###,###,##0.000000")
        End If

        rs_QUOTNDTL.Tables("RESULT").Rows(loc).Item("qud_smpprc") = samplePrice


    End Sub

    Private Sub display_qud_qutitmsts()
        For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1


            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "W" _
                    And rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_apprve") = "N" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts") = "W - Wait for Approval"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts")
            End If
            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "E" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts") = "E - Expiry"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts")
            End If
            If Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "A" _
                    Or rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_apprve") = "Y" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts") = "A - Active"
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts")
            End If


            If rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts") = "TBC" Then
                txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutitmsts")
            End If




        Next
    End Sub


    Private Sub display_qud_IM_period()
        Dim test_str As String
        Dim test_DateTime As Date

        For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1

            If IsDate(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutdat")) Then

                test_str = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutdat")
                test_DateTime = DateTime.Parse(test_str)

                rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutdat") = Microsoft.VisualBasic.Left(test_DateTime.ToString("yyyy-MM-dd"), 7)
            End If

        Next
    End Sub
    Sub check_mu1()
        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cushcstbufper")) < Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_subttlper")) - Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_mu")) Then
            txtCus1DpP.ForeColor = Color.Red
            txtCus1Dp.ForeColor = Color.Red
        Else
            txtCus1DpP.ForeColor = Color.Black
            txtCus1Dp.ForeColor = Color.Black


        End If

    End Sub

    Private Sub chkCancel_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCancel.CheckedChanged

        If chkCancel.Checked = True Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "C - Cancel"
        Else
            rs_QUOTNHDR.Tables("RESULT").Rows(0)("quh_qutsts") = "W - Wait for Approval"
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
            rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
        End If


        Call linked_tentative()
        

        Recordstatus = True

    End Sub

    Private Sub reset_detail_readonly()

        chkDelete.Enabled = True
        chkDelete.Visible = True

        txtItmDsc.Enabled = False
        cboCusals.Enabled = False
        cboCusals.Enabled = False
        txtCusItm.Enabled = False
        txtAlias.Enabled = False
        txtUPC.Enabled = False
        txtDept.Enabled = False

        txtColCde.Enabled = False
        txtColDsc.Enabled = False
        txtAlscolcde.Enabled = False
        txtCusCol.Enabled = False

        cboPcking.Enabled = False
        cboPcking.Enabled = False

        cboUM.Enabled = False
        txtInrQty.Enabled = False
        txtMtrQty.Enabled = False
        txtCft.Enabled = False
        txtCBM.Enabled = False
        cboFtyPrcTrm.Enabled = False
        cboDtlPrcTrm.Enabled = False
        cboTranTrm.Enabled = False

        cboPcking.Enabled = False
        cboPcking.Enabled = False

        txtMoq.Enabled = False

        chkPC.Checked = False

        txtInrdin.Enabled = False
        txtInrhin.Enabled = False
        txtInrwin.Enabled = False
        txtMtrdin.Enabled = False
        txtMtrhin.Enabled = False
        txtMtrwin.Enabled = False

        txtInrdcm.Enabled = False
        txtInrhcm.Enabled = False
        txtInrwcm.Enabled = False
        txtMtrdcm.Enabled = False
        txtMtrhcm.Enabled = False
        txtMtrwcm.Enabled = False

        txtGrswgt.Enabled = False
        txtNetwgt.Enabled = False

        txtPckItr.Enabled = False

        txtIMRmk.Enabled = False
        txtNote.Enabled = False

        txtFCurCde.Enabled = False
        txtFtyPrc.Enabled = False

        txtMU.Enabled = False
        txtPckCstAmt.Enabled = False
        txtItmCommAmt.Enabled = False
        txtCus1Dp.Enabled = False
        txtBasPrc.Enabled = False

        txtPrcKey.Enabled = False
        txtEffDat.Enabled = False
        txtExpDat.Enabled = False
        txtPeriod.Enabled = False

        cboDV.Enabled = False
        cboVenNo.Enabled = False
        cboCusVen.Enabled = False
        cboTV.Enabled = False
        cboFA.Enabled = False

        txtCosMth.Enabled = False
        cboHrmCde.Enabled = False
        cboCusUsdCurr.Enabled = False
        txtCusUsd.Enabled = False
        cboCusCadCurr.Enabled = False
        txtCusCad.Enabled = False

        txtStkQty.Enabled = False
        txtCusQty.Enabled = False
        txtSmpQty.Enabled = False

        txtDtyRat.Enabled = False

        cboTOFty.Enabled = False
        txtTOOrdQty.Enabled = False
        txtTOShipport.Enabled = False
        txtTORemark.Enabled = False
        txtDTLFtyShpDateStr.Enabled = False
        txtDTLFtyShpDateEnd.Enabled = False
        txtDTLCustShpDateStr.Enabled = False
        txtDTLCustShpDateEnd.Enabled = False



    End Sub


    Private Sub PanelItmNoSelect_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs)

    End Sub

    Private Sub cmdReset_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)

    End Sub

    Sub cal_cbm_cft(ByVal text_in_cm As String, ByVal incm_l As String, ByVal incm_w As String, ByVal incm_h As String)
        Dim resultstr As String
        Dim tmpvalL As Decimal
        Dim tmpvalW As Decimal
        Dim tmpvalH As Decimal

        If Not (txtItmNoReal.Text.Trim = "" And txtItmNoTmp.Text.Trim = "") Then
            Exit Sub
        End If


        resultstr = ""
        tmpvalL = 0
        tmpvalW = 0
        tmpvalH = 0

        If IsNumeric(incm_l) Then
            tmpvalL = CDec(incm_l)
        End If

        If IsNumeric(incm_w) Then
            tmpvalW = CDec(incm_w)
        End If

        If IsNumeric(incm_h) Then
            tmpvalH = CDec(incm_h)
        End If

        Select Case text_in_cm
            'Case "i_in"

            '    tmpvalL = Decimal.Round(tmpvalL * In_CM, 4)
            '    tmpvalW = Decimal.Round(tmpvalW * In_CM, 4)
            '    tmpvalH = Decimal.Round(tmpvalH * In_CM, 4)

            '    txtInrdcm.Text = tmpvalL
            '    txtInrwcm.Text = tmpvalW
            '    txtInrhcm.Text = tmpvalH


            'Case "i_cm"

            '    tmpvalL = Decimal.Round(tmpvalL * CM_In, 4)
            '    tmpvalW = Decimal.Round(tmpvalW * CM_In, 4)
            '    tmpvalH = Decimal.Round(tmpvalH * CM_In, 4)

            '    txtInrdin.Text = tmpvalL
            '    txtInrwin.Text = tmpvalW
            '    txtInrhin.Text = tmpvalH

            Case "m_in"
                tmpvalL = Decimal.Round(tmpvalL * In_CM, 4)
                tmpvalW = Decimal.Round(tmpvalW * In_CM, 4)
                tmpvalH = Decimal.Round(tmpvalH * In_CM, 4)

                'txtMtrdcm.Text = tmpvalL
                'txtMtrwcm.Text = tmpvalW
                'txtMtrhcm.Text = tmpvalH


                If IsNumeric(tmpvalL) And IsNumeric(tmpvalW) And IsNumeric(tmpvalH) Then
                    Dim tmp_cbm As Decimal
                    Dim tmp_cft As Decimal

                    ''&&
                    tmp_cbm = Decimal.Round(tmpvalL * tmpvalW * tmpvalH / 1000000, 4)
                    tmp_cft = Decimal.Round(tmp_cbm * CBM_CFT, 4)
                    txtCBM.Text = tmp_cbm
                    txtCft.Text = tmp_cft

                End If
            Case "m_cm"

                'tmpvalL = Decimal.Round(tmpvalL * CM_In, 4)
                'tmpvalW = Decimal.Round(tmpvalW * CM_In, 4)
                'tmpvalH = Decimal.Round(tmpvalH * CM_In, 4)

                'txtMtrdin.Text = tmpvalL
                'txtMtrwin.Text = tmpvalW
                'txtMtrhin.Text = tmpvalH


                If IsNumeric(tmpvalL) And IsNumeric(tmpvalW) And IsNumeric(tmpvalH) Then
                    Dim tmp_cbm As Decimal
                    Dim tmp_cft As Decimal
                    ''&&
                    tmp_cbm = Decimal.Round(tmpvalL * tmpvalW * tmpvalH / 1000000, 4)
                    tmp_cft = Decimal.Round(tmp_cbm * CBM_CFT, 4)
                    txtCBM.Text = tmp_cbm
                    txtCft.Text = tmp_cft
                End If
        End Select

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_in") = Format(CDec(IIf(txtInrdin.Text.Trim = "", 0, txtInrdin.Text.Trim)), "######0.####") + "x" + _
                                        Format(CDec(IIf(txtInrwin.Text.Trim = "", 0, txtInrwin.Text.Trim)), "######0.####") + "x" + _
                                        Format(CDec(IIf(txtInrhin.Text.Trim = "", 0, txtInrhin.Text.Trim)), "######0.####")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_in") = Format(CDec(IIf(txtMtrdin.Text.Trim = "", 0, txtMtrdin.Text.Trim)), "######0.####") + "x" + _
                                         Format(CDec(IIf(txtMtrwin.Text.Trim = "", 0, txtMtrwin.Text.Trim)), "######0.####") + "x" + _
                                         Format(CDec(IIf(txtMtrhin.Text.Trim = "", 0, txtMtrhin.Text.Trim)), "######0.####")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("inner_cm") = Format(CDec(IIf(txtInrdcm.Text.Trim = "", 0, txtInrdcm.Text.Trim)), "######0.####") + "x" + _
                                        Format(CDec(IIf(txtInrwcm.Text.Trim = "", 0, txtInrwcm.Text.Trim)), "######0.####") + "x" + _
                                        Format(CDec(IIf(txtInrhcm.Text.Trim = "", 0, txtInrhcm.Text.Trim)), "######0.####")
        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("master_cm") = Format(CDec(IIf(txtMtrdcm.Text.Trim = "", 0, txtMtrdcm.Text.Trim)), "######0.####") + "x" + _
                                         Format(CDec(IIf(txtMtrwcm.Text.Trim = "", 0, txtMtrwcm.Text.Trim)), "######0.####") + "x" + _
                                         Format(CDec(IIf(txtMtrhcm.Text.Trim = "", 0, txtMtrhcm.Text.Trim)), "######0.####")

    End Sub

    Private Sub dgMutShp_CellContentClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgMutShp.CellContentClick
        If e.RowIndex >= 0 And e.ColumnIndex = 0 Then
            If rs_QUDTLSHP.Tables("RESULT").Rows(e.RowIndex)("Del").ToString = " " Or _
                rs_QUDTLSHP.Tables("RESULT").Rows(e.RowIndex)("Del").ToString = "" Then

                rs_QUDTLSHP.Tables("RESULT").Rows(e.RowIndex)("Del") = "Y"
            Else
                rs_QUDTLSHP.Tables("RESULT").Rows(e.RowIndex)("Del") = ""
            End If

            Recordstatus = True
        End If
    End Sub


    Private Sub dgMutShp_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgMutShp.CellEndEdit
        For index As Integer = 0 To rs_QUDTLSHP.Tables("RESULT").Rows.Count - 1
            If rs_QUDTLSHP.Tables("RESULT").Rows(index)("qds_creusr") <> "~*NEW*~" And rs_QUDTLSHP.Tables("RESULT").Rows(index)("qds_creusr") <> "~*ADD*~" Then
                rs_QUDTLSHP.Tables("RESULT").Rows(index)("qds_creusr") = "~*UPD*~"
            End If
            Recordstatus = True
        Next
    End Sub


    Private Function GetCusSty2(ByVal strItmNo As String, ByVal strCusno As String, ByVal index As Integer) As String
        '*** Show Customer Alias
        Dim rs As New DataSet

        ' Get Cust Style No. from CIH
        'S = "㊣CUITMSUM_Q※S※" & cus1no & "※" & _
        '    cus2no & "※" & _
        '    strItmNo & "※" & rs_ToBeCopy("qud_colcde").Value & "※" & rs_ToBeCopy("qud_untcde").Value & "※" & rs_ToBeCopy("qud_inrqty").Value & "※" & _
        '   rs_ToBeCopy("qud_mtrqty").Value & "※" & IIf(rs_ToBeCopy("qud_conftr").Value = "", 1, rs_ToBeCopy("qud_conftr").Value) & "※" & gsUsrID
        'rsTmp = objBSGate.Enquire(gsConnStr, "sp_general", S)

        Cursor = Cursors.WaitCursor

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        gspStr = "sp_select_CUITMHIS_Q '" & Trim(cboCoCde.Text) & "','" & _
                                           Trim(Split(cboCus1No.Text, "-")(0)) & "','" & _
                                            Trim(Split(cboCus2No.Text, "-")(0)) & "','" & _
                                            strItmNo & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_colcde") & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_untcde") & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_inrqty") & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_mtrqty") & "','" & _
                                            IIf(rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_conftr") = 0, 1, rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_conftr")) & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_ftyprctrm") & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_prctrm") & "','" & _
                                            rs_QUOTNDTL.Tables("RESULT").DefaultView(index)("qud_trantrm") & "','" & _
                                            gsUsrID & "'"
        rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
        gspStr = ""

        Cursor = Cursors.Default

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading GetCusSty2 sp_select_CUITMSUM_Q :" & rtnStr)
            GetCusSty2 = ""
            Exit Function
        End If

        If rs.Tables("RESULT").Rows.Count > 0 Then
            GetCusSty2 = IIf(Trim(rs.Tables("RESULT").Rows(0)("cis_cusstyno")) = "", "", rs.Tables("RESULT").Rows(0)("cis_cusstyno"))

            txtCusItm_Text = rs.Tables("RESULT").Rows(0)("cis_cusitm")

            txtcih_curcde_Text = rs.Tables("RESULT").Rows(0)("cis_curcde")
            txtcih_prc_Text = rs.Tables("RESULT").Rows(0)("cis_selprc")

        Else
            '' '' Get Cust Style No. from IM
            ' ''Dim rsCusals As New DataSet

            '' ''S = "㊣IMCUSSTY_QU※S※" & strItmNo & "※" & strCusno
            '' ''rsTmp = objBSGate.Enquire(gsConnStr, "sp_general", S)

            ' ''Cursor = Cursors.WaitCursor

            ' ''gsCompany = Trim(ma.copyQutCoCde)
            ' ''Call Update_gs_Value(gsCompany)

            ' ''gspStr = "sp_select_IMCUSSTY_QU '" & ma.copyQutCoCde & "','" & strItmNo & "','" & strCusno & "'"
            ' ''rtnLong = execute_SQLStatement(gspStr, rsCusals, rtnStr)
            ' ''gspStr = ""

            ' ''Cursor = Cursors.Default

            ' ''If rtnLong <> RC_SUCCESS Then
            ' ''    MsgBox("Error on loading GetCusSty2 sp_select_IMCUSSTY_QU :" & rtnStr)
            ' ''    GetCusSty2 = ""
            ' ''    Exit Function
            ' ''End If

            ' ''If rsCusals.Tables("RESULT").Rows.Count > 0 Then
            ' ''    GetCusSty2 = IIf(Trim(rsCusals.Tables("RESULT").Rows(0)("ics_cusstyno").ToString) = "", "", rsCusals.Tables("RESULT").Rows(0)("ics_cusstyno").ToString)
            ' ''Else
            ' ''    GetCusSty2 = ""
            ' ''End If
        End If
    End Function


    Private Sub fillcboSalRep(ByVal dr() As DataRow)
        If dr.Length > 0 Then
            cboSalRep.Items.Clear()
            For i As Integer = 0 To dr.Length - 1
                cboSalRep.Items.Add(dr(i).Item("dsc"))
            Next
            cboSalRep.Sorted = True
        End If
    End Sub

    Function found_pack_incbo(ByVal temp_pack_string As String)
        found_pack_incbo = False

        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean



        i = cboPcking.Items.Count
        If cboPcking.Items.Count > 0 Then
            For Y = 0 To i - 1
                If temp_pack_string = cboPcking.Items(Y).ToString Then
                    found_pack_incbo = True
                End If
            Next

        End If


    End Function


    Function mtr_times_inr()
        mtr_times_inr = True

        If Not (txtItmNoReal.Text.Trim = "" And txtItmNoTmp.Text.Trim = "") Then
            Exit Function
        End If

        If Val(txtInrQty.Text) = 0 Then
            Exit Function
        End If

        If Val(txtMtrQty.Text) / Val(txtInrQty.Text) - CInt(Val(txtMtrQty.Text) / Val(txtInrQty.Text)) <> 0 Then
            mtr_times_inr = False
        End If

    End Function


    Private Sub chkPC_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPC.CheckedChanged


    End Sub

    Private Sub dgOthDtl_CellContentClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgOthDtl.CellContentClick

    End Sub

    Private Sub cmdRenew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdRenew.Click
        If Recordstatus = True Then
            MsgBox("Please save the quotation, before renewing the items!")
            Exit Sub
        End If


        ' ''If rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
        ' ''    Exit Sub
        ' ''End If

        ' ''Dim index As Integer
        ''''''20130909
        '''''' 
        ' ''If MsgBox("Are you sure to Renew All old items?", vbQuestion + vbYesNo, "Question") = vbYes Then

        ' ''    Cursor = Cursors.WaitCursor
        ' ''    Dim qutseq As Integer
        ' ''    Dim temp_old_itmno As String

        ' ''    qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutseq")
        ' ''    temp_old_itmno = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")


        ' ''    For index = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1

        ' ''        qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutseq")
        ' ''        temp_old_itmno = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")

        ' ''        If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts")) Then
        ' ''            If (rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts").ToString().Substring(0, 3) = "OLD") Then
        ' ''                '''OldItemRecord = True

        ' ''                rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno") = get_new_itmno(temp_old_itmno)

        ' ''                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoreal").ToString.Trim <> "" Then
        ' ''                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoreal") = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                    txtItmNoReal.Text = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                End If
        ' ''                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotmp").ToString.Trim <> "" Then
        ' ''                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnotmp") = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                    txtItmNoTmp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                End If
        ' ''                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoven").ToString.Trim <> "" Then
        ' ''                    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmnoven") = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                    cboItmNoVen.text = rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmno")
        ' ''                End If

        ' ''                rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_alsitmno") = temp_old_itmno

        ' ''            End If
        ' ''        End If


        ' ''    Next index


        ' ''    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
        ' ''        txtItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
        ' ''        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal").ToString.Trim <> "" Then
        ' ''            txtItmNoReal.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
        ' ''        End If
        ' ''        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp").ToString.Trim <> "" Then
        ' ''            txtItmNoTmp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
        ' ''        End If
        ' ''        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven").ToString.Trim <> "" Then
        ' ''            cboItmNoVen.text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
        ' ''        End If
        ' ''    End If

        ' ''End If

        ' ''Call linked_tentative()

        ' ''MsgBox("Item(s) Renewed!")
        ' ''Cursor = Cursors.Default

        If not_in_Combo_DTL() = True Then
            Exit Sub
        End If

        Dim rs As New DataSet

        '' Cursor = Cursors.WaitCursor

        'gsCompany = Trim(cboCoCde.Text)
        'Call Update_gs_Value(gsCompany)

        'gspStr = "sp_list_QUOTNDTL_RnwItm '" & cboCoCde.Text & "','" & txtQutNo.Text & "','DTL'"
        'rtnLong = execute_SQLStatement(gspStr, rs, rtnStr)
        'gspStr = ""

        ' '' Cursor = Cursors.Default

        'If rtnLong <> RC_SUCCESS Then
        '    MsgBox("Error on loading cmdUpdate_Click sp_list_QUOTNDTL_RnwItm :" & rtnStr)
        '    Exit Sub
        'End If

        'If rs.Tables("RESULT").Rows.Count = 0 Then
        '    MsgBox("No Record Found!")
        '    Exit Sub
        'End If

        '        btcQUM00001.SelectedIndex = 4
        btcQUM00001.SelectedIndex = 0
        'flgRnwItm = True


        'Public RnwItm As frmQutRnwItm
        'Public RnwItm As frmRenewQuot


        RnwItm = New frmRenewQuot
        RnwItm.ma = Me

        RnwItm.ShowDialog()
        'frmQutRnwItm.Show(vbModal)

        'If rs_QUOTNDTL.Tables.Count > 0 Then
        '    If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
        '        sReadingIndexQ = 0
        '        no_Display_Detail = False
        '        'Call display_Detail()
        '        no_Display_Detail = True

        '        '*** Phase 2 comment it
        '        'Call cboCustItmCatPress()

        '        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd").ToString) > 0 Then
        '            txtCusUsd.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd"), "###,###,##0.0000")
        '        Else
        '            txtCusUsd.Text = ""
        '        End If
        '        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad").ToString) > 0 Then
        '            txtCusCad.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad"), "###,###,##0.0000")
        '        Else
        '            txtCusCad.Text = ""
        '        End If

        '        '*** Phase 2 comment it
        '        'Call CalculatePMU(txtCusUsd)
        '    End If
        'End If


        'Call linked_tentative()

        'flgRnwItm = False

    End Sub

    Private Sub cmdRenItm_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdRenItm.Click
        '''20130909
        ''' 

        If MsgBox("Are you sure to Renew this item?", vbQuestion + vbYesNo, "Question") = vbYes Then

            Cursor = Cursors.WaitCursor

            '''for check duplicate packing
            Dim qutseq As Integer
            Dim temp_old_itmno As String

            qutseq = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")
            temp_old_itmno = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")

            If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts")) Then
                If (rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmsts").ToString().Substring(0, 3) = "OLD") Then
                    '''OldItemRecord = True

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno") = get_new_itmno(temp_old_itmno)

                    txtItmNo.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")

                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal").ToString.Trim <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoreal") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                        txtItmNoReal.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                    End If
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp").ToString.Trim <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnotmp") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                        txtItmNoTmp.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                    End If
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven").ToString.Trim <> "" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmnoven") = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                        ''

                        ''cboItmNoVen.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_itmno")
                    End If

                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_alsitmno") = temp_old_itmno

                End If
            End If


            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
            End If

            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*NEW*~"
            Else
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_creusr") = "~*UPD*~"
            End If




            'obopacking
            'save

        End If

        Cursor = Cursors.Default

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"

        MsgBox("Item Renewed!")

    End Sub

    Function get_new_itmno(ByVal tmp_old_itmno As String)
        Dim tmp_new_itmno

        tmp_new_itmno = Replace(tmp_old_itmno, "-", "")

        If Mid(tmp_old_itmno, 3, 1) <> "A" Then
            tmp_new_itmno = Mid(tmp_old_itmno, 1, 2) & "A" & Mid(tmp_old_itmno, 4, IIf(Len(tmp_old_itmno) - 3 < 0, 0, Len(tmp_old_itmno) - 3))
        End If

        If Microsoft.VisualBasic.Left(tmp_old_itmno, 2) <> "01" Then
            tmp_new_itmno = tmp_new_itmno & "01"
        End If

    End Function

    Sub linked_tentative()
        'could be sub

        '       linked_tentative = False
        Dim temp_MsgBox As String

        Dim temp_t_num As String

        Dim rs_Result_t As New DataSet

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        temp_t_num = "T" & txtQutNo.Text
        gspStr = "sp_select_TOORDHDR '" & cboCoCde.Text & "','" & temp_t_num & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result_t, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading sp_select_TOORDHDR  :" & rtnStr)
            Exit Sub
        End If

        temp_MsgBox = ""
        If rs_Result_t.Tables("RESULT").Rows.Count > 0 Then
            '          linked_tentative = True
            temp_MsgBox = "The quoation has a linked tentative order " & temp_t_num & " !"
            MsgBox(temp_MsgBox)

        End If
        rs_Result_t = Nothing



        '''

        Dim temp_s_num As String

        Dim rs_Result_s As New DataSet

        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)

        temp_s_num = txtQutNo.Text.Trim
        gspStr = "sp_select_SampleTO_check  '" & cboCoCde.Text & "','" & temp_s_num & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result_s, rtnStr)
        gspStr = ""

        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading sp_select_SAREQDTL   :" & rtnStr)
            Exit Sub
        End If

        If rs_Result_s.Tables("RESULT").Rows.Count > 0 Then
            If rs_Result_s.Tables("RESULT").Rows(0).Item("checkflag_sample") = "Y" Then
                temp_MsgBox = temp_MsgBox & vbCrLf & " The quoation has a linked sample order  !"
                MsgBox(temp_MsgBox)

            End If
        End If




        rs_Result_s = Nothing


    End Sub


    Sub linked_sample()


    End Sub

      Private Sub chkApproveDtl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkApproveDtl.Click
        'If sender.focused Then
        If chkApproveDtl.Checked Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = "Y"
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts") = "A - Active"
            txtQutItmSts.Text = "A - Active"

            If txtItmNo.Text.Trim <> "" Then
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"
            End If

            ''chkApprove.Checked = True
        Else
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_apprve") = "N"
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("mode") = "UPD"

            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString = "N" Then
                    chkApprove.Checked = False
                    ''Exit Sub
                End If
            Next

            ''chkApprove.Checked = False
        End If
        'End If

        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
        End If


        txtQutItmSts.Text = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_qutitmsts")
        Recordstatus = True

        ''20130909


        Call set_qutsts()


    End Sub




    Private Sub chkApproveDtl_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles chkApproveDtl.KeyPress
        '20130909
        flag_no_update_mu(sReadingIndexQ) = False
    End Sub

    Private Sub txtCus1DpP_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtCus1DpP.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtCus1DpP_keypress = True
            flag_no_update_mu(sReadingIndexQ) = False
        End If
    End Sub

    Private Sub txtCus1Dp_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtCus1Dp.KeyDown
        If e.KeyCode = Keys.Delete Then
            flag_txtCus1Dp_keypress = True
            flag_no_update_mu(sReadingIndexQ) = False
        End If
    End Sub

    Private Sub gbPanelCstEmt_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles gbPanelCstEmt.Enter

    End Sub

    Private Sub PanelMutShp_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles PanelMutShp.Paint

    End Sub

    Private Sub txtCus1Dp_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1Dp.LostFocus
        If IsNumeric(txtCus1Dp.Text) = False Then
            txtCus1Dp.Text = "0"
        Else

            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()

            either_cus1dp_or_cus2dp = txtCus1Dp.Text
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If Not IsNumeric(txtCus2Dp.Text) Then
                    txtCus2Dp.Text = txtCus1Dp.Text
                End If
                If optGM.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                ElseIf optMU.Checked = True Then
                    either_cus1dp_or_cus2dp = txtCus2Dp.Text
                End If
            End If
            txtPCPrc.Text = either_cus1dp_or_cus2dp / umftr
            txtPCPrc_Text_round_5 = either_cus1dp_or_cus2dp / umftr

            txtPCPrc.Text = round(txtPCPrc.Text, cus1_rounding)
            txtPCPrcP.Text = txtPCPrc.Text
            txtPCPrcP_Text_round_5 = txtPCPrc_Text_round_5

            ''
            If cboCus2No.Text <> "" And Val(txtGrsMgn.Text) <> 0 Then
                If optGM.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim

                ElseIf optMU.Checked = True Then
                    ''
                    txtCus2Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus2Dp.Text = round(txtCus2Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus2dp") = txtCus2Dp.Text.Trim
                Else
                    txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                    
                    txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
                End If
            Else
                txtCus1Dp.Text = Format(txtPCPrc_Text_round_5 * umftr, "###,###,##0.0000")
                
                txtCus1Dp.Text = round(txtCus1Dp.Text, cus1_rounding)
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1Dp.Text.Trim
                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1Dp.Text.Trim
            End If




            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrc_Text_round_5
            '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1Dp.Text.Trim


        End If

    End Sub

    Private Sub txtCus1DpP_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCus1DpP.LostFocus
        If IsNumeric(txtCus1DpP.Text) = False Then
            txtCus1DpP.Text = "0"
        Else
            txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_Cus1Dp") = txtCus1DpP.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_Cus1Dp") = txtCus1DpP.Text.Trim



            Dim umftr As Decimal
            If Not IsNumeric(txtUMFtr.Text) Then
                umftr = 1
            Else
                umftr = txtUMFtr.Text
            End If

            If Val(txtUMFtr.Text) = 0 Then
                umftr = 1
            End If
            '''20140212
            umftr = get_umftr()



            txtPCPrcP.Text = txtCus1DpP.Text / umftr
            txtPCPrcP_Text_round_5 = txtCus1DpP.Text / umftr

            txtPCPrcP.Text = round(txtPCPrcP.Text, cus1_rounding)
            txtPCPrc.Text = txtPCPrcP.Text
            txtPCPrc_Text_round_5 = txtPCPrcP_Text_round_5

            'txtCus1DpP.Text = txtPCPrcP_Text_round_5 * umftr
            
            txtCus1DpP.Text = round(txtCus1DpP.Text, cus1_rounding)
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cus1dp") = txtCus1DpP.Text.Trim
            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qpe_cus1dp") = txtCus1DpP.Text.Trim

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtPCPrcP_Text_round_5
            '                rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_pcprc") = txtCus1DpP.Text.Trim


        End If


    End Sub
    Public Function Reverse_hyphen_one_two(ByVal temp_str As String)
        If InStr(temp_str, "-") > 1 Then
            Reverse_hyphen_one_two = Split(temp_str, "-")(1) & " - " & Split(temp_str, "-")(0)

        End If

    End Function

    Private Sub tpQUM00001_1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpQUM00001_1.Click

    End Sub

    Private Sub gbShipdate_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles gbShipdate.Enter

    End Sub

    Private Sub txtHDRFtyShpDateEnd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateEnd.GotFocus
        flag_txtHDRFtyShpDateEnd_GotFocus = True

    End Sub

    Private Sub txtHDRFtyShpDateEnd_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateEnd.LostFocus

        'Cu shipstartdate
        '1
        If IsDate(txtHDRFtyShpDateStr.Text.Trim) And IsDate(txtHDRFtyShpDateEnd.Text.Trim) Then

            txtHDRCustShpDateStr.Text = txtHDRFtyShpDateStr.Text

            If txtHDRCustShpDateStr.Text <> "" Then
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    Dim tmpstr As String
                    tmpstr = txtHDRCustShpDateStr.Text
                    If rs_QUOTNHDR.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                        If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_ftyshpstr")) Then
                            If IsDate(tmpstr) Then
                                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_ftyshpstr") Then
                                    Recordstatus = True
                                    If rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") <> "~*NEW*~" Then
                                        rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") = "~*UPD*~"
                                    End If
                                    rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_cushpstr") = tmpstr
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            'Cu shipenddate
            '2
            txtHDRCustShpDateEnd.Text = txtHDRFtyShpDateEnd.Text

            If txtHDRCustShpDateEnd.Text <> "" Then
                If sMode = cModeAdd Or sMode = cModeUpd Then
                    Dim tmpstr As String
                    tmpstr = txtHDRCustShpDateEnd.Text
                    If rs_QUOTNHDR.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                        If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_ftyshpend")) Then
                            If IsDate(tmpstr) Then
                                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_ftyshpend") Then
                                    Recordstatus = True
                                    If rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") <> "~*NEW*~" Then
                                        rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_creusr") = "~*UPD*~"
                                    End If
                                    rs_QUOTNHDR.Tables("RESULT").Rows(sReadingIndexQ).Item("quh_cushpend") = tmpstr
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        End If


    End Sub

    Private Sub txtHDRFtyShpDateEnd_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateEnd.TextChanged


        Dim tmpstr As String


        If flag_txtHDRFtyShpDateEnd_GotFocus = True Then
            flag_txtHDRFtyShpDateEnd_GotFocus = False
            If Trim(txtHDRFtyShpDateEnd.Text) = "/  /" Then
                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = "01/01/1900"
                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    txtDTLFtyShpDateEnd.Text = ""

                    Recordstatus = True
                    'copy
                    If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpend") = "01/01/1900"

                                If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                                End If

                            Next
                        End If
                    End If


                End If
            End If
        End If




        If txtHDRFtyShpDateEnd.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                tmpstr = txtHDRFtyShpDateEnd.Text
                If rs_QUOTNHDR.Tables("RESULT").Rows.Count > 0 Then
                    If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") Then
                                Recordstatus = True
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpend") = tmpstr
                                txtDTLFtyShpDateEnd.Text = tmpstr
                            End If
                        End If
                    End If
                End If
            End If
        End If
        ''copy to detail
        If IsDate(tmpstr) Then

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                    For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                        rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpend") = tmpstr

                        If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                        End If


                    Next
                End If
            End If
        End If

    End Sub

    Private Sub txtHDRFtyShpDateStr_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateStr.GotFocus
        flag_txtHDRFtyShpDateStr_GotFocus = True

    End Sub

    Private Sub txtHDRFtyShpDateStr_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateStr.TextChanged
        Dim tmpstr As String

        If flag_txtHDRFtyShpDateStr_GotFocus = True Then
            flag_txtHDRFtyShpDateStr_GotFocus = False
            If Trim(txtHDRFtyShpDateStr.Text) = "/  /" Then
                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = "01/01/1900"
                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    Recordstatus = True
                    txtDTLFtyShpDateStr.Text = ""

                    'copy
                    If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpstr") = "01/01/1900"

                                If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                                End If


                            Next
                        End If
                    End If

                End If
            End If
        End If



        If txtHDRFtyShpDateStr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                tmpstr = txtHDRFtyShpDateStr.Text
                If rs_QUOTNHDR.Tables("RESULT").Rows.Count > 0 Then
                    If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") Then
                                Recordstatus = True
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_ftyshpstr") = tmpstr
                                txtDTLFtyShpDateStr.Text = tmpstr

                            End If
                        End If
                    End If
                End If
            End If
        End If

        ''copy to detail
        If IsDate(tmpstr) Then

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                    For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                        rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_ftyshpstr") = tmpstr

                        If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                        End If


                    Next
                End If
            End If
        End If


    End Sub

    Private Sub txtHDRCustShpDateStr_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRCustShpDateStr.GotFocus
        flag_txtHDRCustShpDateStr_GotFocus = True

    End Sub

    Private Sub txtHDRCustShpDateStr_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtHDRCustShpDateStr.TextChanged

        Dim tmpstr As String
        If flag_txtHDRCustShpDateStr_GotFocus = True Then
            flag_txtHDRCustShpDateStr_GotFocus = False
            If Trim(txtHDRCustShpDateStr.Text) = "/  /" Then
                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = "01/01/1900"
                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    Recordstatus = True
                    txtDTLCustShpDateStr.Text = ""
                    'copy
                    If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then
                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpstr") = "01/01/1900"

                                If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                                End If



                            Next
                        End If
                    End If


                End If
            End If
        End If



        If txtHDRCustShpDateStr.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                tmpstr = txtHDRCustShpDateStr.Text
                If rs_QUOTNHDR.Tables("RESULT").Rows.Count > 0 Then
                    If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") Then
                                Recordstatus = True
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpstr") = tmpstr
                                txtDTLCustShpDateStr.Text = tmpstr

                            End If
                        End If
                    End If
                End If
            End If
        End If
        ''copy to detail
        If IsDate(tmpstr) Then

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                    For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                        rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpstr") = tmpstr

                        If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                        End If



                    Next
                End If
            End If
        End If

    End Sub

    Private Sub txtHDRCustShpDateEnd_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRCustShpDateEnd.GotFocus
        flag_txtHDRCustShpDateEnd_GotFocus = True

    End Sub

    Private Sub txtHDRCustShpDateEnd_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtHDRCustShpDateEnd.TextChanged

        Dim tmpstr As String
        If flag_txtHDRCustShpDateEnd_GotFocus = True Then
            flag_txtHDRCustShpDateEnd_GotFocus = False
            If Trim(txtHDRCustShpDateEnd.Text) = "/  /" Then
                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = "01/01/1900"
                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    Recordstatus = True
                    txtDTLCustShpDateEnd.Text = ""

                    'copy
                    If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                            For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                                rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpend") = "01/01/1900"

                                If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                                Else
                                    rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                                End If

                            Next
                        End If
                    End If

                End If
            End If
        End If


        If txtHDRCustShpDateEnd.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                tmpstr = txtHDRCustShpDateEnd.Text
                If rs_QUOTNHDR.Tables("RESULT").Rows.Count > 0 Then
                    If Not IsDBNull(rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend")) Then
                        If IsDate(tmpstr) Then
                            If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") Then
                                Recordstatus = True
                                If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                                End If
                                rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_cushpend") = tmpstr
                                txtDTLCustShpDateEnd.Text = tmpstr

                            End If
                        End If
                    End If
                End If
            End If
        End If
        ''copy to detail
        If IsDate(tmpstr) Then

            If Not rs_QUOTNDTL.Tables("RESULT") Is Nothing Then

                If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
                    For i As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                        rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_cushpend") = tmpstr

                        If rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*ADD*~" Or rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*NEW*~"
                        Else
                            rs_QUOTNDTL.Tables("RESULT").Rows(i).Item("qud_creusr") = "~*UPD*~"
                        End If

                    Next
                End If
            End If
        End If
    End Sub


    Private Sub recal_secconddp()

    End Sub


    Private Sub cmdReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdReset.Click
        ''
        '''Exit Sub


        Dim YesNoCancel As Integer
        Dim temp_creusr As String


        YesNoCancel = MsgBox("Do you want to clear this item?", MsgBoxStyle.YesNoCancel)

        If YesNoCancel = vbYes Then


            '''Call cmdreset_QUOTNDTL()

            '''Call reset_QUOTNDTL()


            temp_creusr = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_creusr")

            Call insert_QUOTNDTL(False)
            Call display_Detail(txtSeq.Text)


            Call reset_detail_control("Detail_Init", "All")
            Call reset_detail_data("Detail_Init", "All")

            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_creusr") = temp_creusr


            txtItmNoReal.Text = ""
            txtItmNoTmp.Text = ""
            txtItmNoVen.Text = ""
            cboItmNoVen.Text = ""

            txtItmNo.Text = ""

            txtItmNoReal.Focus()
            txtItmNoReal.SelectAll()
            chkDelete.Checked = False

            btcQUM00001.SelectedIndex = 1






        End If







        ''    If not_in_Combo_DTL() = True Then
        ''        Exit Sub
        ''    End If

        ''    btcQUM00001.SelectedIndex = 2
        ''    btcQUM00001.SelectedIndex = 0
        ''    flgRenewing = True

        ''    renewQuot = New frmRenewQuot
        ''    renewQuot.ma = Me

        ''    renewQuot.ShowDialog()
        ''    'frmRenewQuot.Show(vbModal)

        ''    If rs_QUOTNDTL.Tables.Count > 0 Then
        ''        If rs_QUOTNDTL.Tables("RESULT").Rows.Count > 0 Then
        ''            'Check Old Item Exist
        ''            OldItemRecord = False

        ''            For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
        ''                If Microsoft.VisualBasic.Left(rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_itmsts").ToString, 3) = "OLD" Then
        ''                    OldItemRecord = True
        ''                End If
        ''                If rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD" Then
        ''                    Recordstatus = True
        ''                End If
        ''            Next

        ''            If OldItemRecord = True Then
        ''                cmdReset.Enabled = Enq_right_local
        ''            Else
        ''                cmdReset.Enabled = False
        ''            End If

        ''            sReadingIndexQ = 0
        ''            no_Display_Detail = False
        ''            '                Call display_Detail()
        ''            no_Display_Detail = True

        ''            '*** Fix the retail price
        ''            '*** Phase 2 comment it
        ''            'Call cboCustItmCatPress()

        ''            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd") > 0 Then
        ''                txtCusUsd.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cususd"), "###,###,##0.0000")
        ''            Else
        ''                txtCusUsd.Text = ""
        ''            End If
        ''            If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad") > 0 Then
        ''                txtCusCad.Text = Format(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ)("qud_cuscad"), "###,###,##0.0000")
        ''            Else
        ''                txtCusCad.Text = ""
        ''            End If

        ''            '*** Phase 2 comment it
        ''            'Call CalculatePMU(txtCusUsd)
        ''        End If
        ''    End If

        ''    flgRenewing = False
        ''End Sub

        ''Private Sub cboSalRep_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSalRep.Click
        ''    'Recordstatus = True
        ''End Sub

        ''Private Sub cboSalRep_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboSalRep.Validating
        ''    Dim tmpstr As String
        ''    tmpstr = cboSalRep.Text

        ''    If tmpstr = "" Then
        ''        MsgBox("Sales Rep cannot empty, please select in Drop Down List.")
        ''    ElseIf cboSalRep.Items.IndexOf(tmpstr) = -1 Then
        ''        MsgBox("Sales Rep - Data is Invalid, please select in Drop Down List.")
        ''        e.Cancel = True
        ''    End If
    End Sub

    Public Function check_before_update() As Boolean
        ''***********************************Check For Valid Pricing ***********************************
        'valid_pricing = False
        'valid_pricing_for_customer = False

        'If rs_IMPRCINF_NewAddItem.Tables.Count > 0 Then
        '    For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
        '        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_status").ToString = "ACT" Then
        '            valid_pricing = True
        '        End If
        '    Next
        'End If

        'If valid_pricing = False Then
        '    MsgBox("Item with packing but all pricing are Inactive or TBC!")

        '    If txtItmNoReal.Text <> "" Then
        '        txtItmNoReal.SelectAll()
        '    Else
        '        txtItmNoTmp.SelectAll()
        '    End If


        '    Exit Function
        'End If

        ' ''default
        'If cboCus2No.Text <> "" Then
        '    If optMU.Checked = False Then
        '        optGM.Checked = True
        '    End If
        'End If




        'dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Split(cboCus1No.Text, " - ")(0) & "'")

        ''*** Phase 2
        'For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
        '    If dr.Length > 0 Then
        '        If Not (rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no Or _
        '             rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = "" Or _
        '             rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = dr(0)("cbi_cugrptyp_ext")) Then
        '            rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index).Delete()
        '        End If

        '    End If
        'Next

        'rs_IMPRCINF_NewAddItem.Tables("RESULT").AcceptChanges()

        'If rs_IMPRCINF_NewAddItem.Tables.Count > 0 Then
        '    For index As Integer = 0 To rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows.Count - 1
        '        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_status").ToString = "ACT" Then
        '            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = "" And _
        '                rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString = "" Then
        '                'Standard Price
        '                valid_pricing_for_customer = True
        '            Else
        '                If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString <> "" Then
        '                    'Check Primary and Secondary
        '                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no And _
        '                        rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus2no").ToString = check_cus2no Then
        '                        '???
        '                        valid_pricing_for_customer = True
        '                    End If
        '                Else
        '                    'Check Primary Only
        '                    'Check if is Customer Group
        '                    If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString.Length <> 5 Then
        '                        dr = rs_CUBASINF_P.Tables("RESULT").Select("cbi_cusno = " & "'" & Microsoft.VisualBasic.Left(cboCus1No.Text, InStr(cboCus1No.Text, " - ") - 1) & "'")

        '                        If rs_IMBASINF.Tables("RESULT").Rows(0)("vbi_ventyp").ToString = "E" Then
        '                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_ext") Then
        '                                valid_pricing_for_customer = True
        '                            End If
        '                        Else
        '                            If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no") = dr(0)("cbi_cugrptyp_int") Then
        '                                valid_pricing_for_customer = True
        '                            End If
        '                        End If
        '                    Else
        '                        If rs_IMPRCINF_NewAddItem.Tables("RESULT").Rows(index)("imu_cus1no").ToString = check_cus1no Then
        '                            valid_pricing_for_customer = True
        '                        End If
        '                    End If
        '                End If
        '            End If
        '        End If
        '    Next
        'End If

        'If valid_pricing_for_customer = False Then
        '    If check_cus2no = "" Then
        '        MsgBox("Item with packing but no valid Pricing for Customer [" & cboCus1No.Text & "]!")
        '    Else
        '        MsgBox("Item with packing but no valid Pricing for Customer [" & cboCus1No.Text & " | " & cboCus2No.Text & "]!")
        '    End If

        '    If txtItmNoReal.Text <> "" Then
        '        txtItmNoReal.SelectAll()
        '    Else
        '        txtItmNoTmp.SelectAll()
        '    End If

        '    Exit Function
        'End If




        'call check_formular


    End Function


    Private Sub StatusBar_PanelClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.StatusBarPanelClickEventArgs) Handles StatusBar.PanelClick

    End Sub

    Private Sub tpQUM00001_2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tpQUM00001_2.Click

    End Sub

    Private Sub lblTOQty_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblTOQty.Click

    End Sub

    Private Sub txtTOShipport_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtTOShipport.TextChanged
        If txtTOShipport.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = txtTOShipport.Text
                ''avoid DBNULL
                If Not rs_QUOTNDTL.Tables("RESULT").Rows.Count > sReadingIndexQ Then
                    Exit Sub
                End If

                If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_TOShipport") Then
                    Recordstatus = True
                    If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_TOShipport") = tmpstr
                End If
            End If
        End If

    End Sub

    Private Sub txtHDRFtyShpDateStr_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtHDRFtyShpDateStr.MaskInputRejected

    End Sub

    Private Sub txtDTLFtyShpDateStr_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtDTLFtyShpDateStr.MaskInputRejected

    End Sub

    Private Sub txtHDRFtyShpDateStr_TextChanged1(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateStr.TextChanged

    End Sub

    Private Sub txtHDRFtyShpDateStr_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtHDRFtyShpDateStr.Validating
        Dim tmpstr As String
        tmpstr = txtHDRFtyShpDateStr.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtHDRFtyShpDateStr.Focus()
        End If


    End Sub

    Private Sub txtHDRFtyShpDateEnd_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtHDRFtyShpDateEnd.Validating
        Dim tmpstr As String
        tmpstr = txtHDRFtyShpDateEnd.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtHDRFtyShpDateEnd.Focus()
        End If

    End Sub

    Private Sub txtHDRCustShpDateStr_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtHDRCustShpDateStr.Validating

        Dim tmpstr As String
        tmpstr = txtHDRCustShpDateStr.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtHDRCustShpDateStr.Focus()
        End If

    End Sub

    Private Sub txtHDRCustShpDateEnd_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtHDRCustShpDateEnd.Validating
        Dim tmpstr As String
        tmpstr = txtHDRCustShpDateEnd.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtHDRCustShpDateEnd.Focus()
        End If





    End Sub

    Private Sub txtDTLFtyShpDateStr_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDTLFtyShpDateStr.Validating


        Dim tmpstr As String
        tmpstr = txtDTLFtyShpDateStr.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtDTLFtyShpDateStr.Focus()
        End If


    End Sub

    Private Sub txtDTLFtyShpDateEnd_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDTLFtyShpDateEnd.Validating
        Dim tmpstr As String
        tmpstr = txtDTLFtyShpDateEnd.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtDTLFtyShpDateEnd.Focus()
        End If


    End Sub

    Private Sub txtDTLCustShpDateStr_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDTLCustShpDateStr.Validating
        Dim tmpstr As String
        tmpstr = txtDTLCustShpDateStr.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtDTLCustShpDateStr.Focus()
        End If

    End Sub

    Private Sub txtDTLCustShpDateEnd_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDTLCustShpDateEnd.Validating
        Dim tmpstr As String
        tmpstr = txtDTLCustShpDateEnd.Text


        If Not IsDate(tmpstr) And Trim(tmpstr) <> Trim("  /  /    ") Then
            MsgBox("Not a valid date!")
            txtDTLCustShpDateEnd.Focus()
        End If

    End Sub

    Private Sub cmdGenTent_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdGenTent.Click

        If Recordstatus = True Then
            MsgBox("Please save the quotation, before generating the TO!")
            Exit Sub
        End If


        'gs_messaeg = ""

        Cursor = Cursors.WaitCursor
        'TOM00002.Show()
        TOM00002.Hide()
        TOM00002.Close()
        TOM00002.Show()

        TOM00002.cboCoCde.Text = cboCoCde.Text
        TOM00002.txtQutNo.Text = txtQutNo.Text

        'TOM00002.cmdFind



        'Call Auto_find_TO()
        'If flag_to_released = False Then  'not released yet, so now to release
        '    If flag_no_TO_item_to_gen = False Then

        '        Call Auto_gen_TO()
        '        gs_messaeg = gs_messaeg & "Tentative Order Generated!" & vbLf

        '        'Call Auto_TO_release()

        '    End If
        'End If

        'If Trim(gs_messaeg) <> "" Then
        '    MsgBox(gs_messaeg)
        'End If

        'gs_messaeg = ""

        Cursor = Cursors.Default



    End Sub
    Public Sub Auto_find_TO()
        'Input a QUt# to find out details


        '--- Update Company Code before execute ---
        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)
        '------------------------------------------
        current_row = 0



        'If (Trim(txtQutNo.Text) = "") Then
        '    txtQutNo.Focus()
        '    MsgBox("Pls input Quotation No.")
        '    Exit Sub
        'End If

        'txtQutNo.Text = UCase(txtQutNo.Text)

        Dim rs() As ADOR.Recordset
        Dim S As String

        '*** Detail
        Dim optZeroQty As String
        optZeroQty = "N"

        'If Me.chkZeroQty.Checked = True Then
        '    optZeroQty = "Y"
        'End If

        optZeroQty = "Y"

        gspStr = "sp_select_TOM00002_tbc '" & gsCompany & "','" & txtQutNo.Text & "','" & optZeroQty & "'"
        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        rtnLong = execute_SQLStatement(gspStr, rs_QUOTNDTL_TO, rtnStr)
        Me.Cursor = Windows.Forms.Cursors.Default
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading TOM00002 cmdFind_Click rs_QUOTNDTL_TO : " & rtnStr)
        End If

        gspStr = "sp_select_TOORDHDR '" & gsCompany & "','" & "T" & txtQutNo.Text & "'"
        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        rtnLong = execute_SQLStatement(gspStr, rs_TOORDHDR, rtnStr)
        Me.Cursor = Windows.Forms.Cursors.Default
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading TOM00002 cmdFind_Click sp_select_TOORDHDR : " & rtnStr)
        End If

        flag_to_released = False
        If rs_TOORDHDR.Tables("RESULT").Rows.Count > 0 Then
            If rs_TOORDHDR.Tables("RESULT").Rows(0).Item("toh_ordsts") <> "OPE" Then
                MsgBox("Tentative order status is Release.")
                flag_to_released = True
                Exit Sub
            End If
        End If

        gspStr = "sp_select_TOORDDTL '" & gsCompany & "','" & "T" & txtQutNo.Text & "'"
        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        rtnLong = execute_SQLStatement(gspStr, rs_TOORDDTL, rtnStr)
        Me.Cursor = Windows.Forms.Cursors.Default
        If rtnLong <> RC_SUCCESS Then
            MsgBox("Error on loading TOM00002 cmdFind_Click sp_select_TOORDDTL : " & rtnStr)
        End If




        'gspStr = "sp_select_SAREQDTL_created '" & gsCompany & "','" & txtQutNo.Text & "'"
        'Me.Cursor = Windows.Forms.Cursors.WaitCursor
        'rtnLong = execute_SQLStatement(gspStr, rs_SAREQDTL, rtnStr)
        'Me.Cursor = Windows.Forms.Cursors.Default

        flag_no_TO_item_to_gen = False
        If rs_QUOTNDTL_TO.Tables("RESULT").Rows.Count = 0 Then
            MsgBox("All tentative order quantities are zero,  Or  Items are Discontinued/ Inactive/Old Items/To be confirmed.", vbInformation, "Information")
            flag_no_TO_item_to_gen = True
            Exit Sub

        Else
            rs_QUOTNDTL_TO.Tables("RESULT").Columns("cbi_cus2na").ReadOnly = False
            If IsDBNull(rs_QUOTNDTL_TO.Tables("RESULT").Rows(current_row).Item("cbi_cus2na")) Then
                rs_QUOTNDTL_TO.Tables("RESULT").Rows(current_row).Item("cbi_cus2na") = ""
            End If

            For i As Integer = 0 To rs_QUOTNDTL_TO.Tables("RESULT").Columns.Count - 1
                rs_QUOTNDTL_TO.Tables("RESULT").Columns(i).ReadOnly = False
            Next

        End If


    End Sub

    Private Sub Auto_gen_TO()


        ''        ReDim Preserve flag_ftyprc_diff(3000)

        ''' select all to to gen
        ''' 

        ''' GEN all 

        '--- Update Company Code before execute ---
        gsCompany = Trim(cboCoCde.Text)
        Call Update_gs_Value(gsCompany)
        '------------------------------------------


        Dim CoCde As String = ""
        Dim reqno As String = ""
        Dim cus1no As String = ""
        Dim cus2no As String = ""
        Dim venno As String = ""
        Dim subcde As String = ""
        Dim reqseq As Integer = 0
        Dim rs_tmp_quotation As DataSet

        'txtReqNoSet.Text = ""
        'txtReqNoSet.ForeColor = &H80000008

        rs_QUASSINF_TO_tmp = Nothing
        rs_QUOTNDTL_TO_tmp = Nothing

        Dim Firsttime As Boolean = True

        'If Not Me.grdDetailSet.DataSource Is Nothing Then
        '    rs_QUOTNDTL_TO_tmp = rs_QUOTNDTL_TO_SET.Copy 'rs_QUOTNDTL_TO_tmp = CopyRS(rs_QUOTNDTL_TO_SET)
        '    rs_QUASSINF_TO_tmp = rs_QUASSINF_TO_SET.Copy 'rs_QUASSINF_TO_tmp = CopyRS(rs_QUASSINF_TO_SET)
        'ElseIf Not Me.grdDetail.DataSource Is Nothing Then
        '    rs_QUOTNDTL_TO_tmp = rs_QUOTNDTL_TO.Copy 'rs_QUOTNDTL_TO_tmp = CopyRS(rs_QUOTNDTL_TO)
        '    '      rs_QUASSINF_TO_tmp = rs_QUASSINF_TO.Copy 'rs_QUASSINF_TO_tmp = CopyRS(rs_QUASSINF_TO)
        'Else
        '    Exit Sub
        'End If

        rs_QUOTNDTL_TO_tmp = rs_QUOTNDTL_TO.Copy

        If Not rs_QUOTNDTL_TO_tmp Is Nothing Then
            '''SELECT ALL
            For i2 As Integer = 0 To rs_QUOTNDTL_TO_tmp.Tables("RESULT").Rows.Count - 1
                rs_QUOTNDTL_TO_tmp.Tables("RESULT").Rows(i2).Item("gen") = "Y"
            Next

            Dim dr_QUOTNDTL() As DataRow = rs_QUOTNDTL_TO_tmp.Tables("RESULT").Select("gen='Y'") 'rs_QUOTNDTL_TO_tmp.Filter = "gen = 'Y'"


            If dr_QUOTNDTL.Length() = 0 Then
                MsgBox("No record  for TO, please try TO generation.")
                Exit Sub
            Else

                rs_tmp_quotation = rs_QUOTNDTL_TO_tmp.Copy 'rs_tmp_quotation = CopyRS(rs_QUOTNDTL_TO_tmp)

                'If checkZeroqty(rs_tmp_quotation) Then
                '    Exit Sub
                'End If

                'rs_QUOTNDTL_TO_tmp.Tables("RESULT").DefaultView.Sort = "quh_cocde,quh_cus1no,quh_cus2no,qud_cusven,qud_cussub"

                Dim rs_QUOTNDTL_TO_tmp_sorttable As DataTable = rs_QUOTNDTL_TO_tmp.Tables("RESULT").DefaultView.ToTable()


                For i As Integer = 0 To rs_QUOTNDTL_TO_tmp_sorttable.Rows.Count - 1

                    Dim a As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_toqty").ToString
                    ''20140123 no need check 0 qty now
                    If rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_toqty") >= 0 And rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("gen") = "Y" Then
                        '      If rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_toqty") > 0 And rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("gen") = "Y" Then
                        '--- Update Company Code before execute ---
                        gsCompany = Trim(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cocde"))
                        Call Update_gs_Value(gsCompany)


                        If Firsttime = True Then

                            Firsttime = False

                            Dim toh_ordsts As String = "OPE"
                            Dim toh_issdat As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_issdat")
                            Dim toh_rvsdat As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_rvsdat")
                            Dim toh_verno As Integer = 1
                            Dim toh_saldiv As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_saldiv")
                            Dim toh_saltem As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_saldivtem")
                            Dim toh_salrep As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_srname")
                            Dim toh_custcde As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_custcde")
                            Dim toh_buyer As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_buyer")
                            Dim toh_year As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_year")
                            Dim toh_cus1no As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_cus1no")
                            Dim toh_cus2no As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_cus2no")
                            Dim toh_refqut As String = Trim(txtQutNo.Text)
                            Dim toh_to As String = ""
                            Dim toh_cc As String = ""
                            Dim toh_fm As String = ""
                            Dim toh_rmk As String = ""
                            Dim toh_season As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_season")


                            If rs_TOORDHDR.Tables("RESULT").Rows.Count > 0 Then
                                'update

                                gspStr = "sp_update_TOORDHDR '" & gsCompany & "','" & "T" + Trim(txtQutNo.Text) & "','" & gsUsrID & "'"
                                Me.Cursor = Windows.Forms.Cursors.WaitCursor
                                rtnLong = execute_SQLStatement(gspStr, rs_insert_SAREQHDR, rtnStr)
                                Me.Cursor = Windows.Forms.Cursors.Default
                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading TOM00002 cmdGen_Click  sp_update_TOORDHDR : " & rtnStr)
                                Else
                                    'reqno = rs_DOC_GEN.Tables("RESULT").Rows(0).Item(0)
                                End If
                                ''       txtReqNo.Text = "T" + Trim(txtQutNo.Text) + " Created"
                                'txtReqNo.Text = "T" + Trim(txtQutNo.Text) + " for Vendor - " + rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cusven") + IIf(Len(RTrim(LTrim(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cussub")))) = 0, "", " Sub Code - " + rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cussub"))
                            Else
                                gspStr = "sp_insert_TOORDHDR '" & gsCompany & "','" & "T" + Trim(txtQutNo.Text) & "','" & toh_ordsts & _
                                "','" & toh_issdat & "','" & toh_rvsdat & "'," & toh_verno & ",'" & toh_saldiv & "','" & toh_saltem & "','" & toh_salrep & _
                                "','" & toh_custcde & "','" & toh_buyer & "','" & toh_year & "','" & toh_cus1no & "','" & toh_cus2no & _
                                "','" & toh_refqut & "','" & toh_to & "','" & toh_cc & "','" & toh_fm & "','" & toh_rmk & "','" & toh_season & "','" & gsUsrID & "'"
                                Me.Cursor = Windows.Forms.Cursors.WaitCursor
                                rtnLong = execute_SQLStatement(gspStr, rs_insert_SAREQHDR, rtnStr)
                                Me.Cursor = Windows.Forms.Cursors.Default
                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading TOM00002 cmdGen_Click  sp_insert_TOORDHDR : " & rtnStr)
                                Else
                                    'reqno = rs_DOC_GEN.Tables("RESULT").Rows(0).Item(0)
                                End If
                                ''                                txtReqNo.Text = "T" + Trim(txtQutNo.Text) + " Created"
                                'txtReqNo.Text = "T" + Trim(txtQutNo.Text) + " for Vendor - " + rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cusven") + IIf(Len(RTrim(LTrim(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cussub")))) = 0, "", " Sub Code - " + rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cussub"))
                            End If
                        End If



                        Dim tod_toordno As String = "T" + Trim(txtQutNo.Text)
                        Dim tod_toordseq As Integer  '3
                        Dim tod_verno As Integer = 1 '3 '4
                        Dim tod_latest As String = "Y" '3'5
                        Dim tod_refno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_refno") '3 '6

                        ''' for TBC
                        Dim tod_qutitmsts As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutitmsts") '3'7
                        Dim tod_sts As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmsts") '3'7
                        Dim tod_todat As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_todat")  '3'8 
                        Dim tod_customer As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_customer") '3'9
                        Dim tod_cus1no As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_cus1no") '3 '10
                        Dim tod_cus2no As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("quh_cus2no")  '3'11
                        Dim tod_buyer As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_buyer") '3 '12 
                        Dim tod_category As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_category") '3 '13
                        Dim tod_jobno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_jobno") '3'14
                        Dim tod_ftyitmno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmnoreal") '3 '15
                        Dim tod_itmsku As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmsku") '3'16
                        Dim tod_ftytmpitmno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmnotmp") '3'17
                        Dim tod_itmdsc As String = Replace(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmdsc").ToString, "'", "''") '3'18

                        'Dim tod_venno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_venno")  '3'19  
                        Dim tod_venno As String
                        If Not IsDBNull(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmnovenno")) Then
                            tod_venno = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmnovenno")  '3'19  
                        Else
                            tod_venno = ""
                        End If

                        Dim tod_venitm As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_itmnoven") '3'20 
                        Dim tod_colcde As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_colcde")  '3'21
                        Dim tod_inrqty As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_inrqty")  '3'22
                        Dim tod_mtrqty As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_mtrqty") '3'23
                        Dim tod_pckunt As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_untcde") '324 
                        Dim tod_conftr As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_conftr") '3'25   
                        Dim tod_cft As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cft") '3'26
                        Dim tod_cbm As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cbm")  '3'27 
                        Dim tod_ftyprctrm As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ftyprctrm") '3'28
                        Dim tod_hkprctrm As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_prctrm") '3'29
                        Dim tod_trantrm As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_trantrm") '3'30 
                        Dim tod_period As String = Format(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_period"), "MM/dd/yyyy") '3 '31
                        Dim tod_fobport As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_fobport") '3'32 
                        Dim tod_retail As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_retail")  '3'33  
                        Dim tod_projqty As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_toqty") '3 '34

                        Dim tod_ftyshpdatstr As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ftyshpstr") '3'35
                        Dim tod_ftyshpdatend As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ftyshpend")  '3'36
                        '''special
                        ''' 
                        '''special handle 20140122
                        If tod_ftyshpdatstr = "11/19/00" Then
                            tod_ftyshpdatstr = "01/01/1900"
                        End If
                        If tod_ftyshpdatstr = "11/19/2000" Then
                            tod_ftyshpdatstr = "01/01/1900"
                        End If
                        If DateDiff("d", tod_ftyshpdatstr, "11/19/2000") = 0 Then
                            tod_ftyshpdatstr = "01/01/1900"
                        End If

                        '''special handle 20140122
                        If tod_ftyshpdatend = "11/19/00" Then
                            tod_ftyshpdatend = "01/01/1900"
                        End If
                        If tod_ftyshpdatend = "11/19/2000" Then
                            tod_ftyshpdatend = "01/01/1900"
                        End If
                        If DateDiff("d", tod_ftyshpdatend, "11/19/2000") = 0 Then
                            tod_ftyshpdatend = "01/01/1900"
                        End If


                        Dim tod_dsgven As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_dsgven").ToString   '3'37
                        Dim tod_prdven As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_prdven") '3'38
                        Dim tod_cusven As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cusven")  '3'39
                        Dim tod_imgpth As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_imgpth") '3'40 
                        Dim tod_s2apno As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_sapno") '3 '41 
                        Dim tod_cuspono As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cuspono") '3 '42
                        Dim tod_rmk As String = Replace(rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_rmk").ToString, "'", "''") '3 '43 
                        Dim tod_upc As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_upc") '3 '44
                        Dim tod_ctnL As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ctnL") '3'45
                        Dim tod_ctnW As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ctnW")  '3'46
                        Dim tod_ctnH As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ctnH") '3 '47
                        Dim tod_ctnupc As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ctnupc") '3'48 
                        Dim tod_venstk As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_venstk") '3'49
                        Dim tod_cushpdatstr As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cushpstr")  '3'50
                        Dim tod_cushpdatend As DateTime = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_cushpend") '3'51
                        '''special
                        ''' 
                        '''special handle 20140122
                        If tod_cushpdatstr = "11/19/00" Then
                            tod_cushpdatstr = "01/01/1900"
                        End If
                        If tod_cushpdatstr = "11/19/2000" Then
                            tod_cushpdatstr = "01/01/1900"
                        End If
                        If DateDiff("d", tod_cushpdatstr, "11/19/2000") = 0 Then
                            tod_cushpdatstr = "01/01/1900"
                        End If

                        '''special handle 20140122
                        If tod_cushpdatend = "11/19/00" Then
                            tod_cushpdatend = "01/01/1900"
                        End If
                        If tod_cushpdatend = "11/19/2000" Then
                            tod_cushpdatend = "01/01/1900"
                        End If
                        If DateDiff("d", tod_cushpdatend, "11/19/2000") = 0 Then
                            tod_cushpdatend = "01/01/1900"
                        End If

                        Dim tod_fcurcde As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_fcurcde") '3'52 
                        Dim tod_ftycst As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_ftyprc")  '3'53 
                        Dim tod_curcde As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_curcde") '3'54 
                        Dim tod_selprc As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_selprc") '3'55 
                        Dim tod_basprc As Decimal = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_basprc") '3'55 
                        Dim tod_qtyb_cuspo As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qtyb_cuspo") '3'56
                        Dim tod_qtyb_ordqty As Integer = 0 '3'57
                        'Dim tod_podat As DateTime = "1900/01/01"  '3'58 
                        Dim tod_podat As DateTime = "1900/01/01"  '3'58 
                        Dim tod_pcktyp As String = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_pcktyp")  '3'59
                        Dim tod_qutno As String = txtQutNo.Text  '3'60
                        Dim tod_qutseq As Integer = rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutseq") '3'61

                        '''20140116  tbc zero prc
                        ''' 
                        If rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutitmsts") = "TBC" Then
                            tod_ftycst = 0
                            tod_selprc = 0
                            tod_basprc = 0
                        End If

                        'If flag_ftyprc_diff(tod_qutseq) = True Then
                        '    tod_ftycst = 0
                        '    tod_selprc = 0

                        'End If

                        If checkToodrdtl(Trim(txtQutNo.Text), rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutseq")) = True Then
                            If rs_TOORDHDR.Tables("RESULT").Rows(0).Item("toh_verno") > currentDtlVerno Then
                                'Insert seq <> 0
                                tod_toordseq = GetSeqno(Trim(txtQutNo.Text), rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutseq"))
                                tod_verno = rs_TOORDHDR.Tables("RESULT").Rows(0).Item("toh_verno")

                                gspStr = "sp_insert_TOORDDTL '" & gsCompany & "','" & tod_toordno & "'," & tod_toordseq & "," & tod_verno & ",'" & _
                                    tod_latest & "','" & tod_refno & "','" & _
                                    tod_sts & "','" & tod_todat & "','" & tod_customer & "','" & _
                                    tod_cus1no & "','" & tod_cus2no & "','" & tod_buyer & "','" & _
                                    tod_category & "','" & tod_jobno & "','" & tod_ftyitmno & "','" & _
                                    tod_itmsku & "','" & tod_ftytmpitmno & "','" & tod_itmdsc & "','" & _
                                    tod_venno & "','" & tod_venitm & "','" & tod_colcde & "'," & _
                                    tod_inrqty & "," & tod_mtrqty & ",'" & tod_pckunt & "'," & tod_conftr & "," & _
                                    tod_cft & "," & tod_cbm & ",'" & tod_ftyprctrm & "','" & _
                                    tod_hkprctrm & "','" & tod_trantrm & "','" & tod_period & "','" & _
                                    tod_fobport & "'," & _
                                    tod_retail & "," & _
                                    tod_projqty & ",'" & tod_ftyshpdatstr & "','" & _
                                    tod_ftyshpdatend & "','" & _
                                    tod_dsgven & "','" & tod_prdven & "','" & _
                                    tod_cusven & "','" & tod_imgpth & "','" & tod_s2apno & "','" & _
                                    tod_cuspono & "','" & _
                                    tod_rmk & "','" & tod_upc & "'," & _
                                    tod_ctnL & "," & tod_ctnW & "," & _
                                    tod_ctnH & ",'" & tod_ctnupc & "','" & _
                                    tod_venstk & "','" & tod_cushpdatstr & "','" & _
                                    tod_cushpdatend & "','" & tod_fcurcde & "'," & _
                                    tod_ftycst & ",'" & tod_curcde & "'," & tod_selprc & ",'" & _
                                    tod_qtyb_cuspo & "'," & tod_qtyb_ordqty & ",'" & tod_podat & "','" & _
                                    tod_pcktyp & "','" & tod_basprc & "','" & tod_qutitmsts & "','" & tod_qutno & "'," & tod_qutseq & ",'" & _
                                    gsUsrID & "'"

                                Me.Cursor = Windows.Forms.Cursors.WaitCursor
                                rtnLong = execute_SQLStatement(gspStr, rs_insert_SAREQDTL2, rtnStr)
                                Me.Cursor = Windows.Forms.Cursors.Default
                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading TOM00002 cmdGen_Click  sp_insert_TOORDDT : " & rtnStr)
                                Else
                                    'reqseq = rs_insert_SAREQDTL2.Tables("RESULT").Rows(0).Item(0)

                                End If


                            Else
                                'Update
                                tod_toordseq = GetSeqno(Trim(txtQutNo.Text), rs_QUOTNDTL_TO_tmp_sorttable.Rows(i).Item("qud_qutseq"))

                                gspStr = "sp_update_TOORDDTL_2 '" & gsCompany & "','" & tod_toordno & "'," & tod_verno & "," & tod_toordseq & "," & tod_projqty & ",'" & tod_ftyshpdatstr & "','" & _
                                            tod_ftyshpdatend & "','" & tod_cushpdatstr & "','" & tod_cushpdatend & "','" & tod_rmk & "','" & _
                                            tod_dsgven & "','" & tod_prdven & "','" & tod_cusven & "'," & tod_ftycst & "," & tod_selprc & "," & tod_basprc & ",'" & tod_qutitmsts & "','" & gsUsrID & "'"

                                Me.Cursor = Windows.Forms.Cursors.WaitCursor
                                rtnLong = execute_SQLStatement(gspStr, rs_insert_SAREQDTL2, rtnStr)
                                Me.Cursor = Windows.Forms.Cursors.Default
                                If rtnLong <> RC_SUCCESS Then
                                    MsgBox("Error on loading TOM00002 cmdGen_Click  sp_insert_TOORDDT : " & rtnStr)
                                Else
                                    'reqseq = rs_insert_SAREQDTL2.Tables("RESULT").Rows(0).Item(0)

                                End If

                            End If
                        Else
                            'Insert seq =0
                            If rs_TOORDHDR.Tables("RESULT").Rows.Count <> 0 Then
                                tod_verno = rs_TOORDHDR.Tables("RESULT").Rows(0).Item("toh_verno")
                            Else
                                tod_verno = 1
                            End If
                            tod_toordseq = 0
                            gspStr = "sp_insert_TOORDDTL '" & gsCompany & "','" & tod_toordno & "'," & tod_toordseq & "," & tod_verno & ",'" & _
                                    tod_latest & "','" & tod_refno & "','" & _
                                    tod_sts & "','" & tod_todat & "','" & tod_customer & "','" & _
                                    tod_cus1no & "','" & tod_cus2no & "','" & tod_buyer & "','" & _
                                    tod_category & "','" & tod_jobno & "','" & tod_ftyitmno & "','" & _
                                    tod_itmsku & "','" & tod_ftytmpitmno & "','" & tod_itmdsc & "','" & _
                                    tod_venno & "','" & tod_venitm & "','" & tod_colcde & "'," & _
                                    tod_inrqty & "," & tod_mtrqty & ",'" & tod_pckunt & "'," & tod_conftr & "," & _
                                    tod_cft & "," & tod_cbm & ",'" & tod_ftyprctrm & "','" & _
                                    tod_hkprctrm & "','" & tod_trantrm & "','" & tod_period & "','" & _
                                    tod_fobport & "'," & _
                                    tod_retail & "," & _
                                    tod_projqty & ",'" & tod_ftyshpdatstr & "','" & _
                                    tod_ftyshpdatend & "','" & _
                                    tod_dsgven & "','" & tod_prdven & "','" & _
                                    tod_cusven & "','" & tod_imgpth & "','" & tod_s2apno & "','" & _
                                    tod_cuspono & "','" & _
                                    tod_rmk & "','" & tod_upc & "'," & _
                                    tod_ctnL & "," & tod_ctnW & "," & _
                                    tod_ctnH & ",'" & tod_ctnupc & "','" & _
                                    tod_venstk & "','" & tod_cushpdatstr & "','" & _
                                    tod_cushpdatend & "','" & tod_fcurcde & "'," & _
                                    tod_ftycst & ",'" & tod_curcde & "'," & tod_selprc & ",'" & _
                                    tod_qtyb_cuspo & "'," & tod_qtyb_ordqty & ",'" & tod_podat & "','" & _
                                    tod_pcktyp & "','" & tod_basprc & "','" & tod_qutitmsts & "','" & tod_qutno & "'," & tod_qutseq & ",'" & _
                                    gsUsrID & "'"

                            Me.Cursor = Windows.Forms.Cursors.WaitCursor
                            rtnLong = execute_SQLStatement(gspStr, rs_insert_SAREQDTL2, rtnStr)
                            Me.Cursor = Windows.Forms.Cursors.Default
                            If rtnLong <> RC_SUCCESS Then
                                MsgBox("Error on loading TOM00002 cmdGen_Click  sp_insert_TOORDDT : " & rtnStr)
                            Else
                                'reqseq = rs_insert_SAREQDTL2.Tables("RESULT").Rows(0).Item(0)

                            End If

                        End If




                    End If
                Next
            End If


            ''--- Reset Company Code after execute ---
            'gsCompany = Trim(cboCoCde.Text)
            'Call Update_gs_Value(gsCompany)
            ''------------------------------------------
            'If Me.txtReqNo.Text = "" Or Me.txtReqNo.Text = "No Tentative Order Generated" Then
            '    Me.txtReqNo.Text = "No Tentative Order Generated"
            'Else
            '    Call cmdClearAll_Click(sender, e)
            'End If
        Else
            MsgBox("No record selected for generate, please try again.")
            Exit Sub
        End If

    End Sub

    Private Sub Auto_TO_release()

        Dim rs_Result As DataSet
        Dim rs_Right As DataSet

        Dim optStr As String
        Dim temp As String
        Dim t As String
        Dim r As String

        gsCompany = Trim(cboCoCde.Text)
        Update_gs_Value(gsCompany)
        '------------------------------------------

        Me.Cursor = Windows.Forms.Cursors.WaitCursor

        optStr = "REL"

        gspStr = "sp_update_TOORDHDR_TOM00003 '" & cboCoCde.Text & "','" & "T" & txtQutNo.Text & "','" & "T" & txtQutNo.Text & "','" & optStr & "','" & gsUsrID & "'"
        rtnLong = execute_SQLStatement(gspStr, rs_Result, rtnStr)
        If rtnLong <> RC_SUCCESS Then
            Me.Cursor = Windows.Forms.Cursors.Default
            MsgBox("Error on loading TOM00003 sp_update_TOORDHDR_TOM00003 : " & rtnStr)
            Exit Sub
        Else
            For i As Integer = 0 To rs_Result.Tables("RESULT").Rows.Count - 1

                temp = temp & rs_Result.Tables("RESULT").Rows(i).Item(0)

            Next

            If temp <> "" Then
                temp = Replace(temp, " - ", Environment.NewLine)
                temp = Replace(temp, Environment.NewLine, "", 1, 1)

                gs_messaeg = gs_messaeg & temp & "!" & vbLf




            Else
            End If

        End If

        Me.Cursor = Windows.Forms.Cursors.Default
    End Sub


    Private Function checkToodrdtl(ByVal qutno As String, ByVal seqno As Integer) As Boolean
        If rs_TOORDDTL.Tables("RESULT").Rows.Count = 0 Then
            Return False
        End If

        Dim dr() As DataRow
        dr = rs_TOORDDTL.Tables("RESULT").Select("tod_qutno ='" & qutno & "' and tod_qutseq=" & seqno & " and tod_latest = 'Y'")

        If dr.Length = 0 Then
            Return False
        ElseIf dr.Length <> 0 Then
            currentDtlVerno = dr(0)("tod_verno")
            Return True
        End If

    End Function

    Private Function GetSeqno(ByVal qutno As String, ByVal seqno As Integer) As Integer



        Dim dr() As DataRow
        dr = rs_TOORDDTL.Tables("RESULT").Select("tod_qutno='" & qutno & "' and tod_qutseq=" & seqno)

        If dr.Length = 0 Then
            Return 1 'MAX
        Else
            Return dr(0)("tod_toordseq")
        End If


    End Function



    Private Sub txtDTLCustShpDateStr_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtDTLCustShpDateStr.MaskInputRejected

    End Sub

    Public Function set_sReadingIndexQ(ByVal find_sReadingIndexQ As Integer)
        sReadingIndexQ = find_sReadingIndexQ

    End Function

    Function get_umftr() As Integer

        '''20140212
        ''' factor
        Dim itmtyp As String
        Dim umftr As Integer

        itmtyp = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_itmtyp")
        'default
        umftr = 1

        If itmtyp = "ASS" Then
            If Not IsNumeric(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_conftr")) Then
                umftr = 1
            Else
                umftr = rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_conftr")
            End If
        Else

            '''20140211
            If rs_SYCONFTR.Tables("RESULT") Is Nothing Then
                get_umftr = 1
                Exit Function
            End If

            If rs_SYCONFTR.Tables("RESULT").Rows.Count = 0 Then
                umftr = 1
            Else
                umftr = rs_SYCONFTR.Tables("RESULT").Rows(0)("ycf_value")
            End If
        End If

        get_umftr = umftr

    End Function

    Private Sub txtQutItmSts_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub chkPC_hdr_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPC_hdr.CheckedChanged

    End Sub

    Private Sub chkApprove_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkApprove.Click

        If gsUsrRank > 3 Then
            MsgBox("You have no rights to Approve the quotation!")
            Exit Sub
        End If

        If chkApprove.Checked Then
            If MsgBox("Are you sure to approve  the quotation?", vbYesNo + vbQuestion, "Approve/Un-approve Quotation") = vbYes Then
                If sender.focused Then
                    For i As Integer = 0 To 2999
                        flag_no_update_mu(i) = True
                    Next
                End If
                For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                    'if rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString <> "Y" And _
                    'If Split(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_qutitmsts"), " - ")(0) = "W" _
                    '    Or rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") = "N" Then
                    If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") <> "TBC" Then
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") = "Y"
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") = "A - Active"
                        rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"

                        If rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") = "~*UPD*~"
                        End If


                    End If
                Next

            Else
                chkApprove.Checked = False
            End If 'yes


        Else ''uncheck
            If MsgBox("Are you sure to un-approve the quotation?", vbYesNo + vbQuestion, "Approve/Un-approve Quotation") = vbYes Then
                If sender.focused Then
                    For i As Integer = 0 To 2999
                        flag_no_update_mu(i) = True
                    Next
                End If
                For index As Integer = 0 To rs_QUOTNDTL.Tables("RESULT").Rows.Count - 1
                    'If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve").ToString = "Y" And _
                    '    rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts").ToString = "W - Wait for Approval" Then

                    If rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") <> "TBC" Then
                        If Val(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qpe_mu")) < Val(rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qpe_mumin")) Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_qutitmsts") = "W - Wait for Approval"
                            rs_QUOTNDTL.Tables("RESULT").Rows(index)("qud_apprve") = "N"

                            rs_QUOTNDTL.Tables("RESULT").Rows(index)("mode") = "UPD"
                            If rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") <> "~*NEW*~" Then
                                rs_QUOTNDTL.Tables("RESULT").Rows(index).Item("qud_creusr") = "~*UPD*~"
                            End If
                        End If
                    End If

                Next

            Else
                chkApprove.Checked = True
            End If 'yes




        End If  ''check/un


        '''20140128
        'Call set_qutsts()
        Call set_qutsts_after_approve_dtl()


        Recordstatus = True
        '''20140212
        ''' 
        sReadingIndexQ = 0
        Call display_Detail(Val(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_qutseq")))

        btcQUM00001.SelectedIndex = 1







    End Sub

    Private Sub chkApprove_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkApprove.GotFocus
        flag_chkApprove_keypress = True
    End Sub

    Private Sub txtDTLFtyShpDateEnd_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtDTLFtyShpDateEnd.MaskInputRejected

    End Sub

    Private Sub txtDTLCustShpDateEnd_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtDTLCustShpDateEnd.MaskInputRejected

    End Sub

    Private Sub txtHDRFtyShpDateEnd_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtHDRFtyShpDateEnd.MaskInputRejected

    End Sub

    Private Sub txtHDRCustShpDateStr_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtHDRCustShpDateStr.MaskInputRejected

    End Sub

    Private Sub txtHDRCustShpDateEnd_MaskInputRejected(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MaskInputRejectedEventArgs) Handles txtHDRCustShpDateEnd.MaskInputRejected

    End Sub

    Private Sub txtHDRFtyShpDateStr_TextAlignChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHDRFtyShpDateStr.TextAlignChanged

    End Sub

    Private Sub cboSalRep_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboSalRep.SelectedIndexChanged

        If rs_QUOTNHDR.Tables("RESULT") Is Nothing Then
            Exit Sub
        End If

        If rs_QUOTNHDR.Tables("RESULT").Rows.Count = 0 Then
            Exit Sub
        End If

        If cboSalRep.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboSalRep.Text

                If tmpstr <> rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname") Then
                    Recordstatus = True
                    '''0811_2
                    If rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*ADD*~" And rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") <> "~*NEW*~" Then
                        rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_creusr") = "~*UPD*~"
                    End If
                    rs_QUOTNHDR.Tables("RESULT").Rows(0).Item("quh_srname") = tmpstr
                End If
            End If
        End If

    End Sub

    Private Sub cboSalRep_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles cboSalRep.Validating
        Dim i As Integer
        Dim Y As Integer
        Dim inCombo As Boolean

        i = cboSalRep.Items.Count
        If cboSalRep.Text <> "" And cboSalRep.Enabled = True And cboSalRep.Items.Count > 0 Then
            For Y = 0 To i - 1
                If Trim(cboSalRep.Text) = Trim(cboSalRep.Items(Y).ToString) Then
                    inCombo = True
                End If
            Next

            If inCombo = False Then
                MsgBox("Sales Representative - Data is Invalid, please select in Drop Down List.")
                e.Cancel = True
            End If
        End If

    End Sub




    Public Sub reset_detail_formular_not_found()

        txtMU.Enabled = True
        txtPckCstAmt.Enabled = True
        txtItmCommAmt.Enabled = True

        txtCusItm.Text = ""
        txtAlias.Text = ""

        txtAlscolcde.Text = ""
        txtCusCol.Text = ""


        cboUM.Text = ""
        txtInrQty.Text = ""
        txtMtrQty.Text = ""
        txtCft.Text = ""
        txtCBM.Text = ""
        cboFtyPrcTrm.Text = ""
        cboDtlPrcTrm.Text = ""
        cboTranTrm.Text = ""

        txtMoq.Text = ""
        chkPC.Checked = False

        txtInrdin.Text = "0"
        txtInrhin.Text = "0"
        txtInrwin.Text = "0"
        txtMtrdin.Text = "0"
        txtMtrhin.Text = "0"
        txtMtrwin.Text = "0"

        txtInrdcm.Text = "0"
        txtInrhcm.Text = "0"
        txtInrwcm.Text = "0"
        txtMtrdcm.Text = "0"
        txtMtrhcm.Text = "0"
        txtMtrwcm.Text = "0"

        txtGrswgt.Text = "0"
        txtNetwgt.Text = "0"

        txtPckItr.Text = ""

        txtIMRmk.Text = ""
        txtNote.Text = ""

        txtFCurCde.Text = ""
        txtFtyPrc.Text = ""

        txtMU.Text = ""
        txtPckCstAmt.Text = ""
        txtItmCommAmt.Text = ""
        txtCus1Dp.Text = ""
        txtBasPrc.Text = ""

        txtPrcKey.Text = ""
        txtEffDat.Text = ""
        txtExpDat.Text = ""
        txtPeriod.Text = ""

        cboDV.Text = ""
        cboVenNo.Text = ""
        cboCusVen.Text = ""
        cboTV.Text = ""
        cboFA.Text = ""

        txtCosMth.Text = ""
        cboHrmCde.Text = ""
        cboCusUsdCurr.Text = "USD"
        txtCusUsd.Text = ""
        cboCusCadCurr.Text = "CAD"
        txtCusCad.Text = ""

        txtStkQty.Text = ""
        txtCusQty.Text = ""
        txtSmpQty.Text = ""

        txtDtyRat.Text = ""

        cboTOFty.Text = ""
        txtTOOrdQty.Text = ""
        txtTOShipport.Text = ""
        txtTORemark.Text = ""

        txtDTLFtyShpDateStr.Text = ""
        txtDTLFtyShpDateEnd.Text = ""
        txtDTLCustShpDateStr.Text = ""
        txtDTLCustShpDateEnd.Text = ""

        txtCus1Sp.Text = ""

    End Sub

    Private Sub cboTV_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboTV.SelectedIndexChanged
        If cboTV.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboTV.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_tv")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_tv") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_tv") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub cboCusVen_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCusVen.SelectedIndexChanged
        If cboCusVen.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboCusVen.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusven")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusven") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_cusven") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub cboFA_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboFA.SelectedIndexChanged
        If cboFA.Text <> "" Then
            If sMode = cModeAdd Or sMode = cModeUpd Then
                Dim tmpstr As String
                tmpstr = cboFA.Text

                ''bug
                If Not IsDBNull(rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyaud")) Then
                    If tmpstr <> rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyaud") Then
                        Recordstatus = True
                        If rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*ADD*~" And rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") <> "~*NEW*~" Then
                            rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_creusr") = "~*UPD*~"
                        End If
                        rs_QUOTNDTL.Tables("RESULT").Rows(sReadingIndexQ).Item("qud_ftyaud") = tmpstr
                    End If
                End If
            End If
        End If
    End Sub
End Class




















