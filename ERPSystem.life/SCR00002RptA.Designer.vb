'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3655
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet8"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet8
    Inherits Global.System.Data.DataSet
    
    Private tableSCR00002RptA As SCR00002RptADataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SCR00002RptA")) Is Nothing) Then
                MyBase.Tables.Add(New SCR00002RptADataTable(ds.Tables("SCR00002RptA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SCR00002RptA() As SCR00002RptADataTable
        Get
            Return Me.tableSCR00002RptA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet8 = CType(MyBase.Clone,DataSet8)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SCR00002RptA")) Is Nothing) Then
                MyBase.Tables.Add(New SCR00002RptADataTable(ds.Tables("SCR00002RptA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSCR00002RptA = CType(MyBase.Tables("SCR00002RptA"),SCR00002RptADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSCR00002RptA) Is Nothing) Then
                Me.tableSCR00002RptA.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet8"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet8.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSCR00002RptA = New SCR00002RptADataTable
        MyBase.Tables.Add(Me.tableSCR00002RptA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSCR00002RptA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet8 = New DataSet8
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SCR00002RptARowChangeEventHandler(ByVal sender As Object, ByVal e As SCR00002RptARowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SCR00002RptADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncocde As Global.System.Data.DataColumn
        
        Private columnCustFrom As Global.System.Data.DataColumn
        
        Private columnCustTo As Global.System.Data.DataColumn
        
        Private columnDateFrom As Global.System.Data.DataColumn
        
        Private columnDateTo As Global.System.Data.DataColumn
        
        Private columncbi_cusno As Global.System.Data.DataColumn
        
        Private columncbi_cussna As Global.System.Data.DataColumn
        
        Private columnSod_total As Global.System.Data.DataColumn
        
        Private columnSod_FDET As Global.System.Data.DataColumn
        
        Private columnSod_FDHF As Global.System.Data.DataColumn
        
        Private columnSod_FDHW As Global.System.Data.DataColumn
        
        Private columnSod_FDMD As Global.System.Data.DataColumn
        
        Private columnSod_FDOH As Global.System.Data.DataColumn
        
        Private columnSod_FDVT As Global.System.Data.DataColumn
        
        Private columnSod_FDXM As Global.System.Data.DataColumn
        
        Private columnSod_GPGP As Global.System.Data.DataColumn
        
        Private columnSod_HDAB As Global.System.Data.DataColumn
        
        Private columnSod_HDCA As Global.System.Data.DataColumn
        
        Private columnSod_HDIA As Global.System.Data.DataColumn
        
        Private columnSod_HDIF As Global.System.Data.DataColumn
        
        Private columnSod_HDSC As Global.System.Data.DataColumn
        
        Private columnSod_OTOT As Global.System.Data.DataColumn
        
        Private columncompName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SCR00002RptA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cocdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncocde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cbi_cusnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncbi_cusno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cbi_cussnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncbi_cussna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDHFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDHF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDHWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDHW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDOHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDOH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDVTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDVT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_FDXMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_FDXM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_GPGPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_GPGP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_HDABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_HDAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_HDCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_HDCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_HDIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_HDIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_HDIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_HDIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_HDSCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_HDSC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sod_OTOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSod_OTOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SCR00002RptARow
            Get
                Return CType(Me.Rows(index),SCR00002RptARow)
            End Get
        End Property
        
        Public Event SCR00002RptARowChanging As SCR00002RptARowChangeEventHandler
        
        Public Event SCR00002RptARowChanged As SCR00002RptARowChangeEventHandler
        
        Public Event SCR00002RptARowDeleting As SCR00002RptARowChangeEventHandler
        
        Public Event SCR00002RptARowDeleted As SCR00002RptARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSCR00002RptARow(ByVal row As SCR00002RptARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSCR00002RptARow( _
                    ByVal cocde As String,  _
                    ByVal CustFrom As String,  _
                    ByVal CustTo As String,  _
                    ByVal DateFrom As String,  _
                    ByVal DateTo As String,  _
                    ByVal cbi_cusno As String,  _
                    ByVal cbi_cussna As String,  _
                    ByVal Sod_total As Double,  _
                    ByVal Sod_FDET As Double,  _
                    ByVal Sod_FDHF As Double,  _
                    ByVal Sod_FDHW As Double,  _
                    ByVal Sod_FDMD As Double,  _
                    ByVal Sod_FDOH As Double,  _
                    ByVal Sod_FDVT As Double,  _
                    ByVal Sod_FDXM As Double,  _
                    ByVal Sod_GPGP As Double,  _
                    ByVal Sod_HDAB As Double,  _
                    ByVal Sod_HDCA As Double,  _
                    ByVal Sod_HDIA As Double,  _
                    ByVal Sod_HDIF As Double,  _
                    ByVal Sod_HDSC As Double,  _
                    ByVal Sod_OTOT As Double,  _
                    ByVal compName As String) As SCR00002RptARow
            Dim rowSCR00002RptARow As SCR00002RptARow = CType(Me.NewRow,SCR00002RptARow)
            Dim columnValuesArray() As Object = New Object() {cocde, CustFrom, CustTo, DateFrom, DateTo, cbi_cusno, cbi_cussna, Sod_total, Sod_FDET, Sod_FDHF, Sod_FDHW, Sod_FDMD, Sod_FDOH, Sod_FDVT, Sod_FDXM, Sod_GPGP, Sod_HDAB, Sod_HDCA, Sod_HDIA, Sod_HDIF, Sod_HDSC, Sod_OTOT, compName}
            rowSCR00002RptARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSCR00002RptARow)
            Return rowSCR00002RptARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SCR00002RptADataTable = CType(MyBase.Clone,SCR00002RptADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SCR00002RptADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncocde = MyBase.Columns("cocde")
            Me.columnCustFrom = MyBase.Columns("CustFrom")
            Me.columnCustTo = MyBase.Columns("CustTo")
            Me.columnDateFrom = MyBase.Columns("DateFrom")
            Me.columnDateTo = MyBase.Columns("DateTo")
            Me.columncbi_cusno = MyBase.Columns("cbi_cusno")
            Me.columncbi_cussna = MyBase.Columns("cbi_cussna")
            Me.columnSod_total = MyBase.Columns("Sod_total")
            Me.columnSod_FDET = MyBase.Columns("Sod_FDET")
            Me.columnSod_FDHF = MyBase.Columns("Sod_FDHF")
            Me.columnSod_FDHW = MyBase.Columns("Sod_FDHW")
            Me.columnSod_FDMD = MyBase.Columns("Sod_FDMD")
            Me.columnSod_FDOH = MyBase.Columns("Sod_FDOH")
            Me.columnSod_FDVT = MyBase.Columns("Sod_FDVT")
            Me.columnSod_FDXM = MyBase.Columns("Sod_FDXM")
            Me.columnSod_GPGP = MyBase.Columns("Sod_GPGP")
            Me.columnSod_HDAB = MyBase.Columns("Sod_HDAB")
            Me.columnSod_HDCA = MyBase.Columns("Sod_HDCA")
            Me.columnSod_HDIA = MyBase.Columns("Sod_HDIA")
            Me.columnSod_HDIF = MyBase.Columns("Sod_HDIF")
            Me.columnSod_HDSC = MyBase.Columns("Sod_HDSC")
            Me.columnSod_OTOT = MyBase.Columns("Sod_OTOT")
            Me.columncompName = MyBase.Columns("compName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncocde = New Global.System.Data.DataColumn("cocde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncocde)
            Me.columnCustFrom = New Global.System.Data.DataColumn("CustFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustFrom)
            Me.columnCustTo = New Global.System.Data.DataColumn("CustTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustTo)
            Me.columnDateFrom = New Global.System.Data.DataColumn("DateFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFrom)
            Me.columnDateTo = New Global.System.Data.DataColumn("DateTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTo)
            Me.columncbi_cusno = New Global.System.Data.DataColumn("cbi_cusno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncbi_cusno)
            Me.columncbi_cussna = New Global.System.Data.DataColumn("cbi_cussna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncbi_cussna)
            Me.columnSod_total = New Global.System.Data.DataColumn("Sod_total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_total)
            Me.columnSod_FDET = New Global.System.Data.DataColumn("Sod_FDET", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDET)
            Me.columnSod_FDHF = New Global.System.Data.DataColumn("Sod_FDHF", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDHF)
            Me.columnSod_FDHW = New Global.System.Data.DataColumn("Sod_FDHW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDHW)
            Me.columnSod_FDMD = New Global.System.Data.DataColumn("Sod_FDMD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDMD)
            Me.columnSod_FDOH = New Global.System.Data.DataColumn("Sod_FDOH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDOH)
            Me.columnSod_FDVT = New Global.System.Data.DataColumn("Sod_FDVT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDVT)
            Me.columnSod_FDXM = New Global.System.Data.DataColumn("Sod_FDXM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_FDXM)
            Me.columnSod_GPGP = New Global.System.Data.DataColumn("Sod_GPGP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_GPGP)
            Me.columnSod_HDAB = New Global.System.Data.DataColumn("Sod_HDAB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_HDAB)
            Me.columnSod_HDCA = New Global.System.Data.DataColumn("Sod_HDCA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_HDCA)
            Me.columnSod_HDIA = New Global.System.Data.DataColumn("Sod_HDIA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_HDIA)
            Me.columnSod_HDIF = New Global.System.Data.DataColumn("Sod_HDIF", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_HDIF)
            Me.columnSod_HDSC = New Global.System.Data.DataColumn("Sod_HDSC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_HDSC)
            Me.columnSod_OTOT = New Global.System.Data.DataColumn("Sod_OTOT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSod_OTOT)
            Me.columncompName = New Global.System.Data.DataColumn("compName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSCR00002RptARow() As SCR00002RptARow
            Return CType(Me.NewRow,SCR00002RptARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SCR00002RptARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SCR00002RptARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SCR00002RptARowChangedEvent) Is Nothing) Then
                RaiseEvent SCR00002RptARowChanged(Me, New SCR00002RptARowChangeEvent(CType(e.Row,SCR00002RptARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SCR00002RptARowChangingEvent) Is Nothing) Then
                RaiseEvent SCR00002RptARowChanging(Me, New SCR00002RptARowChangeEvent(CType(e.Row,SCR00002RptARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SCR00002RptARowDeletedEvent) Is Nothing) Then
                RaiseEvent SCR00002RptARowDeleted(Me, New SCR00002RptARowChangeEvent(CType(e.Row,SCR00002RptARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SCR00002RptARowDeletingEvent) Is Nothing) Then
                RaiseEvent SCR00002RptARowDeleting(Me, New SCR00002RptARowChangeEvent(CType(e.Row,SCR00002RptARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSCR00002RptARow(ByVal row As SCR00002RptARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet8 = New DataSet8
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SCR00002RptADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SCR00002RptARow
        Inherits Global.System.Data.DataRow
        
        Private tableSCR00002RptA As SCR00002RptADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSCR00002RptA = CType(Me.Table,SCR00002RptADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cocde() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.cocdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cocde' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.cocdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.CustFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustFrom' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.CustFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.CustToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustTo' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.CustToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.DateFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFrom' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.DateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.DateToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateTo' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.DateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cbi_cusno() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.cbi_cusnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cbi_cusno' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.cbi_cusnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cbi_cussna() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.cbi_cussnaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cbi_cussna' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.cbi_cussnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_totalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_total' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDET() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDETColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDET' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDHF() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDHFColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDHF' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDHFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDHW() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDHWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDHW' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDHWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDMD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDMDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDMD' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDOH() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDOHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDOH' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDOHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDVT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDVTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDVT' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDVTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_FDXM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_FDXMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_FDXM' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_FDXMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_GPGP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_GPGPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_GPGP' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_GPGPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_HDAB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_HDABColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_HDAB' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_HDABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_HDCA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_HDCAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_HDCA' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_HDCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_HDIA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_HDIAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_HDIA' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_HDIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_HDIF() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_HDIFColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_HDIF' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_HDIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_HDSC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_HDSCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_HDSC' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_HDSCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sod_OTOT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.Sod_OTOTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sod_OTOT' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.Sod_OTOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSCR00002RptA.compNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'compName' in table 'SCR00002RptA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSCR00002RptA.compNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscocdeNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.cocdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcocdeNull()
            Me(Me.tableSCR00002RptA.cocdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustFromNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.CustFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustFromNull()
            Me(Me.tableSCR00002RptA.CustFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustToNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.CustToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustToNull()
            Me(Me.tableSCR00002RptA.CustToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFromNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.DateFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFromNull()
            Me(Me.tableSCR00002RptA.DateFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateToNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.DateToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateToNull()
            Me(Me.tableSCR00002RptA.DateToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscbi_cusnoNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.cbi_cusnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcbi_cusnoNull()
            Me(Me.tableSCR00002RptA.cbi_cusnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscbi_cussnaNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.cbi_cussnaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcbi_cussnaNull()
            Me(Me.tableSCR00002RptA.cbi_cussnaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_totalNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_totalNull()
            Me(Me.tableSCR00002RptA.Sod_totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDETNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDETNull()
            Me(Me.tableSCR00002RptA.Sod_FDETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDHFNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDHFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDHFNull()
            Me(Me.tableSCR00002RptA.Sod_FDHFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDHWNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDHWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDHWNull()
            Me(Me.tableSCR00002RptA.Sod_FDHWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDMDNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDMDNull()
            Me(Me.tableSCR00002RptA.Sod_FDMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDOHNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDOHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDOHNull()
            Me(Me.tableSCR00002RptA.Sod_FDOHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDVTNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDVTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDVTNull()
            Me(Me.tableSCR00002RptA.Sod_FDVTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_FDXMNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_FDXMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_FDXMNull()
            Me(Me.tableSCR00002RptA.Sod_FDXMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_GPGPNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_GPGPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_GPGPNull()
            Me(Me.tableSCR00002RptA.Sod_GPGPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_HDABNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_HDABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_HDABNull()
            Me(Me.tableSCR00002RptA.Sod_HDABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_HDCANull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_HDCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_HDCANull()
            Me(Me.tableSCR00002RptA.Sod_HDCAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_HDIANull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_HDIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_HDIANull()
            Me(Me.tableSCR00002RptA.Sod_HDIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_HDIFNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_HDIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_HDIFNull()
            Me(Me.tableSCR00002RptA.Sod_HDIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_HDSCNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_HDSCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_HDSCNull()
            Me(Me.tableSCR00002RptA.Sod_HDSCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSod_OTOTNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.Sod_OTOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSod_OTOTNull()
            Me(Me.tableSCR00002RptA.Sod_OTOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompNameNull() As Boolean
            Return Me.IsNull(Me.tableSCR00002RptA.compNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompNameNull()
            Me(Me.tableSCR00002RptA.compNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SCR00002RptARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SCR00002RptARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SCR00002RptARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SCR00002RptARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
