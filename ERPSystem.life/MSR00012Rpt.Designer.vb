'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3655
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsMSR00012Rpt"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsMSR00012Rpt
    Inherits Global.System.Data.DataSet
    
    Private tableMSR00012 As MSR00012DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MSR00012")) Is Nothing) Then
                MyBase.Tables.Add(New MSR00012DataTable(ds.Tables("MSR00012")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MSR00012() As MSR00012DataTable
        Get
            Return Me.tableMSR00012
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsMSR00012Rpt = CType(MyBase.Clone,dsMSR00012Rpt)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MSR00012")) Is Nothing) Then
                MyBase.Tables.Add(New MSR00012DataTable(ds.Tables("MSR00012")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMSR00012 = CType(MyBase.Tables("MSR00012"),MSR00012DataTable)
        If (initTable = true) Then
            If (Not (Me.tableMSR00012) Is Nothing) Then
                Me.tableMSR00012.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsMSR00012Rpt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MSR00012Rpt.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMSR00012 = New MSR00012DataTable
        MyBase.Tables.Add(Me.tableMSR00012)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMSR00012() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsMSR00012Rpt = New dsMSR00012Rpt
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MSR00012RowChangeEventHandler(ByVal sender As Object, ByVal e As MSR00012RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MSR00012DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSort As Global.System.Data.DataColumn
        
        Private columncocde As Global.System.Data.DataColumn
        
        Private columnCustFrom As Global.System.Data.DataColumn
        
        Private columnCustTo As Global.System.Data.DataColumn
        
        Private columnSecCust As Global.System.Data.DataColumn
        
        Private columnDateFrom As Global.System.Data.DataColumn
        
        Private columnDateTo As Global.System.Data.DataColumn
        
        Private columnsoh_cus1no As Global.System.Data.DataColumn
        
        Private columnsoh_cus1nam As Global.System.Data.DataColumn
        
        Private columnsoh_cus2no As Global.System.Data.DataColumn
        
        Private columnsoh_cus2nam As Global.System.Data.DataColumn
        
        Private columnsoh_curcde As Global.System.Data.DataColumn
        
        Private columnsod_OrdAmt As Global.System.Data.DataColumn
        
        Private columnsod_Eshp As Global.System.Data.DataColumn
        
        Private columnsod_Lshp As Global.System.Data.DataColumn
        
        Private columnsod_LOrd As Global.System.Data.DataColumn
        
        Private columnsod_LInv As Global.System.Data.DataColumn
        
        Private columnTotalHKD As Global.System.Data.DataColumn
        
        Private columnTotalUSD As Global.System.Data.DataColumn
        
        Private columncompName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MSR00012"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cocdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncocde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecCustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecCust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soh_cus1noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoh_cus1no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soh_cus1namColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoh_cus1nam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soh_cus2noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoh_cus2no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soh_cus2namColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoh_cus2nam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soh_curcdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoh_curcde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sod_OrdAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsod_OrdAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sod_EshpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsod_Eshp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sod_LshpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsod_Lshp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sod_LOrdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsod_LOrd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sod_LInvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsod_LInv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalHKDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalHKD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MSR00012Row
            Get
                Return CType(Me.Rows(index),MSR00012Row)
            End Get
        End Property
        
        Public Event MSR00012RowChanging As MSR00012RowChangeEventHandler
        
        Public Event MSR00012RowChanged As MSR00012RowChangeEventHandler
        
        Public Event MSR00012RowDeleting As MSR00012RowChangeEventHandler
        
        Public Event MSR00012RowDeleted As MSR00012RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMSR00012Row(ByVal row As MSR00012Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMSR00012Row( _
                    ByVal Sort As String,  _
                    ByVal cocde As String,  _
                    ByVal CustFrom As String,  _
                    ByVal CustTo As String,  _
                    ByVal SecCust As String,  _
                    ByVal DateFrom As String,  _
                    ByVal DateTo As String,  _
                    ByVal soh_cus1no As String,  _
                    ByVal soh_cus1nam As String,  _
                    ByVal soh_cus2no As String,  _
                    ByVal soh_cus2nam As String,  _
                    ByVal soh_curcde As String,  _
                    ByVal sod_OrdAmt As Decimal,  _
                    ByVal sod_Eshp As String,  _
                    ByVal sod_Lshp As String,  _
                    ByVal sod_LOrd As String,  _
                    ByVal sod_LInv As String,  _
                    ByVal TotalHKD As Decimal,  _
                    ByVal TotalUSD As Decimal,  _
                    ByVal compName As String) As MSR00012Row
            Dim rowMSR00012Row As MSR00012Row = CType(Me.NewRow,MSR00012Row)
            Dim columnValuesArray() As Object = New Object() {Sort, cocde, CustFrom, CustTo, SecCust, DateFrom, DateTo, soh_cus1no, soh_cus1nam, soh_cus2no, soh_cus2nam, soh_curcde, sod_OrdAmt, sod_Eshp, sod_Lshp, sod_LOrd, sod_LInv, TotalHKD, TotalUSD, compName}
            rowMSR00012Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowMSR00012Row)
            Return rowMSR00012Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MSR00012DataTable = CType(MyBase.Clone,MSR00012DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MSR00012DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSort = MyBase.Columns("Sort")
            Me.columncocde = MyBase.Columns("cocde")
            Me.columnCustFrom = MyBase.Columns("CustFrom")
            Me.columnCustTo = MyBase.Columns("CustTo")
            Me.columnSecCust = MyBase.Columns("SecCust")
            Me.columnDateFrom = MyBase.Columns("DateFrom")
            Me.columnDateTo = MyBase.Columns("DateTo")
            Me.columnsoh_cus1no = MyBase.Columns("soh_cus1no")
            Me.columnsoh_cus1nam = MyBase.Columns("soh_cus1nam")
            Me.columnsoh_cus2no = MyBase.Columns("soh_cus2no")
            Me.columnsoh_cus2nam = MyBase.Columns("soh_cus2nam")
            Me.columnsoh_curcde = MyBase.Columns("soh_curcde")
            Me.columnsod_OrdAmt = MyBase.Columns("sod_OrdAmt")
            Me.columnsod_Eshp = MyBase.Columns("sod_Eshp")
            Me.columnsod_Lshp = MyBase.Columns("sod_Lshp")
            Me.columnsod_LOrd = MyBase.Columns("sod_LOrd")
            Me.columnsod_LInv = MyBase.Columns("sod_LInv")
            Me.columnTotalHKD = MyBase.Columns("TotalHKD")
            Me.columnTotalUSD = MyBase.Columns("TotalUSD")
            Me.columncompName = MyBase.Columns("compName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSort = New Global.System.Data.DataColumn("Sort", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSort)
            Me.columncocde = New Global.System.Data.DataColumn("cocde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncocde)
            Me.columnCustFrom = New Global.System.Data.DataColumn("CustFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustFrom)
            Me.columnCustTo = New Global.System.Data.DataColumn("CustTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustTo)
            Me.columnSecCust = New Global.System.Data.DataColumn("SecCust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecCust)
            Me.columnDateFrom = New Global.System.Data.DataColumn("DateFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFrom)
            Me.columnDateTo = New Global.System.Data.DataColumn("DateTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTo)
            Me.columnsoh_cus1no = New Global.System.Data.DataColumn("soh_cus1no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoh_cus1no)
            Me.columnsoh_cus1nam = New Global.System.Data.DataColumn("soh_cus1nam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoh_cus1nam)
            Me.columnsoh_cus2no = New Global.System.Data.DataColumn("soh_cus2no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoh_cus2no)
            Me.columnsoh_cus2nam = New Global.System.Data.DataColumn("soh_cus2nam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoh_cus2nam)
            Me.columnsoh_curcde = New Global.System.Data.DataColumn("soh_curcde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoh_curcde)
            Me.columnsod_OrdAmt = New Global.System.Data.DataColumn("sod_OrdAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsod_OrdAmt)
            Me.columnsod_Eshp = New Global.System.Data.DataColumn("sod_Eshp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsod_Eshp)
            Me.columnsod_Lshp = New Global.System.Data.DataColumn("sod_Lshp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsod_Lshp)
            Me.columnsod_LOrd = New Global.System.Data.DataColumn("sod_LOrd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsod_LOrd)
            Me.columnsod_LInv = New Global.System.Data.DataColumn("sod_LInv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsod_LInv)
            Me.columnTotalHKD = New Global.System.Data.DataColumn("TotalHKD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalHKD)
            Me.columnTotalUSD = New Global.System.Data.DataColumn("TotalUSD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUSD)
            Me.columncompName = New Global.System.Data.DataColumn("compName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMSR00012Row() As MSR00012Row
            Return CType(Me.NewRow,MSR00012Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MSR00012Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MSR00012Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MSR00012RowChangedEvent) Is Nothing) Then
                RaiseEvent MSR00012RowChanged(Me, New MSR00012RowChangeEvent(CType(e.Row,MSR00012Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MSR00012RowChangingEvent) Is Nothing) Then
                RaiseEvent MSR00012RowChanging(Me, New MSR00012RowChangeEvent(CType(e.Row,MSR00012Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MSR00012RowDeletedEvent) Is Nothing) Then
                RaiseEvent MSR00012RowDeleted(Me, New MSR00012RowChangeEvent(CType(e.Row,MSR00012Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MSR00012RowDeletingEvent) Is Nothing) Then
                RaiseEvent MSR00012RowDeleting(Me, New MSR00012RowChangeEvent(CType(e.Row,MSR00012Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMSR00012Row(ByVal row As MSR00012Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsMSR00012Rpt = New dsMSR00012Rpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MSR00012DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MSR00012Row
        Inherits Global.System.Data.DataRow
        
        Private tableMSR00012 As MSR00012DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMSR00012 = CType(Me.Table,MSR00012DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sort() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.SortColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sort' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.SortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cocde() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.cocdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cocde' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.cocdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.CustFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustFrom' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.CustFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.CustToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustTo' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.CustToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecCust() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.SecCustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecCust' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.SecCustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.DateFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFrom' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.DateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.DateToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateTo' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.DateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soh_cus1no() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.soh_cus1noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soh_cus1no' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.soh_cus1noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soh_cus1nam() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.soh_cus1namColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soh_cus1nam' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.soh_cus1namColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soh_cus2no() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.soh_cus2noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soh_cus2no' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.soh_cus2noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soh_cus2nam() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.soh_cus2namColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soh_cus2nam' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.soh_cus2namColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soh_curcde() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.soh_curcdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soh_curcde' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.soh_curcdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sod_OrdAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.sod_OrdAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sod_OrdAmt' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.sod_OrdAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sod_Eshp() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.sod_EshpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sod_Eshp' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.sod_EshpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sod_Lshp() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.sod_LshpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sod_Lshp' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.sod_LshpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sod_LOrd() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.sod_LOrdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sod_LOrd' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.sod_LOrdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sod_LInv() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.sod_LInvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sod_LInv' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.sod_LInvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalHKD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.TotalHKDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalHKD' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.TotalHKDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUSD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.TotalUSDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalUSD' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.TotalUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSR00012.compNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'compName' in table 'MSR00012' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSR00012.compNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSortNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.SortColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSortNull()
            Me(Me.tableMSR00012.SortColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscocdeNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.cocdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcocdeNull()
            Me(Me.tableMSR00012.cocdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustFromNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.CustFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustFromNull()
            Me(Me.tableMSR00012.CustFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustToNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.CustToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustToNull()
            Me(Me.tableMSR00012.CustToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecCustNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.SecCustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecCustNull()
            Me(Me.tableMSR00012.SecCustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFromNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.DateFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFromNull()
            Me(Me.tableMSR00012.DateFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateToNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.DateToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateToNull()
            Me(Me.tableMSR00012.DateToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoh_cus1noNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.soh_cus1noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoh_cus1noNull()
            Me(Me.tableMSR00012.soh_cus1noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoh_cus1namNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.soh_cus1namColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoh_cus1namNull()
            Me(Me.tableMSR00012.soh_cus1namColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoh_cus2noNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.soh_cus2noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoh_cus2noNull()
            Me(Me.tableMSR00012.soh_cus2noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoh_cus2namNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.soh_cus2namColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoh_cus2namNull()
            Me(Me.tableMSR00012.soh_cus2namColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issoh_curcdeNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.soh_curcdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsoh_curcdeNull()
            Me(Me.tableMSR00012.soh_curcdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issod_OrdAmtNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.sod_OrdAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsod_OrdAmtNull()
            Me(Me.tableMSR00012.sod_OrdAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issod_EshpNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.sod_EshpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsod_EshpNull()
            Me(Me.tableMSR00012.sod_EshpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issod_LshpNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.sod_LshpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsod_LshpNull()
            Me(Me.tableMSR00012.sod_LshpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issod_LOrdNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.sod_LOrdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsod_LOrdNull()
            Me(Me.tableMSR00012.sod_LOrdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issod_LInvNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.sod_LInvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsod_LInvNull()
            Me(Me.tableMSR00012.sod_LInvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalHKDNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.TotalHKDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalHKDNull()
            Me(Me.tableMSR00012.TotalHKDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalUSDNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.TotalUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalUSDNull()
            Me(Me.tableMSR00012.TotalUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompNameNull() As Boolean
            Return Me.IsNull(Me.tableMSR00012.compNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompNameNull()
            Me(Me.tableMSR00012.compNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MSR00012RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MSR00012Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MSR00012Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MSR00012Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
