'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3655
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet7"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet7
    Inherits Global.System.Data.DataSet
    
    Private tableINR00011rpt As INR00011rptDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INR00011rpt")) Is Nothing) Then
                MyBase.Tables.Add(New INR00011rptDataTable(ds.Tables("INR00011rpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INR00011rpt() As INR00011rptDataTable
        Get
            Return Me.tableINR00011rpt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet7 = CType(MyBase.Clone,DataSet7)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("INR00011rpt")) Is Nothing) Then
                MyBase.Tables.Add(New INR00011rptDataTable(ds.Tables("INR00011rpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableINR00011rpt = CType(MyBase.Tables("INR00011rpt"),INR00011rptDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINR00011rpt) Is Nothing) Then
                Me.tableINR00011rpt.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet7"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet7.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableINR00011rpt = New INR00011rptDataTable
        MyBase.Tables.Add(Me.tableINR00011rpt)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINR00011rpt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet7 = New DataSet7
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub INR00011rptRowChangeEventHandler(ByVal sender As Object, ByVal e As INR00011rptRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INR00011rptDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCocde As Global.System.Data.DataColumn
        
        Private columnVendor As Global.System.Data.DataColumn
        
        Private columnVendor_Label As Global.System.Data.DataColumn
        
        Private columnSCFm As Global.System.Data.DataColumn
        
        Private columnSCTo As Global.System.Data.DataColumn
        
        Private columnRptDateFrom As Global.System.Data.DataColumn
        
        Private columnRptDateTo As Global.System.Data.DataColumn
        
        Private columnDateFrom As Global.System.Data.DataColumn
        
        Private columnDateTo As Global.System.Data.DataColumn
        
        Private columnUSDOSAMT As Global.System.Data.DataColumn
        
        Private columnUSDAMT As Global.System.Data.DataColumn
        
        Private columnPUSDAMT As Global.System.Data.DataColumn
        
        Private columnDIFFERENCE As Global.System.Data.DataColumn
        
        Private columnACTSHIP As Global.System.Data.DataColumn
        
        Private columncust As Global.System.Data.DataColumn
        
        Private columncust_label As Global.System.Data.DataColumn
        
        Private columnoptYear As Global.System.Data.DataColumn
        
        Private columnoptActShip As Global.System.Data.DataColumn
        
        Private columnoptPeriod As Global.System.Data.DataColumn
        
        Private columncompName As Global.System.Data.DataColumn
        
        Private columnDataColumn1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INR00011rpt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CocdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCocde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vendor_LabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor_Label
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCFmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCFm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RptDateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRptDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RptDateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRptDateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USDOSAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSDOSAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PUSDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPUSDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFFERENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFFERENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTSHIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTSHIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cust_labelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_label
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property optYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoptYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property optActShipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoptActShip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property optPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoptPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataColumn1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataColumn1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INR00011rptRow
            Get
                Return CType(Me.Rows(index),INR00011rptRow)
            End Get
        End Property
        
        Public Event INR00011rptRowChanging As INR00011rptRowChangeEventHandler
        
        Public Event INR00011rptRowChanged As INR00011rptRowChangeEventHandler
        
        Public Event INR00011rptRowDeleting As INR00011rptRowChangeEventHandler
        
        Public Event INR00011rptRowDeleted As INR00011rptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINR00011rptRow(ByVal row As INR00011rptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINR00011rptRow( _
                    ByVal Cocde As String,  _
                    ByVal Vendor As String,  _
                    ByVal Vendor_Label As String,  _
                    ByVal SCFm As String,  _
                    ByVal SCTo As String,  _
                    ByVal RptDateFrom As String,  _
                    ByVal RptDateTo As String,  _
                    ByVal DateFrom As String,  _
                    ByVal DateTo As String,  _
                    ByVal USDOSAMT As Double,  _
                    ByVal USDAMT As Double,  _
                    ByVal PUSDAMT As Double,  _
                    ByVal DIFFERENCE As Double,  _
                    ByVal ACTSHIP As Double,  _
                    ByVal cust As String,  _
                    ByVal cust_label As String,  _
                    ByVal optYear As String,  _
                    ByVal optActShip As String,  _
                    ByVal optPeriod As String,  _
                    ByVal compName As String,  _
                    ByVal DataColumn1 As String) As INR00011rptRow
            Dim rowINR00011rptRow As INR00011rptRow = CType(Me.NewRow,INR00011rptRow)
            Dim columnValuesArray() As Object = New Object() {Cocde, Vendor, Vendor_Label, SCFm, SCTo, RptDateFrom, RptDateTo, DateFrom, DateTo, USDOSAMT, USDAMT, PUSDAMT, DIFFERENCE, ACTSHIP, cust, cust_label, optYear, optActShip, optPeriod, compName, DataColumn1}
            rowINR00011rptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINR00011rptRow)
            Return rowINR00011rptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INR00011rptDataTable = CType(MyBase.Clone,INR00011rptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INR00011rptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCocde = MyBase.Columns("Cocde")
            Me.columnVendor = MyBase.Columns("Vendor")
            Me.columnVendor_Label = MyBase.Columns("Vendor_Label")
            Me.columnSCFm = MyBase.Columns("SCFm")
            Me.columnSCTo = MyBase.Columns("SCTo")
            Me.columnRptDateFrom = MyBase.Columns("RptDateFrom")
            Me.columnRptDateTo = MyBase.Columns("RptDateTo")
            Me.columnDateFrom = MyBase.Columns("DateFrom")
            Me.columnDateTo = MyBase.Columns("DateTo")
            Me.columnUSDOSAMT = MyBase.Columns("USDOSAMT")
            Me.columnUSDAMT = MyBase.Columns("USDAMT")
            Me.columnPUSDAMT = MyBase.Columns("PUSDAMT")
            Me.columnDIFFERENCE = MyBase.Columns("DIFFERENCE")
            Me.columnACTSHIP = MyBase.Columns("ACTSHIP")
            Me.columncust = MyBase.Columns("cust")
            Me.columncust_label = MyBase.Columns("cust_label")
            Me.columnoptYear = MyBase.Columns("optYear")
            Me.columnoptActShip = MyBase.Columns("optActShip")
            Me.columnoptPeriod = MyBase.Columns("optPeriod")
            Me.columncompName = MyBase.Columns("compName")
            Me.columnDataColumn1 = MyBase.Columns("DataColumn1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCocde = New Global.System.Data.DataColumn("Cocde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCocde)
            Me.columnVendor = New Global.System.Data.DataColumn("Vendor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor)
            Me.columnVendor_Label = New Global.System.Data.DataColumn("Vendor_Label", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor_Label)
            Me.columnSCFm = New Global.System.Data.DataColumn("SCFm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCFm)
            Me.columnSCTo = New Global.System.Data.DataColumn("SCTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCTo)
            Me.columnRptDateFrom = New Global.System.Data.DataColumn("RptDateFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRptDateFrom)
            Me.columnRptDateTo = New Global.System.Data.DataColumn("RptDateTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRptDateTo)
            Me.columnDateFrom = New Global.System.Data.DataColumn("DateFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateFrom)
            Me.columnDateTo = New Global.System.Data.DataColumn("DateTo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTo)
            Me.columnUSDOSAMT = New Global.System.Data.DataColumn("USDOSAMT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSDOSAMT)
            Me.columnUSDAMT = New Global.System.Data.DataColumn("USDAMT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSDAMT)
            Me.columnPUSDAMT = New Global.System.Data.DataColumn("PUSDAMT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPUSDAMT)
            Me.columnDIFFERENCE = New Global.System.Data.DataColumn("DIFFERENCE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFFERENCE)
            Me.columnACTSHIP = New Global.System.Data.DataColumn("ACTSHIP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTSHIP)
            Me.columncust = New Global.System.Data.DataColumn("cust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust)
            Me.columncust_label = New Global.System.Data.DataColumn("cust_label", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_label)
            Me.columnoptYear = New Global.System.Data.DataColumn("optYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoptYear)
            Me.columnoptActShip = New Global.System.Data.DataColumn("optActShip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoptActShip)
            Me.columnoptPeriod = New Global.System.Data.DataColumn("optPeriod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoptPeriod)
            Me.columncompName = New Global.System.Data.DataColumn("compName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompName)
            Me.columnDataColumn1 = New Global.System.Data.DataColumn("DataColumn1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataColumn1)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINR00011rptRow() As INR00011rptRow
            Return CType(Me.NewRow,INR00011rptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INR00011rptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INR00011rptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INR00011rptRowChangedEvent) Is Nothing) Then
                RaiseEvent INR00011rptRowChanged(Me, New INR00011rptRowChangeEvent(CType(e.Row,INR00011rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INR00011rptRowChangingEvent) Is Nothing) Then
                RaiseEvent INR00011rptRowChanging(Me, New INR00011rptRowChangeEvent(CType(e.Row,INR00011rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INR00011rptRowDeletedEvent) Is Nothing) Then
                RaiseEvent INR00011rptRowDeleted(Me, New INR00011rptRowChangeEvent(CType(e.Row,INR00011rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INR00011rptRowDeletingEvent) Is Nothing) Then
                RaiseEvent INR00011rptRowDeleting(Me, New INR00011rptRowChangeEvent(CType(e.Row,INR00011rptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINR00011rptRow(ByVal row As INR00011rptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet7 = New DataSet7
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INR00011rptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INR00011rptRow
        Inherits Global.System.Data.DataRow
        
        Private tableINR00011rpt As INR00011rptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINR00011rpt = CType(Me.Table,INR00011rptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cocde() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.CocdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cocde' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.CocdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendor() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.VendorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendor' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.VendorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendor_Label() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.Vendor_LabelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendor_Label' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.Vendor_LabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCFm() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.SCFmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCFm' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.SCFmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.SCToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCTo' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.SCToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RptDateFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.RptDateFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RptDateFrom' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.RptDateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RptDateTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.RptDateToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RptDateTo' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.RptDateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.DateFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateFrom' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.DateFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.DateToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateTo' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.DateToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USDOSAMT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.USDOSAMTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USDOSAMT' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.USDOSAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USDAMT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.USDAMTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USDAMT' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.USDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PUSDAMT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.PUSDAMTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PUSDAMT' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.PUSDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFFERENCE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.DIFFERENCEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIFFERENCE' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.DIFFERENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTSHIP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.ACTSHIPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTSHIP' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.ACTSHIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cust() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.custColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cust' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.custColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cust_label() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.cust_labelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cust_label' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.cust_labelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property optYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.optYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'optYear' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.optYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property optActShip() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.optActShipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'optActShip' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.optActShipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property optPeriod() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.optPeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'optPeriod' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.optPeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compName() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.compNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'compName' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.compNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataColumn1() As String
            Get
                Try 
                    Return CType(Me(Me.tableINR00011rpt.DataColumn1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataColumn1' in table 'INR00011rpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINR00011rpt.DataColumn1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCocdeNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.CocdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCocdeNull()
            Me(Me.tableINR00011rpt.CocdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.VendorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorNull()
            Me(Me.tableINR00011rpt.VendorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendor_LabelNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.Vendor_LabelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendor_LabelNull()
            Me(Me.tableINR00011rpt.Vendor_LabelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCFmNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.SCFmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCFmNull()
            Me(Me.tableINR00011rpt.SCFmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCToNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.SCToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCToNull()
            Me(Me.tableINR00011rpt.SCToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRptDateFromNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.RptDateFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRptDateFromNull()
            Me(Me.tableINR00011rpt.RptDateFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRptDateToNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.RptDateToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRptDateToNull()
            Me(Me.tableINR00011rpt.RptDateToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateFromNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.DateFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateFromNull()
            Me(Me.tableINR00011rpt.DateFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateToNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.DateToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateToNull()
            Me(Me.tableINR00011rpt.DateToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSDOSAMTNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.USDOSAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSDOSAMTNull()
            Me(Me.tableINR00011rpt.USDOSAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSDAMTNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.USDAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSDAMTNull()
            Me(Me.tableINR00011rpt.USDAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPUSDAMTNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.PUSDAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPUSDAMTNull()
            Me(Me.tableINR00011rpt.PUSDAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFFERENCENull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.DIFFERENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFFERENCENull()
            Me(Me.tableINR00011rpt.DIFFERENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTSHIPNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.ACTSHIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTSHIPNull()
            Me(Me.tableINR00011rpt.ACTSHIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.custColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustNull()
            Me(Me.tableINR00011rpt.custColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscust_labelNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.cust_labelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcust_labelNull()
            Me(Me.tableINR00011rpt.cust_labelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoptYearNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.optYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoptYearNull()
            Me(Me.tableINR00011rpt.optYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoptActShipNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.optActShipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoptActShipNull()
            Me(Me.tableINR00011rpt.optActShipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoptPeriodNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.optPeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoptPeriodNull()
            Me(Me.tableINR00011rpt.optPeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompNameNull() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.compNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompNameNull()
            Me(Me.tableINR00011rpt.compNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataColumn1Null() As Boolean
            Return Me.IsNull(Me.tableINR00011rpt.DataColumn1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataColumn1Null()
            Me(Me.tableINR00011rpt.DataColumn1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INR00011rptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INR00011rptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INR00011rptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INR00011rptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
