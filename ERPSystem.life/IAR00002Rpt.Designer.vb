'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3634
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsIAR00002Rpt"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsIAR00002Rpt
    Inherits Global.System.Data.DataSet
    
    Private tableIAR00002 As IAR00002DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IAR00002")) Is Nothing) Then
                MyBase.Tables.Add(New IAR00002DataTable(ds.Tables("IAR00002")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IAR00002() As IAR00002DataTable
        Get
            Return Me.tableIAR00002
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsIAR00002Rpt = CType(MyBase.Clone,dsIAR00002Rpt)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IAR00002")) Is Nothing) Then
                MyBase.Tables.Add(New IAR00002DataTable(ds.Tables("IAR00002")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIAR00002 = CType(MyBase.Tables("IAR00002"),IAR00002DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIAR00002) Is Nothing) Then
                Me.tableIAR00002.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsIAR00002Rpt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/IAR00002Rpt.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIAR00002 = New IAR00002DataTable
        MyBase.Tables.Add(Me.tableIAR00002)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIAR00002() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsIAR00002Rpt = New dsIAR00002Rpt
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IAR00002RowChangeEventHandler(ByVal sender As Object, ByVal e As IAR00002RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IAR00002DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnibi_itmno As Global.System.Data.DataColumn
        
        Private columnipi_pckseq As Global.System.Data.DataColumn
        
        Private columnipi_pckunt As Global.System.Data.DataColumn
        
        Private columnimu_ftyprc As Global.System.Data.DataColumn
        
        Private columnimu_basprc As Global.System.Data.DataColumn
        
        Private columnipi_credat As Global.System.Data.DataColumn
        
        Private columnbeforepacking As Global.System.Data.DataColumn
        
        Private columnafterpacking As Global.System.Data.DataColumn
        
        Private columnbeforeftyprc As Global.System.Data.DataColumn
        
        Private columnafterftyprc As Global.System.Data.DataColumn
        
        Private columnyfi_prcfml As Global.System.Data.DataColumn
        
        Private columnibi_engdsc As Global.System.Data.DataColumn
        
        Private columnexistflag As Global.System.Data.DataColumn
        
        Private columnibi_cocde As Global.System.Data.DataColumn
        
        Private columnivi_venitm As Global.System.Data.DataColumn
        
        Private columncompName As Global.System.Data.DataColumn
        
        Private columnimu_cus1no As Global.System.Data.DataColumn
        
        Private columnimu_cus2no As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IAR00002"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ibi_itmnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnibi_itmno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipi_pckseqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipi_pckseq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipi_pckuntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipi_pckunt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imu_ftyprcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimu_ftyprc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imu_basprcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimu_basprc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipi_credatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipi_credat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property beforepackingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbeforepacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property afterpackingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnafterpacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property beforeftyprcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbeforeftyprc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property afterftyprcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnafterftyprc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property yfi_prcfmlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyfi_prcfml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ibi_engdscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnibi_engdsc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property existflagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexistflag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ibi_cocdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnibi_cocde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ivi_venitmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnivi_venitm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property compNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imu_cus1noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimu_cus1no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imu_cus2noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimu_cus2no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IAR00002Row
            Get
                Return CType(Me.Rows(index),IAR00002Row)
            End Get
        End Property
        
        Public Event IAR00002RowChanging As IAR00002RowChangeEventHandler
        
        Public Event IAR00002RowChanged As IAR00002RowChangeEventHandler
        
        Public Event IAR00002RowDeleting As IAR00002RowChangeEventHandler
        
        Public Event IAR00002RowDeleted As IAR00002RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIAR00002Row(ByVal row As IAR00002Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIAR00002Row( _
                    ByVal ibi_itmno As String,  _
                    ByVal ipi_pckseq As String,  _
                    ByVal ipi_pckunt As String,  _
                    ByVal imu_ftyprc As String,  _
                    ByVal imu_basprc As String,  _
                    ByVal ipi_credat As String,  _
                    ByVal beforepacking As String,  _
                    ByVal afterpacking As String,  _
                    ByVal beforeftyprc As String,  _
                    ByVal afterftyprc As String,  _
                    ByVal yfi_prcfml As String,  _
                    ByVal ibi_engdsc As String,  _
                    ByVal existflag As String,  _
                    ByVal ibi_cocde As String,  _
                    ByVal ivi_venitm As String,  _
                    ByVal compName As String,  _
                    ByVal imu_cus1no As String,  _
                    ByVal imu_cus2no As String) As IAR00002Row
            Dim rowIAR00002Row As IAR00002Row = CType(Me.NewRow,IAR00002Row)
            Dim columnValuesArray() As Object = New Object() {ibi_itmno, ipi_pckseq, ipi_pckunt, imu_ftyprc, imu_basprc, ipi_credat, beforepacking, afterpacking, beforeftyprc, afterftyprc, yfi_prcfml, ibi_engdsc, existflag, ibi_cocde, ivi_venitm, compName, imu_cus1no, imu_cus2no}
            rowIAR00002Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIAR00002Row)
            Return rowIAR00002Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IAR00002DataTable = CType(MyBase.Clone,IAR00002DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IAR00002DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnibi_itmno = MyBase.Columns("ibi_itmno")
            Me.columnipi_pckseq = MyBase.Columns("ipi_pckseq")
            Me.columnipi_pckunt = MyBase.Columns("ipi_pckunt")
            Me.columnimu_ftyprc = MyBase.Columns("imu_ftyprc")
            Me.columnimu_basprc = MyBase.Columns("imu_basprc")
            Me.columnipi_credat = MyBase.Columns("ipi_credat")
            Me.columnbeforepacking = MyBase.Columns("beforepacking")
            Me.columnafterpacking = MyBase.Columns("afterpacking")
            Me.columnbeforeftyprc = MyBase.Columns("beforeftyprc")
            Me.columnafterftyprc = MyBase.Columns("afterftyprc")
            Me.columnyfi_prcfml = MyBase.Columns("yfi_prcfml")
            Me.columnibi_engdsc = MyBase.Columns("ibi_engdsc")
            Me.columnexistflag = MyBase.Columns("existflag")
            Me.columnibi_cocde = MyBase.Columns("ibi_cocde")
            Me.columnivi_venitm = MyBase.Columns("ivi_venitm")
            Me.columncompName = MyBase.Columns("compName")
            Me.columnimu_cus1no = MyBase.Columns("imu_cus1no")
            Me.columnimu_cus2no = MyBase.Columns("imu_cus2no")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnibi_itmno = New Global.System.Data.DataColumn("ibi_itmno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnibi_itmno)
            Me.columnipi_pckseq = New Global.System.Data.DataColumn("ipi_pckseq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipi_pckseq)
            Me.columnipi_pckunt = New Global.System.Data.DataColumn("ipi_pckunt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipi_pckunt)
            Me.columnimu_ftyprc = New Global.System.Data.DataColumn("imu_ftyprc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimu_ftyprc)
            Me.columnimu_basprc = New Global.System.Data.DataColumn("imu_basprc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimu_basprc)
            Me.columnipi_credat = New Global.System.Data.DataColumn("ipi_credat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipi_credat)
            Me.columnbeforepacking = New Global.System.Data.DataColumn("beforepacking", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbeforepacking)
            Me.columnafterpacking = New Global.System.Data.DataColumn("afterpacking", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnafterpacking)
            Me.columnbeforeftyprc = New Global.System.Data.DataColumn("beforeftyprc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbeforeftyprc)
            Me.columnafterftyprc = New Global.System.Data.DataColumn("afterftyprc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnafterftyprc)
            Me.columnyfi_prcfml = New Global.System.Data.DataColumn("yfi_prcfml", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyfi_prcfml)
            Me.columnibi_engdsc = New Global.System.Data.DataColumn("ibi_engdsc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnibi_engdsc)
            Me.columnexistflag = New Global.System.Data.DataColumn("existflag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexistflag)
            Me.columnibi_cocde = New Global.System.Data.DataColumn("ibi_cocde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnibi_cocde)
            Me.columnivi_venitm = New Global.System.Data.DataColumn("ivi_venitm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnivi_venitm)
            Me.columncompName = New Global.System.Data.DataColumn("compName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompName)
            Me.columnimu_cus1no = New Global.System.Data.DataColumn("imu_cus1no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimu_cus1no)
            Me.columnimu_cus2no = New Global.System.Data.DataColumn("imu_cus2no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimu_cus2no)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIAR00002Row() As IAR00002Row
            Return CType(Me.NewRow,IAR00002Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IAR00002Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IAR00002Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IAR00002RowChangedEvent) Is Nothing) Then
                RaiseEvent IAR00002RowChanged(Me, New IAR00002RowChangeEvent(CType(e.Row,IAR00002Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IAR00002RowChangingEvent) Is Nothing) Then
                RaiseEvent IAR00002RowChanging(Me, New IAR00002RowChangeEvent(CType(e.Row,IAR00002Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IAR00002RowDeletedEvent) Is Nothing) Then
                RaiseEvent IAR00002RowDeleted(Me, New IAR00002RowChangeEvent(CType(e.Row,IAR00002Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IAR00002RowDeletingEvent) Is Nothing) Then
                RaiseEvent IAR00002RowDeleting(Me, New IAR00002RowChangeEvent(CType(e.Row,IAR00002Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIAR00002Row(ByVal row As IAR00002Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAR00002Rpt = New dsIAR00002Rpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IAR00002DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IAR00002Row
        Inherits Global.System.Data.DataRow
        
        Private tableIAR00002 As IAR00002DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIAR00002 = CType(Me.Table,IAR00002DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ibi_itmno() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ibi_itmnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ibi_itmno' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ibi_itmnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipi_pckseq() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ipi_pckseqColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipi_pckseq' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ipi_pckseqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipi_pckunt() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ipi_pckuntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipi_pckunt' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ipi_pckuntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imu_ftyprc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.imu_ftyprcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imu_ftyprc' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.imu_ftyprcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imu_basprc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.imu_basprcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imu_basprc' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.imu_basprcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipi_credat() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ipi_credatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipi_credat' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ipi_credatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property beforepacking() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.beforepackingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'beforepacking' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.beforepackingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property afterpacking() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.afterpackingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'afterpacking' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.afterpackingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property beforeftyprc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.beforeftyprcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'beforeftyprc' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.beforeftyprcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property afterftyprc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.afterftyprcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'afterftyprc' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.afterftyprcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property yfi_prcfml() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.yfi_prcfmlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yfi_prcfml' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.yfi_prcfmlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ibi_engdsc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ibi_engdscColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ibi_engdsc' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ibi_engdscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property existflag() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.existflagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'existflag' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.existflagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ibi_cocde() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ibi_cocdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ibi_cocde' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ibi_cocdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ivi_venitm() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.ivi_venitmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ivi_venitm' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.ivi_venitmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property compName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.compNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'compName' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.compNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imu_cus1no() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.imu_cus1noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imu_cus1no' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.imu_cus1noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imu_cus2no() As String
            Get
                Try 
                    Return CType(Me(Me.tableIAR00002.imu_cus2noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'imu_cus2no' in table 'IAR00002' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIAR00002.imu_cus2noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isibi_itmnoNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ibi_itmnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setibi_itmnoNull()
            Me(Me.tableIAR00002.ibi_itmnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipi_pckseqNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ipi_pckseqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipi_pckseqNull()
            Me(Me.tableIAR00002.ipi_pckseqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipi_pckuntNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ipi_pckuntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipi_pckuntNull()
            Me(Me.tableIAR00002.ipi_pckuntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimu_ftyprcNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.imu_ftyprcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimu_ftyprcNull()
            Me(Me.tableIAR00002.imu_ftyprcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimu_basprcNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.imu_basprcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimu_basprcNull()
            Me(Me.tableIAR00002.imu_basprcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipi_credatNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ipi_credatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipi_credatNull()
            Me(Me.tableIAR00002.ipi_credatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbeforepackingNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.beforepackingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbeforepackingNull()
            Me(Me.tableIAR00002.beforepackingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsafterpackingNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.afterpackingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetafterpackingNull()
            Me(Me.tableIAR00002.afterpackingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbeforeftyprcNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.beforeftyprcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbeforeftyprcNull()
            Me(Me.tableIAR00002.beforeftyprcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsafterftyprcNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.afterftyprcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetafterftyprcNull()
            Me(Me.tableIAR00002.afterftyprcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isyfi_prcfmlNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.yfi_prcfmlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setyfi_prcfmlNull()
            Me(Me.tableIAR00002.yfi_prcfmlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isibi_engdscNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ibi_engdscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setibi_engdscNull()
            Me(Me.tableIAR00002.ibi_engdscColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexistflagNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.existflagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexistflagNull()
            Me(Me.tableIAR00002.existflagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isibi_cocdeNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ibi_cocdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setibi_cocdeNull()
            Me(Me.tableIAR00002.ibi_cocdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isivi_venitmNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.ivi_venitmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setivi_venitmNull()
            Me(Me.tableIAR00002.ivi_venitmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompNameNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.compNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompNameNull()
            Me(Me.tableIAR00002.compNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimu_cus1noNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.imu_cus1noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimu_cus1noNull()
            Me(Me.tableIAR00002.imu_cus1noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimu_cus2noNull() As Boolean
            Return Me.IsNull(Me.tableIAR00002.imu_cus2noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimu_cus2noNull()
            Me(Me.tableIAR00002.imu_cus2noColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IAR00002RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IAR00002Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IAR00002Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IAR00002Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
