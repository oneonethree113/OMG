'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3634
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsIMR00033Rpt"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsIMR00033Rpt
    Inherits Global.System.Data.DataSet
    
    Private tableIMR00033 As IMR00033DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IMR00033")) Is Nothing) Then
                MyBase.Tables.Add(New IMR00033DataTable(ds.Tables("IMR00033")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMR00033() As IMR00033DataTable
        Get
            Return Me.tableIMR00033
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsIMR00033Rpt = CType(MyBase.Clone,dsIMR00033Rpt)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IMR00033")) Is Nothing) Then
                MyBase.Tables.Add(New IMR00033DataTable(ds.Tables("IMR00033")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIMR00033 = CType(MyBase.Tables("IMR00033"),IMR00033DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMR00033) Is Nothing) Then
                Me.tableIMR00033.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsIMR00033Rpt"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/IMR00033Rpt.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIMR00033 = New IMR00033DataTable
        MyBase.Tables.Add(Me.tableIMR00033)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMR00033() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsIMR00033Rpt = New dsIMR00033Rpt
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IMR00033RowChangeEventHandler(ByVal sender As Object, ByVal e As IMR00033RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMR00033DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnipd_stage As Global.System.Data.DataColumn
        
        Private columnipd_credat As Global.System.Data.DataColumn
        
        Private columnipd_venitm As Global.System.Data.DataColumn
        
        Private columnipd_lnecde As Global.System.Data.DataColumn
        
        Private columnipd_engdsc As Global.System.Data.DataColumn
        
        Private columnipd_untcde As Global.System.Data.DataColumn
        
        Private columnipd_conftr As Global.System.Data.DataColumn
        
        Private columnipd_inrqty As Global.System.Data.DataColumn
        
        Private columnipd_mtrqty As Global.System.Data.DataColumn
        
        Private columnipd_ftycst As Global.System.Data.DataColumn
        
        Private columnipd_sysmsg As Global.System.Data.DataColumn
        
        Private _column_stage As Global.System.Data.DataColumn
        
        Private _column_fromcredat As Global.System.Data.DataColumn
        
        Private _column_tocredat As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMR00033"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_stageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_stage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_credatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_credat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_venitmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_venitm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_lnecdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_lnecde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_engdscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_engdsc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_untcdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_untcde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_conftrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_conftr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_inrqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_inrqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_mtrqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_mtrqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_ftycstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_ftycst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ipd_sysmsgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipd_sysmsg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __stageColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_stage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __fromcredatColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_fromcredat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __tocredatColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_tocredat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMR00033Row
            Get
                Return CType(Me.Rows(index),IMR00033Row)
            End Get
        End Property
        
        Public Event IMR00033RowChanging As IMR00033RowChangeEventHandler
        
        Public Event IMR00033RowChanged As IMR00033RowChangeEventHandler
        
        Public Event IMR00033RowDeleting As IMR00033RowChangeEventHandler
        
        Public Event IMR00033RowDeleted As IMR00033RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMR00033Row(ByVal row As IMR00033Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMR00033Row(ByVal ipd_stage As String, ByVal ipd_credat As String, ByVal ipd_venitm As String, ByVal ipd_lnecde As String, ByVal ipd_engdsc As String, ByVal ipd_untcde As String, ByVal ipd_conftr As Integer, ByVal ipd_inrqty As Integer, ByVal ipd_mtrqty As Integer, ByVal ipd_ftycst As Double, ByVal ipd_sysmsg As String, ByVal __stage As String, ByVal __fromcredat As String, ByVal __tocredat As String) As IMR00033Row
            Dim rowIMR00033Row As IMR00033Row = CType(Me.NewRow,IMR00033Row)
            Dim columnValuesArray() As Object = New Object() {ipd_stage, ipd_credat, ipd_venitm, ipd_lnecde, ipd_engdsc, ipd_untcde, ipd_conftr, ipd_inrqty, ipd_mtrqty, ipd_ftycst, ipd_sysmsg, __stage, __fromcredat, __tocredat}
            rowIMR00033Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMR00033Row)
            Return rowIMR00033Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMR00033DataTable = CType(MyBase.Clone,IMR00033DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMR00033DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnipd_stage = MyBase.Columns("ipd_stage")
            Me.columnipd_credat = MyBase.Columns("ipd_credat")
            Me.columnipd_venitm = MyBase.Columns("ipd_venitm")
            Me.columnipd_lnecde = MyBase.Columns("ipd_lnecde")
            Me.columnipd_engdsc = MyBase.Columns("ipd_engdsc")
            Me.columnipd_untcde = MyBase.Columns("ipd_untcde")
            Me.columnipd_conftr = MyBase.Columns("ipd_conftr")
            Me.columnipd_inrqty = MyBase.Columns("ipd_inrqty")
            Me.columnipd_mtrqty = MyBase.Columns("ipd_mtrqty")
            Me.columnipd_ftycst = MyBase.Columns("ipd_ftycst")
            Me.columnipd_sysmsg = MyBase.Columns("ipd_sysmsg")
            Me._column_stage = MyBase.Columns("@stage")
            Me._column_fromcredat = MyBase.Columns("@fromcredat")
            Me._column_tocredat = MyBase.Columns("@tocredat")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnipd_stage = New Global.System.Data.DataColumn("ipd_stage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_stage)
            Me.columnipd_credat = New Global.System.Data.DataColumn("ipd_credat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_credat)
            Me.columnipd_venitm = New Global.System.Data.DataColumn("ipd_venitm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_venitm)
            Me.columnipd_lnecde = New Global.System.Data.DataColumn("ipd_lnecde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_lnecde)
            Me.columnipd_engdsc = New Global.System.Data.DataColumn("ipd_engdsc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_engdsc)
            Me.columnipd_untcde = New Global.System.Data.DataColumn("ipd_untcde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_untcde)
            Me.columnipd_conftr = New Global.System.Data.DataColumn("ipd_conftr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_conftr)
            Me.columnipd_inrqty = New Global.System.Data.DataColumn("ipd_inrqty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_inrqty)
            Me.columnipd_mtrqty = New Global.System.Data.DataColumn("ipd_mtrqty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_mtrqty)
            Me.columnipd_ftycst = New Global.System.Data.DataColumn("ipd_ftycst", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_ftycst)
            Me.columnipd_sysmsg = New Global.System.Data.DataColumn("ipd_sysmsg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipd_sysmsg)
            Me._column_stage = New Global.System.Data.DataColumn("@stage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_stage.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_stage")
            Me._column_stage.ExtendedProperties.Add("Generator_UserColumnName", "@stage")
            MyBase.Columns.Add(Me._column_stage)
            Me._column_fromcredat = New Global.System.Data.DataColumn("@fromcredat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_fromcredat.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_fromcredat")
            Me._column_fromcredat.ExtendedProperties.Add("Generator_UserColumnName", "@fromcredat")
            MyBase.Columns.Add(Me._column_fromcredat)
            Me._column_tocredat = New Global.System.Data.DataColumn("@tocredat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_tocredat.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_tocredat")
            Me._column_tocredat.ExtendedProperties.Add("Generator_UserColumnName", "@tocredat")
            MyBase.Columns.Add(Me._column_tocredat)
            Me.columnipd_stage.Caption = "iid_stage"
            Me.columnipd_credat.Caption = "iid_credat"
            Me.columnipd_venitm.Caption = "iid_venitm"
            Me.columnipd_lnecde.Caption = "iid_lnecde"
            Me.columnipd_engdsc.Caption = "iid_engdsc"
            Me.columnipd_untcde.Caption = "iid_untcde"
            Me.columnipd_conftr.Caption = "iid_conftr"
            Me.columnipd_inrqty.Caption = "iid_inrqty"
            Me.columnipd_mtrqty.Caption = "iid_mtrqty"
            Me.columnipd_ftycst.Caption = "iid_ftyprc"
            Me.columnipd_sysmsg.Caption = "iid_sysmsg"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMR00033Row() As IMR00033Row
            Return CType(Me.NewRow,IMR00033Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMR00033Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMR00033Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMR00033RowChangedEvent) Is Nothing) Then
                RaiseEvent IMR00033RowChanged(Me, New IMR00033RowChangeEvent(CType(e.Row,IMR00033Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMR00033RowChangingEvent) Is Nothing) Then
                RaiseEvent IMR00033RowChanging(Me, New IMR00033RowChangeEvent(CType(e.Row,IMR00033Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMR00033RowDeletedEvent) Is Nothing) Then
                RaiseEvent IMR00033RowDeleted(Me, New IMR00033RowChangeEvent(CType(e.Row,IMR00033Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMR00033RowDeletingEvent) Is Nothing) Then
                RaiseEvent IMR00033RowDeleting(Me, New IMR00033RowChangeEvent(CType(e.Row,IMR00033Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMR00033Row(ByVal row As IMR00033Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIMR00033Rpt = New dsIMR00033Rpt
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMR00033DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMR00033Row
        Inherits Global.System.Data.DataRow
        
        Private tableIMR00033 As IMR00033DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMR00033 = CType(Me.Table,IMR00033DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_stage() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_stageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_stage' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_stageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_credat() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_credatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_credat' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_credatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_venitm() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_venitmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_venitm' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_venitmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_lnecde() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_lnecdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_lnecde' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_lnecdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_engdsc() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_engdscColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_engdsc' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_engdscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_untcde() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_untcdeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_untcde' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_untcdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_conftr() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_conftrColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_conftr' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_conftrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_inrqty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_inrqtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_inrqty' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_inrqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_mtrqty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_mtrqtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_mtrqty' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_mtrqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_ftycst() As Double
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_ftycstColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_ftycst' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_ftycstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ipd_sysmsg() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.ipd_sysmsgColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ipd_sysmsg' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.ipd_sysmsgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __stage() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.__stageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '@stage' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.__stageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __fromcredat() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.__fromcredatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '@fromcredat' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.__fromcredatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __tocredat() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMR00033.__tocredatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '@tocredat' in table 'IMR00033' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMR00033.__tocredatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_stageNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_stageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_stageNull()
            Me(Me.tableIMR00033.ipd_stageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_credatNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_credatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_credatNull()
            Me(Me.tableIMR00033.ipd_credatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_venitmNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_venitmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_venitmNull()
            Me(Me.tableIMR00033.ipd_venitmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_lnecdeNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_lnecdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_lnecdeNull()
            Me(Me.tableIMR00033.ipd_lnecdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_engdscNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_engdscColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_engdscNull()
            Me(Me.tableIMR00033.ipd_engdscColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_untcdeNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_untcdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_untcdeNull()
            Me(Me.tableIMR00033.ipd_untcdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_conftrNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_conftrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_conftrNull()
            Me(Me.tableIMR00033.ipd_conftrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_inrqtyNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_inrqtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_inrqtyNull()
            Me(Me.tableIMR00033.ipd_inrqtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_mtrqtyNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_mtrqtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_mtrqtyNull()
            Me(Me.tableIMR00033.ipd_mtrqtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_ftycstNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_ftycstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_ftycstNull()
            Me(Me.tableIMR00033.ipd_ftycstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isipd_sysmsgNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.ipd_sysmsgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setipd_sysmsgNull()
            Me(Me.tableIMR00033.ipd_sysmsgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__stageNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.__stageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__stageNull()
            Me(Me.tableIMR00033.__stageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__fromcredatNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.__fromcredatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__fromcredatNull()
            Me(Me.tableIMR00033.__fromcredatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__tocredatNull() As Boolean
            Return Me.IsNull(Me.tableIMR00033.__tocredatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__tocredatNull()
            Me(Me.tableIMR00033.__tocredatColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMR00033RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMR00033Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMR00033Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMR00033Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
